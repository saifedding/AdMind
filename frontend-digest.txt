Directory structure:
└── frontend/
    ├── README.md
    ├── components.json
    ├── eslint.config.mjs
    ├── next-env.d.ts
    ├── next.config.ts
    ├── package.json
    ├── postcss.config.mjs
    ├── tailwind.config.ts
    ├── tsconfig.json
    ├── tsconfig.tsbuildinfo
    ├── public/
    └── src/
        ├── app/
        │   ├── globals.css
        │   ├── layout.tsx
        │   ├── page.tsx
        │   ├── ad-sets/
        │   │   └── [id]/
        │   │       └── page.tsx
        │   ├── ads/
        │   │   ├── page.tsx
        │   │   └── [id]/
        │   │       └── page.tsx
        │   ├── competitors/
        │   │   ├── page.tsx
        │   │   └── [id]/
        │   │       └── page.tsx
        │   ├── tasks/
        │   │   └── page.tsx
        │   └── test-adcard/
        ├── components/
        │   ├── dashboard/
        │   │   ├── index.ts
        │   │   ├── layout.tsx
        │   │   ├── sidebar-context.tsx
        │   │   └── sidebar.tsx
        │   └── ui/
        │       ├── avatar.tsx
        │       ├── badge.tsx
        │       ├── button.tsx
        │       ├── card.tsx
        │       ├── checkbox.tsx
        │       ├── datepicker.tsx
        │       ├── dialog.tsx
        │       ├── input.tsx
        │       ├── label.tsx
        │       ├── pagination.tsx
        │       ├── popover.tsx
        │       ├── select.tsx
        │       ├── separator.tsx
        │       ├── sheet.tsx
        │       ├── slider.tsx
        │       ├── switch.tsx
        │       ├── tabs.tsx
        │       └── view-toggle.tsx
        ├── features/
        │   └── dashboard/
        │       ├── README.md
        │       └── components/
        │           ├── ActiveFilterBadges.tsx
        │           ├── AdCard.tsx
        │           ├── AdFilters.tsx
        │           ├── AdList.tsx
        │           ├── AdSearch.tsx
        │           ├── BulkActionToolbar.tsx
        │           └── index.ts
        ├── lib/
        │   ├── api.ts
        │   ├── transformers.ts
        │   └── utils.ts
        └── types/
            ├── ad.ts
            └── declarations.d.ts

================================================
File: README.md
================================================
# Ad Intelligence Dashboard

A premium React/Next.js dashboard for analyzing Facebook ads with AI-powered insights using the Pylons.ai "Iridium & Photon" design system.

## Features

- **Ad Intelligence**: Real-time ad analysis with AI scoring
- **Performance Insights**: Comprehensive metrics and analytics
- **Competitor Tracking**: Monitor competitor ad strategies
- **Premium UI**: Modern dark-theme design with Iridium & Photon colors
- **Responsive Design**: Optimized for all screen sizes

## Getting Started

### Prerequisites

1. **Backend API**: Make sure the backend is running
   ```bash
   cd backend
   python -m uvicorn app.main:app --reload
   ```

2. **Environment Variables** (Optional):
   Create a `.env.local` file in the frontend root:
   ```env
   NEXT_PUBLIC_API_URL=http://localhost:8000
   ```

### Installation

1. Install dependencies:
   ```bash
   npm install
   ```

2. Start the development server:
   ```bash
   npm run dev
   ```

3. Open [http://localhost:3000](http://localhost:3000) in your browser

## Dashboard Structure

### Main Dashboard (`/`)
- Performance overview with key metrics
- Recent activity feed
- Top performing ads preview
- Quick navigation to all features

### Ad Intelligence (`/ads`)
- **Real-time ad cards** with AI analysis scores
- **High-performance indicators** (glow effects for scores > 8)
- **Comprehensive filtering** and search
- **Performance statistics** dashboard
- **Responsive grid layout** (1-4 columns based on screen size)

### Navigation
- **Sidebar navigation** with collapsible design
- **Mobile-responsive** header and menu
- **Active state indicators** for current page
- **Quick access buttons** throughout the interface

## Key Features

### AdCard Component
- **AI Score Display**: Visual indicators for ad performance
- **Media Support**: Images, videos, and carousel content
- **Performance Badges**: Impressions, spend, platform, status
- **Competitor Avatars**: Facebook profile pictures with fallbacks
- **Conditional Styling**: Photon-blue glow for high-performing ads

### Real-time Data
- **Live API Integration**: Fetches real ad data from backend
- **Error Handling**: Graceful fallbacks and retry mechanisms
- **Loading States**: Skeleton animations during data fetch
- **Empty States**: Helpful guidance when no data is available

### Design System
- **Iridium & Photon Colors**: Professional dark theme
- **Typography**: Geist Mono for headers, optimized fonts
- **Animations**: Subtle hover effects and transitions
- **Accessibility**: Focus indicators and screen reader support

## API Integration

The dashboard connects to your backend API at `http://localhost:8000/api/v1/`:

- `GET /ads` - Paginated ads with filtering and sorting
- `GET /ads/top-performing` - High-scoring ads
- `GET /competitors` - Competitor information
- Additional endpoints for search, analytics, and more

## Development

### Project Structure
```
frontend/src/
â”œâ”€â”€ app/
â”‚   â”œâ”€â”€ page.tsx              # Main dashboard
â”‚   â”œâ”€â”€ ads/page.tsx          # Ad Intelligence page
â”‚   â””â”€â”€ layout.tsx            # Root layout
â”œâ”€â”€ components/
â”‚   â”œâ”€â”€ dashboard/            # Dashboard layout components
â”‚   â””â”€â”€ ui/                   # Shadcn UI components
â”œâ”€â”€ features/
â”‚   â””â”€â”€ dashboard/
â”‚       â””â”€â”€ components/
â”‚           â””â”€â”€ AdCard.tsx    # Main ad card component
â”œâ”€â”€ lib/
â”‚   â”œâ”€â”€ api.ts               # API client
â”‚   â”œâ”€â”€ transformers.ts      # Data transformation
â”‚   â””â”€â”€ utils.ts             # Utilities
â””â”€â”€ types/
    â””â”€â”€ ad.ts                # TypeScript definitions
```

### Key Technologies
- **Next.js 14** with App Router
- **TypeScript** for type safety
- **Tailwind CSS** with custom design system
- **Shadcn/ui** components
- **Lucide React** icons

## Backend Setup

Make sure your backend is running and accessible:

1. **Start Backend**:
   ```bash
   cd backend
   python -m uvicorn app.main:app --reload
   ```

2. **Verify API**:
   - API: http://localhost:8000
   - Docs: http://localhost:8000/docs

3. **Check CORS Settings**:
   The backend should allow `http://localhost:3000` in CORS origins.

## Troubleshooting

### Common Issues

1. **"Connection Error"**: Backend not running
   - Start the backend server
   - Check if API is accessible at http://localhost:8000

2. **"No Ads Found"**: Empty database
   - Run the ad scraper to populate data
   - Check database connectivity

3. **Styling Issues**: CSS not loading
   - Clear browser cache
   - Restart development server

### Environment Variables

```env
# Required for API connection
NEXT_PUBLIC_API_URL=http://localhost:8000

# Optional development settings
NODE_ENV=development
```

## Contributing

1. Follow the existing code structure
2. Use TypeScript for type safety
3. Follow the Iridium & Photon design system
4. Add proper error handling for API calls
5. Test responsive design across screen sizes

## License

This project is part of the Ads Management Platform.



================================================
File: components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}


================================================
File: eslint.config.mjs
================================================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;



================================================
File: next-env.d.ts
================================================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.



================================================
File: next.config.ts
================================================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;



================================================
File: package.json
================================================
{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@radix-ui/react-avatar": "^1.1.10",
    "@radix-ui/react-checkbox": "^1.3.2",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-popover": "^1.1.14",
    "@radix-ui/react-select": "^2.2.5",
    "@radix-ui/react-slider": "^1.3.5",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-tabs": "^1.1.12",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "lucide-react": "^0.407.0",
    "next": "15.3.5",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "tailwind-merge": "^2.4.0",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@radix-ui/react-collapsible": "^1.1.11",
    "@tailwindcss/aspect-ratio": "^0.4.2",
    "@tailwindcss/postcss": "^4",
    "@types/date-fns": "^2.6.3",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "@types/react-icons": "^3.0.0",
    "eslint": "^9",
    "eslint-config-next": "15.3.5",
    "tailwindcss": "^4",
    "tw-animate-css": "^1.3.5",
    "typescript": "^5"
  }
}



================================================
File: postcss.config.mjs
================================================
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;



================================================
File: tailwind.config.ts
================================================
import type { Config } from 'tailwindcss';

/** @type {import('tailwindcss').Config} */
const config: Config = {
  content: ['./src/**/*.{ts,tsx}'],
  plugins: [
    require('tailwindcss-animate'),
    require('@tailwindcss/aspect-ratio'),
  ],
};

export default config; 


================================================
File: tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "src/types/declarations.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================
File: tsconfig.tsbuildinfo
================================================
{"fileNames":["./node_modules/typescript/lib/lib.es5.d.ts","./node_modules/typescript/lib/lib.es2015.d.ts","./node_modules/typescript/lib/lib.es2016.d.ts","./node_modules/typescript/lib/lib.es2017.d.ts","./node_modules/typescript/lib/lib.es2018.d.ts","./node_modules/typescript/lib/lib.es2019.d.ts","./node_modules/typescript/lib/lib.es2020.d.ts","./node_modules/typescript/lib/lib.es2021.d.ts","./node_modules/typescript/lib/lib.es2022.d.ts","./node_modules/typescript/lib/lib.es2023.d.ts","./node_modules/typescript/lib/lib.es2024.d.ts","./node_modules/typescript/lib/lib.esnext.d.ts","./node_modules/typescript/lib/lib.dom.d.ts","./node_modules/typescript/lib/lib.dom.iterable.d.ts","./node_modules/typescript/lib/lib.es2015.core.d.ts","./node_modules/typescript/lib/lib.es2015.collection.d.ts","./node_modules/typescript/lib/lib.es2015.generator.d.ts","./node_modules/typescript/lib/lib.es2015.iterable.d.ts","./node_modules/typescript/lib/lib.es2015.promise.d.ts","./node_modules/typescript/lib/lib.es2015.proxy.d.ts","./node_modules/typescript/lib/lib.es2015.reflect.d.ts","./node_modules/typescript/lib/lib.es2015.symbol.d.ts","./node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts","./node_modules/typescript/lib/lib.es2016.array.include.d.ts","./node_modules/typescript/lib/lib.es2016.intl.d.ts","./node_modules/typescript/lib/lib.es2017.arraybuffer.d.ts","./node_modules/typescript/lib/lib.es2017.date.d.ts","./node_modules/typescript/lib/lib.es2017.object.d.ts","./node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts","./node_modules/typescript/lib/lib.es2017.string.d.ts","./node_modules/typescript/lib/lib.es2017.intl.d.ts","./node_modules/typescript/lib/lib.es2017.typedarrays.d.ts","./node_modules/typescript/lib/lib.es2018.asyncgenerator.d.ts","./node_modules/typescript/lib/lib.es2018.asynciterable.d.ts","./node_modules/typescript/lib/lib.es2018.intl.d.ts","./node_modules/typescript/lib/lib.es2018.promise.d.ts","./node_modules/typescript/lib/lib.es2018.regexp.d.ts","./node_modules/typescript/lib/lib.es2019.array.d.ts","./node_modules/typescript/lib/lib.es2019.object.d.ts","./node_modules/typescript/lib/lib.es2019.string.d.ts","./node_modules/typescript/lib/lib.es2019.symbol.d.ts","./node_modules/typescript/lib/lib.es2019.intl.d.ts","./node_modules/typescript/lib/lib.es2020.bigint.d.ts","./node_modules/typescript/lib/lib.es2020.date.d.ts","./node_modules/typescript/lib/lib.es2020.promise.d.ts","./node_modules/typescript/lib/lib.es2020.sharedmemory.d.ts","./node_modules/typescript/lib/lib.es2020.string.d.ts","./node_modules/typescript/lib/lib.es2020.symbol.wellknown.d.ts","./node_modules/typescript/lib/lib.es2020.intl.d.ts","./node_modules/typescript/lib/lib.es2020.number.d.ts","./node_modules/typescript/lib/lib.es2021.promise.d.ts","./node_modules/typescript/lib/lib.es2021.string.d.ts","./node_modules/typescript/lib/lib.es2021.weakref.d.ts","./node_modules/typescript/lib/lib.es2021.intl.d.ts","./node_modules/typescript/lib/lib.es2022.array.d.ts","./node_modules/typescript/lib/lib.es2022.error.d.ts","./node_modules/typescript/lib/lib.es2022.intl.d.ts","./node_modules/typescript/lib/lib.es2022.object.d.ts","./node_modules/typescript/lib/lib.es2022.string.d.ts","./node_modules/typescript/lib/lib.es2022.regexp.d.ts","./node_modules/typescript/lib/lib.es2023.array.d.ts","./node_modules/typescript/lib/lib.es2023.collection.d.ts","./node_modules/typescript/lib/lib.es2023.intl.d.ts","./node_modules/typescript/lib/lib.es2024.arraybuffer.d.ts","./node_modules/typescript/lib/lib.es2024.collection.d.ts","./node_modules/typescript/lib/lib.es2024.object.d.ts","./node_modules/typescript/lib/lib.es2024.promise.d.ts","./node_modules/typescript/lib/lib.es2024.regexp.d.ts","./node_modules/typescript/lib/lib.es2024.sharedmemory.d.ts","./node_modules/typescript/lib/lib.es2024.string.d.ts","./node_modules/typescript/lib/lib.esnext.array.d.ts","./node_modules/typescript/lib/lib.esnext.collection.d.ts","./node_modules/typescript/lib/lib.esnext.intl.d.ts","./node_modules/typescript/lib/lib.esnext.disposable.d.ts","./node_modules/typescript/lib/lib.esnext.promise.d.ts","./node_modules/typescript/lib/lib.esnext.decorators.d.ts","./node_modules/typescript/lib/lib.esnext.iterator.d.ts","./node_modules/typescript/lib/lib.esnext.float16.d.ts","./node_modules/typescript/lib/lib.decorators.d.ts","./node_modules/typescript/lib/lib.decorators.legacy.d.ts","./node_modules/@types/react/global.d.ts","./node_modules/csstype/index.d.ts","./node_modules/@types/react/index.d.ts","./node_modules/next/dist/styled-jsx/types/css.d.ts","./node_modules/next/dist/styled-jsx/types/macro.d.ts","./node_modules/next/dist/styled-jsx/types/style.d.ts","./node_modules/next/dist/styled-jsx/types/global.d.ts","./node_modules/next/dist/styled-jsx/types/index.d.ts","./node_modules/next/dist/shared/lib/amp.d.ts","./node_modules/next/amp.d.ts","./node_modules/next/dist/server/get-page-files.d.ts","./node_modules/@types/node/compatibility/disposable.d.ts","./node_modules/@types/node/compatibility/indexable.d.ts","./node_modules/@types/node/compatibility/iterators.d.ts","./node_modules/@types/node/compatibility/index.d.ts","./node_modules/@types/node/globals.typedarray.d.ts","./node_modules/@types/node/buffer.buffer.d.ts","./node_modules/undici-types/header.d.ts","./node_modules/undici-types/readable.d.ts","./node_modules/undici-types/file.d.ts","./node_modules/undici-types/fetch.d.ts","./node_modules/undici-types/formdata.d.ts","./node_modules/undici-types/connector.d.ts","./node_modules/undici-types/client.d.ts","./node_modules/undici-types/errors.d.ts","./node_modules/undici-types/dispatcher.d.ts","./node_modules/undici-types/global-dispatcher.d.ts","./node_modules/undici-types/global-origin.d.ts","./node_modules/undici-types/pool-stats.d.ts","./node_modules/undici-types/pool.d.ts","./node_modules/undici-types/handlers.d.ts","./node_modules/undici-types/balanced-pool.d.ts","./node_modules/undici-types/agent.d.ts","./node_modules/undici-types/mock-interceptor.d.ts","./node_modules/undici-types/mock-agent.d.ts","./node_modules/undici-types/mock-client.d.ts","./node_modules/undici-types/mock-pool.d.ts","./node_modules/undici-types/mock-errors.d.ts","./node_modules/undici-types/proxy-agent.d.ts","./node_modules/undici-types/env-http-proxy-agent.d.ts","./node_modules/undici-types/retry-handler.d.ts","./node_modules/undici-types/retry-agent.d.ts","./node_modules/undici-types/api.d.ts","./node_modules/undici-types/interceptors.d.ts","./node_modules/undici-types/util.d.ts","./node_modules/undici-types/cookies.d.ts","./node_modules/undici-types/patch.d.ts","./node_modules/undici-types/websocket.d.ts","./node_modules/undici-types/eventsource.d.ts","./node_modules/undici-types/filereader.d.ts","./node_modules/undici-types/diagnostics-channel.d.ts","./node_modules/undici-types/content-type.d.ts","./node_modules/undici-types/cache.d.ts","./node_modules/undici-types/index.d.ts","./node_modules/@types/node/globals.d.ts","./node_modules/@types/node/assert.d.ts","./node_modules/@types/node/assert/strict.d.ts","./node_modules/@types/node/async_hooks.d.ts","./node_modules/@types/node/buffer.d.ts","./node_modules/@types/node/child_process.d.ts","./node_modules/@types/node/cluster.d.ts","./node_modules/@types/node/console.d.ts","./node_modules/@types/node/constants.d.ts","./node_modules/@types/node/crypto.d.ts","./node_modules/@types/node/dgram.d.ts","./node_modules/@types/node/diagnostics_channel.d.ts","./node_modules/@types/node/dns.d.ts","./node_modules/@types/node/dns/promises.d.ts","./node_modules/@types/node/domain.d.ts","./node_modules/@types/node/dom-events.d.ts","./node_modules/@types/node/events.d.ts","./node_modules/@types/node/fs.d.ts","./node_modules/@types/node/fs/promises.d.ts","./node_modules/@types/node/http.d.ts","./node_modules/@types/node/http2.d.ts","./node_modules/@types/node/https.d.ts","./node_modules/@types/node/inspector.d.ts","./node_modules/@types/node/module.d.ts","./node_modules/@types/node/net.d.ts","./node_modules/@types/node/os.d.ts","./node_modules/@types/node/path.d.ts","./node_modules/@types/node/perf_hooks.d.ts","./node_modules/@types/node/process.d.ts","./node_modules/@types/node/punycode.d.ts","./node_modules/@types/node/querystring.d.ts","./node_modules/@types/node/readline.d.ts","./node_modules/@types/node/readline/promises.d.ts","./node_modules/@types/node/repl.d.ts","./node_modules/@types/node/sea.d.ts","./node_modules/@types/node/stream.d.ts","./node_modules/@types/node/stream/promises.d.ts","./node_modules/@types/node/stream/consumers.d.ts","./node_modules/@types/node/stream/web.d.ts","./node_modules/@types/node/string_decoder.d.ts","./node_modules/@types/node/test.d.ts","./node_modules/@types/node/timers.d.ts","./node_modules/@types/node/timers/promises.d.ts","./node_modules/@types/node/tls.d.ts","./node_modules/@types/node/trace_events.d.ts","./node_modules/@types/node/tty.d.ts","./node_modules/@types/node/url.d.ts","./node_modules/@types/node/util.d.ts","./node_modules/@types/node/v8.d.ts","./node_modules/@types/node/vm.d.ts","./node_modules/@types/node/wasi.d.ts","./node_modules/@types/node/worker_threads.d.ts","./node_modules/@types/node/zlib.d.ts","./node_modules/@types/node/index.d.ts","./node_modules/@types/react/canary.d.ts","./node_modules/@types/react/experimental.d.ts","./node_modules/@types/react-dom/index.d.ts","./node_modules/@types/react-dom/canary.d.ts","./node_modules/@types/react-dom/experimental.d.ts","./node_modules/next/dist/lib/fallback.d.ts","./node_modules/next/dist/compiled/webpack/webpack.d.ts","./node_modules/next/dist/server/config.d.ts","./node_modules/next/dist/lib/load-custom-routes.d.ts","./node_modules/next/dist/shared/lib/image-config.d.ts","./node_modules/next/dist/build/webpack/plugins/subresource-integrity-plugin.d.ts","./node_modules/next/dist/server/body-streams.d.ts","./node_modules/next/dist/server/lib/cache-control.d.ts","./node_modules/next/dist/lib/setup-exception-listeners.d.ts","./node_modules/next/dist/lib/worker.d.ts","./node_modules/next/dist/lib/constants.d.ts","./node_modules/next/dist/client/components/app-router-headers.d.ts","./node_modules/next/dist/build/rendering-mode.d.ts","./node_modules/next/dist/server/lib/router-utils/build-prefetch-segment-data-route.d.ts","./node_modules/next/dist/server/require-hook.d.ts","./node_modules/next/dist/server/lib/experimental/ppr.d.ts","./node_modules/next/dist/build/webpack/plugins/app-build-manifest-plugin.d.ts","./node_modules/next/dist/lib/page-types.d.ts","./node_modules/next/dist/build/segment-config/app/app-segment-config.d.ts","./node_modules/next/dist/build/segment-config/pages/pages-segment-config.d.ts","./node_modules/next/dist/build/analysis/get-page-static-info.d.ts","./node_modules/next/dist/build/webpack/loaders/get-module-build-info.d.ts","./node_modules/next/dist/build/webpack/plugins/middleware-plugin.d.ts","./node_modules/next/dist/server/node-polyfill-crypto.d.ts","./node_modules/next/dist/server/node-environment-baseline.d.ts","./node_modules/next/dist/server/node-environment-extensions/error-inspect.d.ts","./node_modules/next/dist/server/node-environment-extensions/random.d.ts","./node_modules/next/dist/server/node-environment-extensions/date.d.ts","./node_modules/next/dist/server/node-environment-extensions/web-crypto.d.ts","./node_modules/next/dist/server/node-environment-extensions/node-crypto.d.ts","./node_modules/next/dist/server/node-environment.d.ts","./node_modules/next/dist/build/page-extensions-type.d.ts","./node_modules/next/dist/build/webpack/plugins/flight-manifest-plugin.d.ts","./node_modules/next/dist/server/route-kind.d.ts","./node_modules/next/dist/server/route-definitions/route-definition.d.ts","./node_modules/next/dist/server/route-modules/route-module.d.ts","./node_modules/next/dist/shared/lib/deep-readonly.d.ts","./node_modules/next/dist/server/load-components.d.ts","./node_modules/next/dist/server/route-definitions/app-page-route-definition.d.ts","./node_modules/next/dist/server/lib/cache-handlers/types.d.ts","./node_modules/next/dist/server/response-cache/types.d.ts","./node_modules/next/dist/server/resume-data-cache/cache-store.d.ts","./node_modules/next/dist/server/resume-data-cache/resume-data-cache.d.ts","./node_modules/next/dist/server/render-result.d.ts","./node_modules/next/dist/build/webpack/plugins/next-font-manifest-plugin.d.ts","./node_modules/next/dist/client/components/router-reducer/router-reducer-types.d.ts","./node_modules/next/dist/client/flight-data-helpers.d.ts","./node_modules/next/dist/client/components/router-reducer/fetch-server-response.d.ts","./node_modules/next/dist/shared/lib/app-router-context.shared-runtime.d.ts","./node_modules/next/dist/shared/lib/router/utils/middleware-route-matcher.d.ts","./node_modules/next/dist/server/route-definitions/locale-route-definition.d.ts","./node_modules/next/dist/server/route-definitions/pages-route-definition.d.ts","./node_modules/next/dist/shared/lib/mitt.d.ts","./node_modules/next/dist/client/with-router.d.ts","./node_modules/next/dist/client/router.d.ts","./node_modules/next/dist/client/route-loader.d.ts","./node_modules/next/dist/client/page-loader.d.ts","./node_modules/next/dist/shared/lib/bloom-filter.d.ts","./node_modules/next/dist/shared/lib/router/router.d.ts","./node_modules/next/dist/shared/lib/router-context.shared-runtime.d.ts","./node_modules/next/dist/shared/lib/loadable-context.shared-runtime.d.ts","./node_modules/next/dist/shared/lib/loadable.shared-runtime.d.ts","./node_modules/next/dist/shared/lib/image-config-context.shared-runtime.d.ts","./node_modules/next/dist/shared/lib/hooks-client-context.shared-runtime.d.ts","./node_modules/next/dist/shared/lib/head-manager-context.shared-runtime.d.ts","./node_modules/next/dist/shared/lib/amp-context.shared-runtime.d.ts","./node_modules/next/dist/shared/lib/server-inserted-html.shared-runtime.d.ts","./node_modules/next/dist/server/route-modules/pages/vendored/contexts/entrypoints.d.ts","./node_modules/next/dist/server/route-modules/pages/module.compiled.d.ts","./node_modules/next/dist/build/templates/pages.d.ts","./node_modules/next/dist/server/route-modules/pages/module.d.ts","./node_modules/@types/react/jsx-runtime.d.ts","./node_modules/next/dist/client/components/react-dev-overlay/pages/pages-dev-overlay.d.ts","./node_modules/next/dist/server/render.d.ts","./node_modules/next/dist/server/response-cache/index.d.ts","./node_modules/next/dist/build/webpack/plugins/pages-manifest-plugin.d.ts","./node_modules/next/dist/server/route-definitions/pages-api-route-definition.d.ts","./node_modules/next/dist/server/route-matches/pages-api-route-match.d.ts","./node_modules/next/dist/server/instrumentation/types.d.ts","./node_modules/next/dist/server/route-matchers/route-matcher.d.ts","./node_modules/next/dist/server/route-matcher-providers/route-matcher-provider.d.ts","./node_modules/next/dist/server/lib/i18n-provider.d.ts","./node_modules/next/dist/server/route-matcher-managers/route-matcher-manager.d.ts","./node_modules/next/dist/server/normalizers/normalizer.d.ts","./node_modules/next/dist/server/normalizers/locale-route-normalizer.d.ts","./node_modules/next/dist/server/normalizers/request/pathname-normalizer.d.ts","./node_modules/next/dist/server/normalizers/request/suffix.d.ts","./node_modules/next/dist/server/normalizers/request/rsc.d.ts","./node_modules/next/dist/server/normalizers/request/prefetch-rsc.d.ts","./node_modules/next/dist/server/normalizers/request/next-data.d.ts","./node_modules/next/dist/server/after/builtin-request-context.d.ts","./node_modules/next/dist/server/normalizers/request/segment-prefix-rsc.d.ts","./node_modules/next/dist/server/base-server.d.ts","./node_modules/next/dist/server/web/next-url.d.ts","./node_modules/next/dist/compiled/@edge-runtime/cookies/index.d.ts","./node_modules/next/dist/server/web/spec-extension/cookies.d.ts","./node_modules/next/dist/server/web/spec-extension/request.d.ts","./node_modules/next/dist/server/web/spec-extension/fetch-event.d.ts","./node_modules/next/dist/server/web/spec-extension/response.d.ts","./node_modules/next/dist/build/segment-config/middleware/middleware-config.d.ts","./node_modules/next/dist/server/web/types.d.ts","./node_modules/next/dist/server/web/adapter.d.ts","./node_modules/next/dist/server/use-cache/cache-life.d.ts","./node_modules/next/dist/server/app-render/types.d.ts","./node_modules/next/dist/shared/lib/modern-browserslist-target.d.ts","./node_modules/next/dist/shared/lib/constants.d.ts","./node_modules/next/dist/build/webpack/loaders/metadata/types.d.ts","./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.d.ts","./node_modules/next/dist/server/lib/app-dir-module.d.ts","./node_modules/next/dist/server/web/spec-extension/adapters/request-cookies.d.ts","./node_modules/next/dist/server/async-storage/draft-mode-provider.d.ts","./node_modules/next/dist/server/web/spec-extension/adapters/headers.d.ts","./node_modules/next/dist/server/app-render/cache-signal.d.ts","./node_modules/next/dist/server/app-render/dynamic-rendering.d.ts","./node_modules/next/dist/server/app-render/work-unit-async-storage-instance.d.ts","./node_modules/next/dist/server/request/fallback-params.d.ts","./node_modules/next/dist/server/lib/lazy-result.d.ts","./node_modules/next/dist/server/lib/implicit-tags.d.ts","./node_modules/next/dist/server/app-render/work-unit-async-storage.external.d.ts","./node_modules/next/dist/shared/lib/router/utils/parse-relative-url.d.ts","./node_modules/next/dist/server/app-render/clean-async-snapshot-instance.d.ts","./node_modules/next/dist/server/app-render/clean-async-snapshot.external.d.ts","./node_modules/next/dist/server/app-render/app-render.d.ts","./node_modules/next/dist/shared/lib/server-inserted-metadata.shared-runtime.d.ts","./node_modules/next/dist/server/route-modules/app-page/vendored/contexts/entrypoints.d.ts","./node_modules/next/dist/client/components/error-boundary.d.ts","./node_modules/next/dist/client/components/layout-router.d.ts","./node_modules/next/dist/client/components/render-from-template-context.d.ts","./node_modules/next/dist/server/app-render/action-async-storage-instance.d.ts","./node_modules/next/dist/server/app-render/action-async-storage.external.d.ts","./node_modules/next/dist/client/components/client-page.d.ts","./node_modules/next/dist/client/components/client-segment.d.ts","./node_modules/next/dist/server/request/search-params.d.ts","./node_modules/next/dist/client/components/hooks-server-context.d.ts","./node_modules/next/dist/client/components/http-access-fallback/error-boundary.d.ts","./node_modules/next/dist/lib/metadata/types/alternative-urls-types.d.ts","./node_modules/next/dist/lib/metadata/types/extra-types.d.ts","./node_modules/next/dist/lib/metadata/types/metadata-types.d.ts","./node_modules/next/dist/lib/metadata/types/manifest-types.d.ts","./node_modules/next/dist/lib/metadata/types/opengraph-types.d.ts","./node_modules/next/dist/lib/metadata/types/twitter-types.d.ts","./node_modules/next/dist/lib/metadata/types/metadata-interface.d.ts","./node_modules/next/dist/lib/metadata/types/resolvers.d.ts","./node_modules/next/dist/lib/metadata/types/icons.d.ts","./node_modules/next/dist/lib/metadata/resolve-metadata.d.ts","./node_modules/next/dist/lib/metadata/metadata.d.ts","./node_modules/next/dist/client/components/metadata/metadata-boundary.d.ts","./node_modules/next/dist/server/app-render/rsc/preloads.d.ts","./node_modules/next/dist/server/app-render/rsc/postpone.d.ts","./node_modules/next/dist/server/app-render/rsc/taint.d.ts","./node_modules/next/dist/server/app-render/collect-segment-data.d.ts","./node_modules/next/dist/server/app-render/entry-base.d.ts","./node_modules/next/dist/build/templates/app-page.d.ts","./node_modules/next/dist/server/route-modules/app-page/module.d.ts","./node_modules/next/dist/server/route-modules/app-page/module.compiled.d.ts","./node_modules/next/dist/server/route-definitions/app-route-route-definition.d.ts","./node_modules/next/dist/server/async-storage/work-store.d.ts","./node_modules/next/dist/server/web/http.d.ts","./node_modules/next/dist/server/route-modules/app-route/shared-modules.d.ts","./node_modules/next/dist/client/components/redirect-status-code.d.ts","./node_modules/next/dist/client/components/redirect-error.d.ts","./node_modules/next/dist/build/templates/app-route.d.ts","./node_modules/next/dist/server/route-modules/app-route/module.d.ts","./node_modules/next/dist/server/route-modules/app-route/module.compiled.d.ts","./node_modules/next/dist/build/segment-config/app/app-segments.d.ts","./node_modules/next/dist/build/static-paths/types.d.ts","./node_modules/next/dist/build/utils.d.ts","./node_modules/next/dist/build/turborepo-access-trace/types.d.ts","./node_modules/next/dist/build/turborepo-access-trace/result.d.ts","./node_modules/next/dist/build/turborepo-access-trace/helpers.d.ts","./node_modules/next/dist/build/turborepo-access-trace/index.d.ts","./node_modules/next/dist/export/routes/types.d.ts","./node_modules/next/dist/export/types.d.ts","./node_modules/next/dist/export/worker.d.ts","./node_modules/next/dist/build/worker.d.ts","./node_modules/next/dist/build/index.d.ts","./node_modules/next/dist/server/lib/incremental-cache/index.d.ts","./node_modules/next/dist/server/after/after.d.ts","./node_modules/next/dist/server/after/after-context.d.ts","./node_modules/next/dist/server/app-render/work-async-storage-instance.d.ts","./node_modules/next/dist/server/app-render/work-async-storage.external.d.ts","./node_modules/next/dist/server/request/params.d.ts","./node_modules/next/dist/server/route-matches/route-match.d.ts","./node_modules/next/dist/server/request-meta.d.ts","./node_modules/next/dist/cli/next-test.d.ts","./node_modules/next/dist/server/config-shared.d.ts","./node_modules/next/dist/server/base-http/index.d.ts","./node_modules/next/dist/server/api-utils/index.d.ts","./node_modules/next/dist/shared/lib/router/utils/parse-url.d.ts","./node_modules/next/dist/server/base-http/node.d.ts","./node_modules/next/dist/server/lib/async-callback-set.d.ts","./node_modules/next/dist/shared/lib/router/utils/route-regex.d.ts","./node_modules/next/dist/shared/lib/router/utils/route-matcher.d.ts","./node_modules/sharp/lib/index.d.ts","./node_modules/next/dist/server/image-optimizer.d.ts","./node_modules/next/dist/server/next-server.d.ts","./node_modules/next/dist/lib/coalesced-function.d.ts","./node_modules/next/dist/server/lib/router-utils/types.d.ts","./node_modules/next/dist/trace/types.d.ts","./node_modules/next/dist/trace/trace.d.ts","./node_modules/next/dist/trace/shared.d.ts","./node_modules/next/dist/trace/index.d.ts","./node_modules/next/dist/build/load-jsconfig.d.ts","./node_modules/next/dist/build/webpack-config.d.ts","./node_modules/next/dist/build/swc/generated-native.d.ts","./node_modules/next/dist/build/swc/types.d.ts","./node_modules/next/dist/server/dev/parse-version-info.d.ts","./node_modules/next/dist/client/components/react-dev-overlay/types.d.ts","./node_modules/next/dist/server/dev/dev-indicator-server-state.d.ts","./node_modules/next/dist/server/dev/hot-reloader-types.d.ts","./node_modules/next/dist/telemetry/storage.d.ts","./node_modules/next/dist/server/lib/render-server.d.ts","./node_modules/next/dist/server/lib/router-server.d.ts","./node_modules/next/dist/shared/lib/router/utils/path-match.d.ts","./node_modules/next/dist/server/lib/router-utils/filesystem.d.ts","./node_modules/next/dist/server/lib/router-utils/setup-dev-bundler.d.ts","./node_modules/next/dist/server/lib/types.d.ts","./node_modules/next/dist/server/lib/lru-cache.d.ts","./node_modules/next/dist/server/lib/dev-bundler-service.d.ts","./node_modules/next/dist/server/dev/static-paths-worker.d.ts","./node_modules/next/dist/server/dev/next-dev-server.d.ts","./node_modules/next/dist/server/next.d.ts","./node_modules/next/dist/types.d.ts","./node_modules/next/dist/shared/lib/html-context.shared-runtime.d.ts","./node_modules/@next/env/dist/index.d.ts","./node_modules/next/dist/shared/lib/utils.d.ts","./node_modules/next/dist/pages/_app.d.ts","./node_modules/next/app.d.ts","./node_modules/next/dist/server/web/spec-extension/unstable-cache.d.ts","./node_modules/next/dist/server/web/spec-extension/revalidate.d.ts","./node_modules/next/dist/server/web/spec-extension/unstable-no-store.d.ts","./node_modules/next/dist/server/use-cache/cache-tag.d.ts","./node_modules/next/cache.d.ts","./node_modules/next/dist/shared/lib/runtime-config.external.d.ts","./node_modules/next/config.d.ts","./node_modules/next/dist/pages/_document.d.ts","./node_modules/next/document.d.ts","./node_modules/next/dist/shared/lib/dynamic.d.ts","./node_modules/next/dynamic.d.ts","./node_modules/next/dist/pages/_error.d.ts","./node_modules/next/error.d.ts","./node_modules/next/dist/shared/lib/head.d.ts","./node_modules/next/head.d.ts","./node_modules/next/dist/server/request/cookies.d.ts","./node_modules/next/dist/server/request/headers.d.ts","./node_modules/next/dist/server/request/draft-mode.d.ts","./node_modules/next/headers.d.ts","./node_modules/next/dist/shared/lib/get-img-props.d.ts","./node_modules/next/dist/client/image-component.d.ts","./node_modules/next/dist/shared/lib/image-external.d.ts","./node_modules/next/image.d.ts","./node_modules/next/dist/client/link.d.ts","./node_modules/next/link.d.ts","./node_modules/next/dist/client/components/redirect.d.ts","./node_modules/next/dist/client/components/not-found.d.ts","./node_modules/next/dist/client/components/forbidden.d.ts","./node_modules/next/dist/client/components/unauthorized.d.ts","./node_modules/next/dist/client/components/unstable-rethrow.server.d.ts","./node_modules/next/dist/client/components/unstable-rethrow.d.ts","./node_modules/next/dist/client/components/navigation.react-server.d.ts","./node_modules/next/dist/client/components/navigation.d.ts","./node_modules/next/navigation.d.ts","./node_modules/next/router.d.ts","./node_modules/next/dist/client/script.d.ts","./node_modules/next/script.d.ts","./node_modules/next/dist/server/web/spec-extension/user-agent.d.ts","./node_modules/next/dist/compiled/@edge-runtime/primitives/url.d.ts","./node_modules/next/dist/server/web/spec-extension/image-response.d.ts","./node_modules/next/dist/compiled/@vercel/og/satori/index.d.ts","./node_modules/next/dist/compiled/@vercel/og/emoji/index.d.ts","./node_modules/next/dist/compiled/@vercel/og/types.d.ts","./node_modules/next/dist/server/after/index.d.ts","./node_modules/next/dist/server/request/root-params.d.ts","./node_modules/next/dist/server/request/connection.d.ts","./node_modules/next/server.d.ts","./node_modules/next/types/global.d.ts","./node_modules/next/types/compiled.d.ts","./node_modules/next/types.d.ts","./node_modules/next/index.d.ts","./node_modules/next/image-types/global.d.ts","./next-env.d.ts","./src/types/declarations.d.ts","./next.config.ts","./node_modules/tailwindcss/dist/colors.d.mts","./node_modules/tailwindcss/dist/resolve-config-QUZ9b-Gn.d.mts","./node_modules/tailwindcss/dist/types-B254mqw1.d.mts","./node_modules/tailwindcss/dist/lib.d.mts","./tailwind.config.ts","./node_modules/@radix-ui/react-slot/dist/index.d.mts","./node_modules/class-variance-authority/node_modules/clsx/clsx.d.mts","./node_modules/class-variance-authority/dist/types.d.ts","./node_modules/class-variance-authority/dist/index.d.ts","./node_modules/clsx/clsx.d.mts","./node_modules/tailwind-merge/dist/types.d.ts","./node_modules/date-fns/constants.d.ts","./node_modules/date-fns/locale/types.d.ts","./node_modules/date-fns/fp/types.d.ts","./node_modules/date-fns/types.d.ts","./node_modules/date-fns/add.d.ts","./node_modules/date-fns/addBusinessDays.d.ts","./node_modules/date-fns/addDays.d.ts","./node_modules/date-fns/addHours.d.ts","./node_modules/date-fns/addISOWeekYears.d.ts","./node_modules/date-fns/addMilliseconds.d.ts","./node_modules/date-fns/addMinutes.d.ts","./node_modules/date-fns/addMonths.d.ts","./node_modules/date-fns/addQuarters.d.ts","./node_modules/date-fns/addSeconds.d.ts","./node_modules/date-fns/addWeeks.d.ts","./node_modules/date-fns/addYears.d.ts","./node_modules/date-fns/areIntervalsOverlapping.d.ts","./node_modules/date-fns/clamp.d.ts","./node_modules/date-fns/closestIndexTo.d.ts","./node_modules/date-fns/closestTo.d.ts","./node_modules/date-fns/compareAsc.d.ts","./node_modules/date-fns/compareDesc.d.ts","./node_modules/date-fns/constructFrom.d.ts","./node_modules/date-fns/constructNow.d.ts","./node_modules/date-fns/daysToWeeks.d.ts","./node_modules/date-fns/differenceInBusinessDays.d.ts","./node_modules/date-fns/differenceInCalendarDays.d.ts","./node_modules/date-fns/differenceInCalendarISOWeekYears.d.ts","./node_modules/date-fns/differenceInCalendarISOWeeks.d.ts","./node_modules/date-fns/differenceInCalendarMonths.d.ts","./node_modules/date-fns/differenceInCalendarQuarters.d.ts","./node_modules/date-fns/differenceInCalendarWeeks.d.ts","./node_modules/date-fns/differenceInCalendarYears.d.ts","./node_modules/date-fns/differenceInDays.d.ts","./node_modules/date-fns/differenceInHours.d.ts","./node_modules/date-fns/differenceInISOWeekYears.d.ts","./node_modules/date-fns/differenceInMilliseconds.d.ts","./node_modules/date-fns/differenceInMinutes.d.ts","./node_modules/date-fns/differenceInMonths.d.ts","./node_modules/date-fns/differenceInQuarters.d.ts","./node_modules/date-fns/differenceInSeconds.d.ts","./node_modules/date-fns/differenceInWeeks.d.ts","./node_modules/date-fns/differenceInYears.d.ts","./node_modules/date-fns/eachDayOfInterval.d.ts","./node_modules/date-fns/eachHourOfInterval.d.ts","./node_modules/date-fns/eachMinuteOfInterval.d.ts","./node_modules/date-fns/eachMonthOfInterval.d.ts","./node_modules/date-fns/eachQuarterOfInterval.d.ts","./node_modules/date-fns/eachWeekOfInterval.d.ts","./node_modules/date-fns/eachWeekendOfInterval.d.ts","./node_modules/date-fns/eachWeekendOfMonth.d.ts","./node_modules/date-fns/eachWeekendOfYear.d.ts","./node_modules/date-fns/eachYearOfInterval.d.ts","./node_modules/date-fns/endOfDay.d.ts","./node_modules/date-fns/endOfDecade.d.ts","./node_modules/date-fns/endOfHour.d.ts","./node_modules/date-fns/endOfISOWeek.d.ts","./node_modules/date-fns/endOfISOWeekYear.d.ts","./node_modules/date-fns/endOfMinute.d.ts","./node_modules/date-fns/endOfMonth.d.ts","./node_modules/date-fns/endOfQuarter.d.ts","./node_modules/date-fns/endOfSecond.d.ts","./node_modules/date-fns/endOfToday.d.ts","./node_modules/date-fns/endOfTomorrow.d.ts","./node_modules/date-fns/endOfWeek.d.ts","./node_modules/date-fns/endOfYear.d.ts","./node_modules/date-fns/endOfYesterday.d.ts","./node_modules/date-fns/_lib/format/formatters.d.ts","./node_modules/date-fns/_lib/format/longFormatters.d.ts","./node_modules/date-fns/format.d.ts","./node_modules/date-fns/formatDistance.d.ts","./node_modules/date-fns/formatDistanceStrict.d.ts","./node_modules/date-fns/formatDistanceToNow.d.ts","./node_modules/date-fns/formatDistanceToNowStrict.d.ts","./node_modules/date-fns/formatDuration.d.ts","./node_modules/date-fns/formatISO.d.ts","./node_modules/date-fns/formatISO9075.d.ts","./node_modules/date-fns/formatISODuration.d.ts","./node_modules/date-fns/formatRFC3339.d.ts","./node_modules/date-fns/formatRFC7231.d.ts","./node_modules/date-fns/formatRelative.d.ts","./node_modules/date-fns/fromUnixTime.d.ts","./node_modules/date-fns/getDate.d.ts","./node_modules/date-fns/getDay.d.ts","./node_modules/date-fns/getDayOfYear.d.ts","./node_modules/date-fns/getDaysInMonth.d.ts","./node_modules/date-fns/getDaysInYear.d.ts","./node_modules/date-fns/getDecade.d.ts","./node_modules/date-fns/_lib/defaultOptions.d.ts","./node_modules/date-fns/getDefaultOptions.d.ts","./node_modules/date-fns/getHours.d.ts","./node_modules/date-fns/getISODay.d.ts","./node_modules/date-fns/getISOWeek.d.ts","./node_modules/date-fns/getISOWeekYear.d.ts","./node_modules/date-fns/getISOWeeksInYear.d.ts","./node_modules/date-fns/getMilliseconds.d.ts","./node_modules/date-fns/getMinutes.d.ts","./node_modules/date-fns/getMonth.d.ts","./node_modules/date-fns/getOverlappingDaysInIntervals.d.ts","./node_modules/date-fns/getQuarter.d.ts","./node_modules/date-fns/getSeconds.d.ts","./node_modules/date-fns/getTime.d.ts","./node_modules/date-fns/getUnixTime.d.ts","./node_modules/date-fns/getWeek.d.ts","./node_modules/date-fns/getWeekOfMonth.d.ts","./node_modules/date-fns/getWeekYear.d.ts","./node_modules/date-fns/getWeeksInMonth.d.ts","./node_modules/date-fns/getYear.d.ts","./node_modules/date-fns/hoursToMilliseconds.d.ts","./node_modules/date-fns/hoursToMinutes.d.ts","./node_modules/date-fns/hoursToSeconds.d.ts","./node_modules/date-fns/interval.d.ts","./node_modules/date-fns/intervalToDuration.d.ts","./node_modules/date-fns/intlFormat.d.ts","./node_modules/date-fns/intlFormatDistance.d.ts","./node_modules/date-fns/isAfter.d.ts","./node_modules/date-fns/isBefore.d.ts","./node_modules/date-fns/isDate.d.ts","./node_modules/date-fns/isEqual.d.ts","./node_modules/date-fns/isExists.d.ts","./node_modules/date-fns/isFirstDayOfMonth.d.ts","./node_modules/date-fns/isFriday.d.ts","./node_modules/date-fns/isFuture.d.ts","./node_modules/date-fns/isLastDayOfMonth.d.ts","./node_modules/date-fns/isLeapYear.d.ts","./node_modules/date-fns/isMatch.d.ts","./node_modules/date-fns/isMonday.d.ts","./node_modules/date-fns/isPast.d.ts","./node_modules/date-fns/isSameDay.d.ts","./node_modules/date-fns/isSameHour.d.ts","./node_modules/date-fns/isSameISOWeek.d.ts","./node_modules/date-fns/isSameISOWeekYear.d.ts","./node_modules/date-fns/isSameMinute.d.ts","./node_modules/date-fns/isSameMonth.d.ts","./node_modules/date-fns/isSameQuarter.d.ts","./node_modules/date-fns/isSameSecond.d.ts","./node_modules/date-fns/isSameWeek.d.ts","./node_modules/date-fns/isSameYear.d.ts","./node_modules/date-fns/isSaturday.d.ts","./node_modules/date-fns/isSunday.d.ts","./node_modules/date-fns/isThisHour.d.ts","./node_modules/date-fns/isThisISOWeek.d.ts","./node_modules/date-fns/isThisMinute.d.ts","./node_modules/date-fns/isThisMonth.d.ts","./node_modules/date-fns/isThisQuarter.d.ts","./node_modules/date-fns/isThisSecond.d.ts","./node_modules/date-fns/isThisWeek.d.ts","./node_modules/date-fns/isThisYear.d.ts","./node_modules/date-fns/isThursday.d.ts","./node_modules/date-fns/isToday.d.ts","./node_modules/date-fns/isTomorrow.d.ts","./node_modules/date-fns/isTuesday.d.ts","./node_modules/date-fns/isValid.d.ts","./node_modules/date-fns/isWednesday.d.ts","./node_modules/date-fns/isWeekend.d.ts","./node_modules/date-fns/isWithinInterval.d.ts","./node_modules/date-fns/isYesterday.d.ts","./node_modules/date-fns/lastDayOfDecade.d.ts","./node_modules/date-fns/lastDayOfISOWeek.d.ts","./node_modules/date-fns/lastDayOfISOWeekYear.d.ts","./node_modules/date-fns/lastDayOfMonth.d.ts","./node_modules/date-fns/lastDayOfQuarter.d.ts","./node_modules/date-fns/lastDayOfWeek.d.ts","./node_modules/date-fns/lastDayOfYear.d.ts","./node_modules/date-fns/_lib/format/lightFormatters.d.ts","./node_modules/date-fns/lightFormat.d.ts","./node_modules/date-fns/max.d.ts","./node_modules/date-fns/milliseconds.d.ts","./node_modules/date-fns/millisecondsToHours.d.ts","./node_modules/date-fns/millisecondsToMinutes.d.ts","./node_modules/date-fns/millisecondsToSeconds.d.ts","./node_modules/date-fns/min.d.ts","./node_modules/date-fns/minutesToHours.d.ts","./node_modules/date-fns/minutesToMilliseconds.d.ts","./node_modules/date-fns/minutesToSeconds.d.ts","./node_modules/date-fns/monthsToQuarters.d.ts","./node_modules/date-fns/monthsToYears.d.ts","./node_modules/date-fns/nextDay.d.ts","./node_modules/date-fns/nextFriday.d.ts","./node_modules/date-fns/nextMonday.d.ts","./node_modules/date-fns/nextSaturday.d.ts","./node_modules/date-fns/nextSunday.d.ts","./node_modules/date-fns/nextThursday.d.ts","./node_modules/date-fns/nextTuesday.d.ts","./node_modules/date-fns/nextWednesday.d.ts","./node_modules/date-fns/parse/_lib/types.d.ts","./node_modules/date-fns/parse/_lib/Setter.d.ts","./node_modules/date-fns/parse/_lib/Parser.d.ts","./node_modules/date-fns/parse/_lib/parsers.d.ts","./node_modules/date-fns/parse.d.ts","./node_modules/date-fns/parseISO.d.ts","./node_modules/date-fns/parseJSON.d.ts","./node_modules/date-fns/previousDay.d.ts","./node_modules/date-fns/previousFriday.d.ts","./node_modules/date-fns/previousMonday.d.ts","./node_modules/date-fns/previousSaturday.d.ts","./node_modules/date-fns/previousSunday.d.ts","./node_modules/date-fns/previousThursday.d.ts","./node_modules/date-fns/previousTuesday.d.ts","./node_modules/date-fns/previousWednesday.d.ts","./node_modules/date-fns/quartersToMonths.d.ts","./node_modules/date-fns/quartersToYears.d.ts","./node_modules/date-fns/roundToNearestHours.d.ts","./node_modules/date-fns/roundToNearestMinutes.d.ts","./node_modules/date-fns/secondsToHours.d.ts","./node_modules/date-fns/secondsToMilliseconds.d.ts","./node_modules/date-fns/secondsToMinutes.d.ts","./node_modules/date-fns/set.d.ts","./node_modules/date-fns/setDate.d.ts","./node_modules/date-fns/setDay.d.ts","./node_modules/date-fns/setDayOfYear.d.ts","./node_modules/date-fns/setDefaultOptions.d.ts","./node_modules/date-fns/setHours.d.ts","./node_modules/date-fns/setISODay.d.ts","./node_modules/date-fns/setISOWeek.d.ts","./node_modules/date-fns/setISOWeekYear.d.ts","./node_modules/date-fns/setMilliseconds.d.ts","./node_modules/date-fns/setMinutes.d.ts","./node_modules/date-fns/setMonth.d.ts","./node_modules/date-fns/setQuarter.d.ts","./node_modules/date-fns/setSeconds.d.ts","./node_modules/date-fns/setWeek.d.ts","./node_modules/date-fns/setWeekYear.d.ts","./node_modules/date-fns/setYear.d.ts","./node_modules/date-fns/startOfDay.d.ts","./node_modules/date-fns/startOfDecade.d.ts","./node_modules/date-fns/startOfHour.d.ts","./node_modules/date-fns/startOfISOWeek.d.ts","./node_modules/date-fns/startOfISOWeekYear.d.ts","./node_modules/date-fns/startOfMinute.d.ts","./node_modules/date-fns/startOfMonth.d.ts","./node_modules/date-fns/startOfQuarter.d.ts","./node_modules/date-fns/startOfSecond.d.ts","./node_modules/date-fns/startOfToday.d.ts","./node_modules/date-fns/startOfTomorrow.d.ts","./node_modules/date-fns/startOfWeek.d.ts","./node_modules/date-fns/startOfWeekYear.d.ts","./node_modules/date-fns/startOfYear.d.ts","./node_modules/date-fns/startOfYesterday.d.ts","./node_modules/date-fns/sub.d.ts","./node_modules/date-fns/subBusinessDays.d.ts","./node_modules/date-fns/subDays.d.ts","./node_modules/date-fns/subHours.d.ts","./node_modules/date-fns/subISOWeekYears.d.ts","./node_modules/date-fns/subMilliseconds.d.ts","./node_modules/date-fns/subMinutes.d.ts","./node_modules/date-fns/subMonths.d.ts","./node_modules/date-fns/subQuarters.d.ts","./node_modules/date-fns/subSeconds.d.ts","./node_modules/date-fns/subWeeks.d.ts","./node_modules/date-fns/subYears.d.ts","./node_modules/date-fns/toDate.d.ts","./node_modules/date-fns/transpose.d.ts","./node_modules/date-fns/weeksToDays.d.ts","./node_modules/date-fns/yearsToDays.d.ts","./node_modules/date-fns/yearsToMonths.d.ts","./node_modules/date-fns/yearsToQuarters.d.ts","./node_modules/date-fns/index.d.ts","./src/lib/utils.ts","./src/components/ui/button.tsx","./node_modules/@radix-ui/react-context/dist/index.d.mts","./node_modules/@radix-ui/react-primitive/dist/index.d.mts","./node_modules/@radix-ui/react-dismissable-layer/dist/index.d.mts","./node_modules/@radix-ui/react-focus-scope/dist/index.d.mts","./node_modules/@radix-ui/react-portal/dist/index.d.mts","./node_modules/@radix-ui/react-dialog/dist/index.d.mts","./node_modules/lucide-react/dist/lucide-react.d.ts","./src/components/ui/sheet.tsx","./src/components/dashboard/sidebar-context.tsx","./src/components/dashboard/sidebar.tsx","./src/components/dashboard/layout.tsx","./src/components/dashboard/index.ts","./src/types/ad.ts","./src/components/ui/card.tsx","./node_modules/@radix-ui/react-avatar/dist/index.d.mts","./src/components/ui/avatar.tsx","./src/components/ui/badge.tsx","./src/features/dashboard/components/AdCard.tsx","./node_modules/@radix-ui/react-checkbox/dist/index.d.mts","./src/components/ui/checkbox.tsx","./src/features/dashboard/components/AdList.tsx","./src/features/dashboard/components/BulkActionToolbar.tsx","./src/features/dashboard/components/index.ts","./src/lib/api.ts","./src/lib/transformers.ts","./node_modules/next/dist/compiled/@next/font/dist/types.d.ts","./node_modules/next/dist/compiled/@next/font/dist/google/index.d.ts","./node_modules/next/font/google/index.d.ts","./src/app/layout.tsx","./src/app/page.tsx","./node_modules/@radix-ui/react-arrow/dist/index.d.mts","./node_modules/@radix-ui/rect/dist/index.d.mts","./node_modules/@radix-ui/react-popper/dist/index.d.mts","./node_modules/@radix-ui/react-select/dist/index.d.mts","./src/components/ui/select.tsx","./src/components/ui/pagination.tsx","./src/components/ui/view-toggle.tsx","./src/components/ui/input.tsx","./src/components/ui/datepicker.tsx","./node_modules/@radix-ui/react-slider/dist/index.d.mts","./src/components/ui/slider.tsx","./src/features/dashboard/components/AdFilters.tsx","./src/features/dashboard/components/AdSearch.tsx","./src/features/dashboard/components/ActiveFilterBadges.tsx","./src/app/ads/page.tsx","./src/components/ui/label.tsx","./src/app/ads/[id]/page.tsx","./src/components/ui/dialog.tsx","./node_modules/@radix-ui/react-roving-focus/dist/index.d.mts","./node_modules/@radix-ui/react-tabs/dist/index.d.mts","./src/components/ui/tabs.tsx","./src/components/ui/separator.tsx","./src/app/competitors/page.tsx","./src/components/ui/switch.tsx","./src/app/competitors/[id]/page.tsx","./src/app/tasks/page.tsx","./node_modules/@radix-ui/react-popover/dist/index.d.mts","./src/components/ui/popover.tsx","./node_modules/@types/estree/index.d.ts","./node_modules/@types/json-schema/index.d.ts","./node_modules/@types/json5/index.d.ts"],"fileIdsList":[[97,139,472,473],[97,139,472],[97,139],[83,97,139,749],[83,97,139,748,749],[83,97,139,265,748,749],[83,97,139],[83,97,139,748,749,750,751,752],[83,97,139,748,749,750,751,752,780],[83,97,139,748,749,778,779],[83,97,139,748,749,796],[97,136,139],[97,138,139],[139],[97,139,144,173],[97,139,140,145,151,152,159,170,181],[97,139,140,141,151,159],[92,93,94,97,139],[97,139,142,182],[97,139,143,144,152,160],[97,139,144,170,178],[97,139,145,147,151,159],[97,138,139,146],[97,139,147,148],[97,139,149,151],[97,138,139,151],[97,139,151,152,153,170,181],[97,139,151,152,153,166,170,173],[97,134,139],[97,139,147,151,154,159,170,181],[97,139,151,152,154,155,159,170,178,181],[97,139,154,156,170,178,181],[95,96,97,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187],[97,139,151,157],[97,139,158,181,186],[97,139,147,151,159,170],[97,139,160],[97,139,161],[97,138,139,162],[97,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187],[97,139,164],[97,139,165],[97,139,151,166,167],[97,139,166,168,182,184],[97,139,151,170,171,173],[97,139,172,173],[97,139,170,171],[97,139,173],[97,139,174],[97,136,139,170,175],[97,139,151,176,177],[97,139,176,177],[97,139,144,159,170,178],[97,139,179],[97,139,159,180],[97,139,154,165,181],[97,139,144,182],[97,139,170,183],[97,139,158,184],[97,139,185],[97,139,151,153,162,170,173,181,184,186],[97,139,170,187],[83,97,139,191,193],[83,87,97,139,189,190,191,192,416,464],[83,87,97,139,190,193,416,464],[83,87,97,139,189,193,416,464],[81,82,97,139],[97,139,483,484],[97,139,483],[97,139,491],[97,139,489,491],[97,139,489],[97,139,491,555,556],[97,139,491,558],[97,139,491,559],[97,139,576],[97,139,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744],[97,139,491,652],[97,139,491,556,676],[97,139,489,673,674],[97,139,491,673],[97,139,675],[97,139,488,489,490],[89,97,139],[97,139,420],[97,139,422,423,424,425],[97,139,427],[97,139,197,211,212,213,215,379],[97,139,197,201,203,204,205,206,207,368,379,381],[97,139,379],[97,139,212,231,348,357,375],[97,139,197],[97,139,194],[97,139,399],[97,139,379,381,398],[97,139,302,345,348,470],[97,139,312,327,357,374],[97,139,262],[97,139,362],[97,139,361,362,363],[97,139,361],[91,97,139,154,194,197,201,204,208,209,210,212,216,224,225,296,358,359,379,416],[97,139,197,214,251,299,379,395,396,470],[97,139,214,470],[97,139,225,299,300,379,470],[97,139,470],[97,139,197,214,215,470],[97,139,208,360,367],[97,139,165,265,375],[97,139,265,375],[83,97,139,265],[83,97,139,265,319],[97,139,242,260,375,453],[97,139,354,447,448,449,450,452],[97,139,265],[97,139,353],[97,139,353,354],[97,139,205,239,240,297],[97,139,241,242,297],[97,139,451],[97,139,242,297],[83,97,139,198,441],[83,97,139,181],[83,97,139,214,249],[83,97,139,214],[97,139,247,252],[83,97,139,248,419],[97,139,773],[83,87,97,139,154,188,189,190,193,416,462,463],[97,139,154],[97,139,154,201,231,267,286,297,364,365,379,380,470],[97,139,224,366],[97,139,416],[97,139,196],[83,97,139,302,316,326,336,338,374],[97,139,165,302,316,335,336,337,374],[97,139,329,330,331,332,333,334],[97,139,331],[97,139,335],[83,97,139,248,265,419],[83,97,139,265,417,419],[83,97,139,265,419],[97,139,286,371],[97,139,371],[97,139,154,380,419],[97,139,323],[97,138,139,322],[97,139,226,230,237,268,297,309,311,312,313,315,347,374,377,380],[97,139,314],[97,139,226,242,297,309],[97,139,312,374],[97,139,312,319,320,321,323,324,325,326,327,328,339,340,341,342,343,344,374,375,470],[97,139,307],[97,139,154,165,226,230,231,236,238,242,272,286,295,296,347,370,379,380,381,416,470],[97,139,374],[97,138,139,212,230,296,309,310,370,372,373,380],[97,139,312],[97,138,139,236,268,289,303,304,305,306,307,308,311,374,375],[97,139,154,289,290,303,380,381],[97,139,212,286,296,297,309,370,374,380],[97,139,154,379,381],[97,139,154,170,377,380,381],[97,139,154,165,181,194,201,214,226,230,231,237,238,243,267,268,269,271,272,275,276,278,281,282,283,284,285,297,369,370,375,377,379,380,381],[97,139,154,170],[97,139,197,198,199,209,377,378,416,419,470],[97,139,154,170,181,228,397,399,400,401,402,470],[97,139,165,181,194,228,231,268,269,276,286,294,297,370,375,377,382,383,389,395,412,413],[97,139,208,209,224,296,359,370,379],[97,139,154,181,198,201,268,377,379,387],[97,139,301],[97,139,154,409,410,411],[97,139,377,379],[97,139,309,310],[97,139,230,268,369,419],[97,139,154,165,276,286,377,383,389,391,395,412,415],[97,139,154,208,224,395,405],[97,139,197,243,369,379,407],[97,139,154,214,243,379,390,391,403,404,406,408],[91,97,139,226,229,230,416,419],[97,139,154,165,181,201,208,216,224,231,237,238,268,269,271,272,284,286,294,297,369,370,375,376,377,382,383,384,386,388,419],[97,139,154,170,208,377,389,409,414],[97,139,219,220,221,222,223],[97,139,275,277],[97,139,279],[97,139,277],[97,139,279,280],[97,139,154,201,236,380],[97,139,154,165,196,198,226,230,231,237,238,264,266,377,381,416,419],[97,139,154,165,181,200,205,268,376,380],[97,139,303],[97,139,304],[97,139,305],[97,139,375],[97,139,227,234],[97,139,154,201,227,237],[97,139,233,234],[97,139,235],[97,139,227,228],[97,139,227,244],[97,139,227],[97,139,274,275,376],[97,139,273],[97,139,228,375,376],[97,139,270,376],[97,139,228,375],[97,139,347],[97,139,229,232,237,268,297,302,309,316,318,346,377,380],[97,139,242,253,256,257,258,259,260,317],[97,139,356],[97,139,212,229,230,290,297,312,323,327,349,350,351,352,354,355,358,369,374,379],[97,139,242],[97,139,264],[97,139,154,229,237,245,261,263,267,377,416,419],[97,139,242,253,254,255,256,257,258,259,260,417],[97,139,228],[97,139,290,291,294,370],[97,139,154,275,379],[97,139,289,312],[97,139,288],[97,139,284,290],[97,139,287,289,379],[97,139,154,200,290,291,292,293,379,380],[83,97,139,239,241,297],[97,139,298],[83,97,139,198],[83,97,139,375],[83,91,97,139,230,238,416,419],[97,139,198,441,442],[83,97,139,252],[83,97,139,165,181,196,246,248,250,251,419],[97,139,214,375,380],[97,139,375,385],[83,97,139,152,154,165,196,252,299,416,417,418],[83,97,139,189,190,193,416,464],[83,84,85,86,87,97,139],[97,139,144],[97,139,392,393,394],[97,139,392],[83,87,97,139,154,156,165,188,189,190,191,193,194,196,272,335,381,415,419,464],[97,139,429],[97,139,431],[97,139,433],[97,139,774],[97,139,435],[97,139,437,438,439],[97,139,443],[88,90,97,139,421,426,428,430,432,434,436,440,444,446,455,456,458,468,469,470,471],[97,139,445],[97,139,454],[97,139,248],[97,139,457],[97,138,139,290,291,292,294,326,375,459,460,461,464,465,466,467],[97,139,188],[97,139,170,188],[97,139,477,478,479],[97,139,477],[97,139,478],[97,106,110,139,181],[97,106,139,170,181],[97,101,139],[97,103,106,139,178,181],[97,139,159,178],[97,101,139,188],[97,103,106,139,159,181],[97,98,99,102,105,139,151,170,181],[97,106,113,139],[97,98,104,139],[97,106,127,128,139],[97,102,106,139,173,181,188],[97,127,139,188],[97,100,101,139,188],[97,106,139],[97,100,101,102,103,104,105,106,107,108,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,130,131,132,133,139],[97,106,121,139],[97,106,113,114,139],[97,104,106,114,115,139],[97,105,139],[97,98,101,106,139],[97,106,110,114,115,139],[97,110,139],[97,104,106,109,139,181],[97,98,103,106,113,139],[97,139,170],[97,101,106,127,139,186,188],[83,97,139,475,746,747,759,760,761,763,764,771,772,782,785,793],[83,97,139,475,747,759,760,761,765,768,769,771,772,783,784,789,790,791],[83,97,139,475,747,758,761,764,771,782,785,793,795,798,799,801],[83,97,139,475,747,759,761,764,767,771,782,785,793,795,798,799],[97,139,472,775],[97,139,446,475,747,759,761],[83,97,139,475,747,758,761,764,771,795,798],[97,139,756,757,758],[83,97,139,446,475,746,747,756,757],[97,139,446,475,746,747,755,756],[83,97,139,746,762],[83,97,139,482,485,746],[83,97,139,746],[83,97,139,475,746,766],[83,97,139,475,746],[83,97,139,475,746,753],[97,139,475,747,782],[83,97,139,746,804],[83,97,139,475,746,781],[83,97,139,746,787],[83,97,139,746,797],[97,139,475,747],[83,97,139,475,746,764,771],[83,97,139,475,746,760,761,763,764],[83,97,139,475,747,755,771,782,785,786,788],[97,139,475,747,760,761,763,764,767],[83,97,139,475,746,747,785],[83,97,139,475,747,761,764],[97,139,765,768,769],[97,139,760,771],[97,139,475,486,487],[97,139,480]],"fileInfos":[{"version":"69684132aeb9b5642cbcd9e22dff7818ff0ee1aa831728af0ecf97d3364d5546","affectsGlobalScope":true,"impliedFormat":1},{"version":"45b7ab580deca34ae9729e97c13cfd999df04416a79116c3bfb483804f85ded4","impliedFormat":1},{"version":"3facaf05f0c5fc569c5649dd359892c98a85557e3e0c847964caeb67076f4d75","impliedFormat":1},{"version":"e44bb8bbac7f10ecc786703fe0a6a4b952189f908707980ba8f3c8975a760962","impliedFormat":1},{"version":"5e1c4c362065a6b95ff952c0eab010f04dcd2c3494e813b493ecfd4fcb9fc0d8","impliedFormat":1},{"version":"68d73b4a11549f9c0b7d352d10e91e5dca8faa3322bfb77b661839c42b1ddec7","impliedFormat":1},{"version":"5efce4fc3c29ea84e8928f97adec086e3dc876365e0982cc8479a07954a3efd4","impliedFormat":1},{"version":"feecb1be483ed332fad555aff858affd90a48ab19ba7272ee084704eb7167569","impliedFormat":1},{"version":"ee7bad0c15b58988daa84371e0b89d313b762ab83cb5b31b8a2d1162e8eb41c2","impliedFormat":1},{"version":"27bdc30a0e32783366a5abeda841bc22757c1797de8681bbe81fbc735eeb1c10","impliedFormat":1},{"version":"8fd575e12870e9944c7e1d62e1f5a73fcf23dd8d3a321f2a2c74c20d022283fe","impliedFormat":1},{"version":"8bf8b5e44e3c9c36f98e1007e8b7018c0f38d8adc07aecef42f5200114547c70","impliedFormat":1},{"version":"092c2bfe125ce69dbb1223c85d68d4d2397d7d8411867b5cc03cec902c233763","affectsGlobalScope":true,"impliedFormat":1},{"version":"07f073f19d67f74d732b1adea08e1dc66b1b58d77cb5b43931dee3d798a2fd53","affectsGlobalScope":true,"impliedFormat":1},{"version":"c57796738e7f83dbc4b8e65132f11a377649c00dd3eee333f672b8f0a6bea671","affectsGlobalScope":true,"impliedFormat":1},{"version":"dc2df20b1bcdc8c2d34af4926e2c3ab15ffe1160a63e58b7e09833f616efff44","affectsGlobalScope":true,"impliedFormat":1},{"version":"515d0b7b9bea2e31ea4ec968e9edd2c39d3eebf4a2d5cbd04e88639819ae3b71","affectsGlobalScope":true,"impliedFormat":1},{"version":"0559b1f683ac7505ae451f9a96ce4c3c92bdc71411651ca6ddb0e88baaaad6a3","affectsGlobalScope":true,"impliedFormat":1},{"version":"0dc1e7ceda9b8b9b455c3a2d67b0412feab00bd2f66656cd8850e8831b08b537","affectsGlobalScope":true,"impliedFormat":1},{"version":"ce691fb9e5c64efb9547083e4a34091bcbe5bdb41027e310ebba8f7d96a98671","affectsGlobalScope":true,"impliedFormat":1},{"version":"8d697a2a929a5fcb38b7a65594020fcef05ec1630804a33748829c5ff53640d0","affectsGlobalScope":true,"impliedFormat":1},{"version":"4ff2a353abf8a80ee399af572debb8faab2d33ad38c4b4474cff7f26e7653b8d","affectsGlobalScope":true,"impliedFormat":1},{"version":"936e80ad36a2ee83fc3caf008e7c4c5afe45b3cf3d5c24408f039c1d47bdc1df","affectsGlobalScope":true,"impliedFormat":1},{"version":"d15bea3d62cbbdb9797079416b8ac375ae99162a7fba5de2c6c505446486ac0a","affectsGlobalScope":true,"impliedFormat":1},{"version":"68d18b664c9d32a7336a70235958b8997ebc1c3b8505f4f1ae2b7e7753b87618","affectsGlobalScope":true,"impliedFormat":1},{"version":"eb3d66c8327153d8fa7dd03f9c58d351107fe824c79e9b56b462935176cdf12a","affectsGlobalScope":true,"impliedFormat":1},{"version":"38f0219c9e23c915ef9790ab1d680440d95419ad264816fa15009a8851e79119","affectsGlobalScope":true,"impliedFormat":1},{"version":"69ab18c3b76cd9b1be3d188eaf8bba06112ebbe2f47f6c322b5105a6fbc45a2e","affectsGlobalScope":true,"impliedFormat":1},{"version":"fef8cfad2e2dc5f5b3d97a6f4f2e92848eb1b88e897bb7318cef0e2820bceaab","affectsGlobalScope":true,"impliedFormat":1},{"version":"2f11ff796926e0832f9ae148008138ad583bd181899ab7dd768a2666700b1893","affectsGlobalScope":true,"impliedFormat":1},{"version":"4de680d5bb41c17f7f68e0419412ca23c98d5749dcaaea1896172f06435891fc","affectsGlobalScope":true,"impliedFormat":1},{"version":"954296b30da6d508a104a3a0b5d96b76495c709785c1d11610908e63481ee667","affectsGlobalScope":true,"impliedFormat":1},{"version":"ac9538681b19688c8eae65811b329d3744af679e0bdfa5d842d0e32524c73e1c","affectsGlobalScope":true,"impliedFormat":1},{"version":"0a969edff4bd52585473d24995c5ef223f6652d6ef46193309b3921d65dd4376","affectsGlobalScope":true,"impliedFormat":1},{"version":"9e9fbd7030c440b33d021da145d3232984c8bb7916f277e8ffd3dc2e3eae2bdb","affectsGlobalScope":true,"impliedFormat":1},{"version":"811ec78f7fefcabbda4bfa93b3eb67d9ae166ef95f9bff989d964061cbf81a0c","affectsGlobalScope":true,"impliedFormat":1},{"version":"717937616a17072082152a2ef351cb51f98802fb4b2fdabd32399843875974ca","affectsGlobalScope":true,"impliedFormat":1},{"version":"d7e7d9b7b50e5f22c915b525acc5a49a7a6584cf8f62d0569e557c5cfc4b2ac2","affectsGlobalScope":true,"impliedFormat":1},{"version":"71c37f4c9543f31dfced6c7840e068c5a5aacb7b89111a4364b1d5276b852557","affectsGlobalScope":true,"impliedFormat":1},{"version":"576711e016cf4f1804676043e6a0a5414252560eb57de9faceee34d79798c850","affectsGlobalScope":true,"impliedFormat":1},{"version":"89c1b1281ba7b8a96efc676b11b264de7a8374c5ea1e6617f11880a13fc56dc6","affectsGlobalScope":true,"impliedFormat":1},{"version":"74f7fa2d027d5b33eb0471c8e82a6c87216223181ec31247c357a3e8e2fddc5b","affectsGlobalScope":true,"impliedFormat":1},{"version":"d6d7ae4d1f1f3772e2a3cde568ed08991a8ae34a080ff1151af28b7f798e22ca","affectsGlobalScope":true,"impliedFormat":1},{"version":"063600664504610fe3e99b717a1223f8b1900087fab0b4cad1496a114744f8df","affectsGlobalScope":true,"impliedFormat":1},{"version":"934019d7e3c81950f9a8426d093458b65d5aff2c7c1511233c0fd5b941e608ab","affectsGlobalScope":true,"impliedFormat":1},{"version":"52ada8e0b6e0482b728070b7639ee42e83a9b1c22d205992756fe020fd9f4a47","affectsGlobalScope":true,"impliedFormat":1},{"version":"3bdefe1bfd4d6dee0e26f928f93ccc128f1b64d5d501ff4a8cf3c6371200e5e6","affectsGlobalScope":true,"impliedFormat":1},{"version":"59fb2c069260b4ba00b5643b907ef5d5341b167e7d1dbf58dfd895658bda2867","affectsGlobalScope":true,"impliedFormat":1},{"version":"639e512c0dfc3fad96a84caad71b8834d66329a1f28dc95e3946c9b58176c73a","affectsGlobalScope":true,"impliedFormat":1},{"version":"368af93f74c9c932edd84c58883e736c9e3d53cec1fe24c0b0ff451f529ceab1","affectsGlobalScope":true,"impliedFormat":1},{"version":"af3dd424cf267428f30ccfc376f47a2c0114546b55c44d8c0f1d57d841e28d74","affectsGlobalScope":true,"impliedFormat":1},{"version":"995c005ab91a498455ea8dfb63aa9f83fa2ea793c3d8aa344be4a1678d06d399","affectsGlobalScope":true,"impliedFormat":1},{"version":"959d36cddf5e7d572a65045b876f2956c973a586da58e5d26cde519184fd9b8a","affectsGlobalScope":true,"impliedFormat":1},{"version":"965f36eae237dd74e6cca203a43e9ca801ce38824ead814728a2807b1910117d","affectsGlobalScope":true,"impliedFormat":1},{"version":"3925a6c820dcb1a06506c90b1577db1fdbf7705d65b62b99dce4be75c637e26b","affectsGlobalScope":true,"impliedFormat":1},{"version":"0a3d63ef2b853447ec4f749d3f368ce642264246e02911fcb1590d8c161b8005","affectsGlobalScope":true,"impliedFormat":1},{"version":"b5ce7a470bc3628408429040c4e3a53a27755022a32fd05e2cb694e7015386c7","affectsGlobalScope":true,"impliedFormat":1},{"version":"8444af78980e3b20b49324f4a16ba35024fef3ee069a0eb67616ea6ca821c47a","affectsGlobalScope":true,"impliedFormat":1},{"version":"3287d9d085fbd618c3971944b65b4be57859f5415f495b33a6adc994edd2f004","affectsGlobalScope":true,"impliedFormat":1},{"version":"b4b67b1a91182421f5df999988c690f14d813b9850b40acd06ed44691f6727ad","affectsGlobalScope":true,"impliedFormat":1},{"version":"df83c2a6c73228b625b0beb6669c7ee2a09c914637e2d35170723ad49c0f5cd4","affectsGlobalScope":true,"impliedFormat":1},{"version":"436aaf437562f276ec2ddbee2f2cdedac7664c1e4c1d2c36839ddd582eeb3d0a","affectsGlobalScope":true,"impliedFormat":1},{"version":"8e3c06ea092138bf9fa5e874a1fdbc9d54805d074bee1de31b99a11e2fec239d","affectsGlobalScope":true,"impliedFormat":1},{"version":"87dc0f382502f5bbce5129bdc0aea21e19a3abbc19259e0b43ae038a9fc4e326","affectsGlobalScope":true,"impliedFormat":1},{"version":"b1cb28af0c891c8c96b2d6b7be76bd394fddcfdb4709a20ba05a7c1605eea0f9","affectsGlobalScope":true,"impliedFormat":1},{"version":"2fef54945a13095fdb9b84f705f2b5994597640c46afeb2ce78352fab4cb3279","affectsGlobalScope":true,"impliedFormat":1},{"version":"ac77cb3e8c6d3565793eb90a8373ee8033146315a3dbead3bde8db5eaf5e5ec6","affectsGlobalScope":true,"impliedFormat":1},{"version":"56e4ed5aab5f5920980066a9409bfaf53e6d21d3f8d020c17e4de584d29600ad","affectsGlobalScope":true,"impliedFormat":1},{"version":"4ece9f17b3866cc077099c73f4983bddbcb1dc7ddb943227f1ec070f529dedd1","affectsGlobalScope":true,"impliedFormat":1},{"version":"0a6282c8827e4b9a95f4bf4f5c205673ada31b982f50572d27103df8ceb8013c","affectsGlobalScope":true,"impliedFormat":1},{"version":"1c9319a09485199c1f7b0498f2988d6d2249793ef67edda49d1e584746be9032","affectsGlobalScope":true,"impliedFormat":1},{"version":"e3a2a0cee0f03ffdde24d89660eba2685bfbdeae955a6c67e8c4c9fd28928eeb","affectsGlobalScope":true,"impliedFormat":1},{"version":"811c71eee4aa0ac5f7adf713323a5c41b0cf6c4e17367a34fbce379e12bbf0a4","affectsGlobalScope":true,"impliedFormat":1},{"version":"51ad4c928303041605b4d7ae32e0c1ee387d43a24cd6f1ebf4a2699e1076d4fa","affectsGlobalScope":true,"impliedFormat":1},{"version":"60037901da1a425516449b9a20073aa03386cce92f7a1fd902d7602be3a7c2e9","affectsGlobalScope":true,"impliedFormat":1},{"version":"d4b1d2c51d058fc21ec2629fff7a76249dec2e36e12960ea056e3ef89174080f","affectsGlobalScope":true,"impliedFormat":1},{"version":"22adec94ef7047a6c9d1af3cb96be87a335908bf9ef386ae9fd50eeb37f44c47","affectsGlobalScope":true,"impliedFormat":1},{"version":"4245fee526a7d1754529d19227ecbf3be066ff79ebb6a380d78e41648f2f224d","affectsGlobalScope":true,"impliedFormat":1},{"version":"8e7f8264d0fb4c5339605a15daadb037bf238c10b654bb3eee14208f860a32ea","affectsGlobalScope":true,"impliedFormat":1},{"version":"782dec38049b92d4e85c1585fbea5474a219c6984a35b004963b00beb1aab538","affectsGlobalScope":true,"impliedFormat":1},{"version":"170d4db14678c68178ee8a3d5a990d5afb759ecb6ec44dbd885c50f6da6204f6","affectsGlobalScope":true,"impliedFormat":1},{"version":"8a8eb4ebffd85e589a1cc7c178e291626c359543403d58c9cd22b81fab5b1fb9","impliedFormat":1},{"version":"d4d7d3f832882a4b2d611a7eaaa80c780c3342b5732090130fa9af4a40bd051e","impliedFormat":1},{"version":"acd8fd5090ac73902278889c38336ff3f48af6ba03aa665eb34a75e7ba1dccc4","impliedFormat":1},{"version":"d6258883868fb2680d2ca96bc8b1352cab69874581493e6d52680c5ffecdb6cc","impliedFormat":1},{"version":"1b61d259de5350f8b1e5db06290d31eaebebc6baafd5f79d314b5af9256d7153","impliedFormat":1},{"version":"f258e3960f324a956fc76a3d3d9e964fff2244ff5859dcc6ce5951e5413ca826","impliedFormat":1},{"version":"643f7232d07bf75e15bd8f658f664d6183a0efaca5eb84b48201c7671a266979","impliedFormat":1},{"version":"0f6666b58e9276ac3a38fdc80993d19208442d6027ab885580d93aec76b4ef00","impliedFormat":1},{"version":"05fd364b8ef02fb1e174fbac8b825bdb1e5a36a016997c8e421f5fab0a6da0a0","impliedFormat":1},{"version":"631eff75b0e35d1b1b31081d55209abc43e16b49426546ab5a9b40bdd40b1f60","impliedFormat":1},{"version":"70521b6ab0dcba37539e5303104f29b721bfb2940b2776da4cc818c07e1fefc1","affectsGlobalScope":true,"impliedFormat":1},{"version":"ab41ef1f2cdafb8df48be20cd969d875602483859dc194e9c97c8a576892c052","affectsGlobalScope":true,"impliedFormat":1},{"version":"d153a11543fd884b596587ccd97aebbeed950b26933ee000f94009f1ab142848","affectsGlobalScope":true,"impliedFormat":1},{"version":"21d819c173c0cf7cc3ce57c3276e77fd9a8a01d35a06ad87158781515c9a438a","impliedFormat":1},{"version":"a79e62f1e20467e11a904399b8b18b18c0c6eea6b50c1168bf215356d5bebfaf","affectsGlobalScope":true,"impliedFormat":1},{"version":"49a5a44f2e68241a1d2bd9ec894535797998841c09729e506a7cbfcaa40f2180","affectsGlobalScope":true,"impliedFormat":1},{"version":"5929864ce17fba74232584d90cb721a89b7ad277220627cc97054ba15a98ea8f","impliedFormat":1},{"version":"763fe0f42b3d79b440a9b6e51e9ba3f3f91352469c1e4b3b67bfa4ff6352f3f4","impliedFormat":1},{"version":"25c8056edf4314820382a5fdb4bb7816999acdcb929c8f75e3f39473b87e85bc","impliedFormat":1},{"version":"c464d66b20788266e5353b48dc4aa6bc0dc4a707276df1e7152ab0c9ae21fad8","impliedFormat":1},{"version":"78d0d27c130d35c60b5e5566c9f1e5be77caf39804636bc1a40133919a949f21","impliedFormat":1},{"version":"c6fd2c5a395f2432786c9cb8deb870b9b0e8ff7e22c029954fabdd692bff6195","impliedFormat":1},{"version":"1d6e127068ea8e104a912e42fc0a110e2aa5a66a356a917a163e8cf9a65e4a75","impliedFormat":1},{"version":"5ded6427296cdf3b9542de4471d2aa8d3983671d4cac0f4bf9c637208d1ced43","impliedFormat":1},{"version":"7f182617db458e98fc18dfb272d40aa2fff3a353c44a89b2c0ccb3937709bfb5","impliedFormat":1},{"version":"cadc8aced301244057c4e7e73fbcae534b0f5b12a37b150d80e5a45aa4bebcbd","impliedFormat":1},{"version":"385aab901643aa54e1c36f5ef3107913b10d1b5bb8cbcd933d4263b80a0d7f20","impliedFormat":1},{"version":"9670d44354bab9d9982eca21945686b5c24a3f893db73c0dae0fd74217a4c219","impliedFormat":1},{"version":"0b8a9268adaf4da35e7fa830c8981cfa22adbbe5b3f6f5ab91f6658899e657a7","impliedFormat":1},{"version":"11396ed8a44c02ab9798b7dca436009f866e8dae3c9c25e8c1fbc396880bf1bb","impliedFormat":1},{"version":"ba7bc87d01492633cb5a0e5da8a4a42a1c86270e7b3d2dea5d156828a84e4882","impliedFormat":1},{"version":"4893a895ea92c85345017a04ed427cbd6a1710453338df26881a6019432febdd","impliedFormat":1},{"version":"c21dc52e277bcfc75fac0436ccb75c204f9e1b3fa5e12729670910639f27343e","impliedFormat":1},{"version":"13f6f39e12b1518c6650bbb220c8985999020fe0f21d818e28f512b7771d00f9","impliedFormat":1},{"version":"9b5369969f6e7175740bf51223112ff209f94ba43ecd3bb09eefff9fd675624a","impliedFormat":1},{"version":"4fe9e626e7164748e8769bbf74b538e09607f07ed17c2f20af8d680ee49fc1da","impliedFormat":1},{"version":"24515859bc0b836719105bb6cc3d68255042a9f02a6022b3187948b204946bd2","impliedFormat":1},{"version":"ea0148f897b45a76544ae179784c95af1bd6721b8610af9ffa467a518a086a43","impliedFormat":1},{"version":"24c6a117721e606c9984335f71711877293a9651e44f59f3d21c1ea0856f9cc9","impliedFormat":1},{"version":"dd3273ead9fbde62a72949c97dbec2247ea08e0c6952e701a483d74ef92d6a17","impliedFormat":1},{"version":"405822be75ad3e4d162e07439bac80c6bcc6dbae1929e179cf467ec0b9ee4e2e","impliedFormat":1},{"version":"0db18c6e78ea846316c012478888f33c11ffadab9efd1cc8bcc12daded7a60b6","impliedFormat":1},{"version":"e61be3f894b41b7baa1fbd6a66893f2579bfad01d208b4ff61daef21493ef0a8","impliedFormat":1},{"version":"bd0532fd6556073727d28da0edfd1736417a3f9f394877b6d5ef6ad88fba1d1a","impliedFormat":1},{"version":"89167d696a849fce5ca508032aabfe901c0868f833a8625d5a9c6e861ef935d2","impliedFormat":1},{"version":"615ba88d0128ed16bf83ef8ccbb6aff05c3ee2db1cc0f89ab50a4939bfc1943f","impliedFormat":1},{"version":"a4d551dbf8746780194d550c88f26cf937caf8d56f102969a110cfaed4b06656","impliedFormat":1},{"version":"8bd86b8e8f6a6aa6c49b71e14c4ffe1211a0e97c80f08d2c8cc98838006e4b88","impliedFormat":1},{"version":"317e63deeb21ac07f3992f5b50cdca8338f10acd4fbb7257ebf56735bf52ab00","impliedFormat":1},{"version":"4732aec92b20fb28c5fe9ad99521fb59974289ed1e45aecb282616202184064f","impliedFormat":1},{"version":"2e85db9e6fd73cfa3d7f28e0ab6b55417ea18931423bd47b409a96e4a169e8e6","impliedFormat":1},{"version":"c46e079fe54c76f95c67fb89081b3e399da2c7d109e7dca8e4b58d83e332e605","impliedFormat":1},{"version":"bf67d53d168abc1298888693338cb82854bdb2e69ef83f8a0092093c2d562107","impliedFormat":1},{"version":"1ca84b44ad1d8e4576f24904d8b95dd23b94ea67e1575f89614ac90062fc67f4","affectsGlobalScope":true,"impliedFormat":1},{"version":"6d586db0a09a9495ebb5dece28f54df9684bfbd6e1f568426ca153126dac4a40","impliedFormat":1},{"version":"7394959e5a741b185456e1ef5d64599c36c60a323207450991e7a42e08911419","impliedFormat":1},{"version":"8c0bcd6c6b67b4b503c11e91a1fb91522ed585900eab2ab1f61bba7d7caa9d6f","impliedFormat":1},{"version":"6c09ec7dab82153ee79c7fcc302c3510d287b86b157b76ccbb5d646233373af4","affectsGlobalScope":true,"impliedFormat":1},{"version":"f3e58c4c18a031cbb17abec7a4ad0bd5ae9fc70c1f4ba1e7fb921ad87c504aca","impliedFormat":1},{"version":"84c1930e33d1bb12ad01bcbe11d656f9646bd21b2fb2afd96e8e10615a021aef","impliedFormat":1},{"version":"35ec8b6760fd7138bbf5809b84551e31028fb2ba7b6dc91d95d098bf212ca8b4","affectsGlobalScope":true,"impliedFormat":1},{"version":"5524481e56c48ff486f42926778c0a3cce1cc85dc46683b92b1271865bcf015a","impliedFormat":1},{"version":"4b87f767c7bc841511113c876a6b8bf1fd0cb0b718c888ad84478b372ec486b1","affectsGlobalScope":true,"impliedFormat":1},{"version":"8d04e3640dd9eb67f7f1e5bd3d0bf96c784666f7aefc8ac1537af6f2d38d4c29","impliedFormat":1},{"version":"9d19808c8c291a9010a6c788e8532a2da70f811adb431c97520803e0ec649991","impliedFormat":1},{"version":"5a369483ac4cfbdf0331c248deeb36140e6907db5e1daed241546b4a2055f82c","impliedFormat":1},{"version":"e8f5b5cc36615c17d330eaf8eebbc0d6bdd942c25991f96ef122f246f4ff722f","impliedFormat":1},{"version":"f0bd7e6d931657b59605c44112eaf8b980ba7f957a5051ed21cb93d978cf2f45","impliedFormat":1},{"version":"71450bbc2d82821d24ca05699a533e72758964e9852062c53b30f31c36978ab8","affectsGlobalScope":true,"impliedFormat":1},{"version":"0ada07543808f3b967624645a8e1ccd446f8b01ade47842acf1328aec899fed0","affectsGlobalScope":true,"impliedFormat":1},{"version":"4c21aaa8257d7950a5b75a251d9075b6a371208fc948c9c8402f6690ef3b5b55","impliedFormat":1},{"version":"b5895e6353a5d708f55d8685c38a235c3a6d8138e374dee8ceb8ffde5aa8002a","impliedFormat":1},{"version":"b76cc102b903161a152821ed3e09c2a32d678b2a1d196dabc15cfb92c53a4fd0","impliedFormat":1},{"version":"de735eca2c51dd8b860254e9fdb6d9ec19fe402dfe597c23090841ce3937cfc5","impliedFormat":1},{"version":"4ff41188773cbf465807dd2f7059c7494cbee5115608efc297383832a1150c43","impliedFormat":1},{"version":"5650cf3dace09e7c25d384e3e6b818b938f68f4e8de96f52d9c5a1b3db068e86","impliedFormat":1},{"version":"1354ca5c38bd3fd3836a68e0f7c9f91f172582ba30ab15bb8c075891b91502b7","affectsGlobalScope":true,"impliedFormat":1},{"version":"5155da3047ef977944d791a2188ff6e6c225f6975cc1910ab7bb6838ab84cede","impliedFormat":1},{"version":"93f437e1398a4f06a984f441f7fa7a9f0535c04399619b5c22e0b87bdee182cb","impliedFormat":1},{"version":"afbe24ab0d74694372baa632ecb28bb375be53f3be53f9b07ecd7fc994907de5","impliedFormat":1},{"version":"e16d218a30f6a6810b57f7e968124eaa08c7bb366133ea34bbf01e7cd6b8c0ad","affectsGlobalScope":true,"impliedFormat":1},{"version":"eb8692dea24c27821f77e397272d9ed2eda0b95e4a75beb0fdda31081d15a8ae","affectsGlobalScope":true,"impliedFormat":1},{"version":"9e043a1bc8fbf2a255bccf9bf27e0f1caf916c3b0518ea34aa72357c0afd42ec","impliedFormat":1},{"version":"b4f70ec656a11d570e1a9edce07d118cd58d9760239e2ece99306ee9dfe61d02","impliedFormat":1},{"version":"3bc2f1e2c95c04048212c569ed38e338873f6a8593930cf5a7ef24ffb38fc3b6","impliedFormat":1},{"version":"8145e07aad6da5f23f2fcd8c8e4c5c13fb26ee986a79d03b0829b8fce152d8b2","impliedFormat":1},{"version":"f9d9d753d430ed050dc1bf2667a1bab711ccbb1c1507183d794cc195a5b085cc","impliedFormat":1},{"version":"9eece5e586312581ccd106d4853e861aaaa1a39f8e3ea672b8c3847eedd12f6e","impliedFormat":1},{"version":"5b6844ad931dcc1d3aca53268f4bd671428421464b1286746027aede398094f2","impliedFormat":1},{"version":"37ba7b45141a45ce6e80e66f2a96c8a5ab1bcef0fc2d0f56bb58df96ec67e972","impliedFormat":1},{"version":"125d792ec6c0c0f657d758055c494301cc5fdb327d9d9d5960b3f129aff76093","impliedFormat":1},{"version":"0dbcebe2126d03936c70545e96a6e41007cf065be38a1ce4d32a39fcedefead4","affectsGlobalScope":true,"impliedFormat":1},{"version":"1851a3b4db78664f83901bb9cac9e45e03a37bb5933cc5bf37e10bb7e91ab4eb","impliedFormat":1},{"version":"461e54289e6287e8494a0178ba18182acce51a02bca8dea219149bf2cf96f105","impliedFormat":1},{"version":"12ed4559eba17cd977aa0db658d25c4047067444b51acfdcbf38470630642b23","affectsGlobalScope":true,"impliedFormat":1},{"version":"f3ffabc95802521e1e4bcba4c88d8615176dc6e09111d920c7a213bdda6e1d65","impliedFormat":1},{"version":"e31e51c55800014d926e3f74208af49cb7352803619855c89296074d1ecbb524","impliedFormat":1},{"version":"ae56f65caf3be91108707bd8dfbccc2a57a91feb5daabf7165a06a945545ed26","impliedFormat":1},{"version":"a136d5de521da20f31631a0a96bf712370779d1c05b7015d7019a9b2a0446ca9","impliedFormat":1},{"version":"dfb96ba5177b68003deec9e773c47257da5c4c8a74053d8956389d832df72002","affectsGlobalScope":true,"impliedFormat":1},{"version":"92d3070580cf72b4bb80959b7f16ede9a3f39e6f4ef2ac87cfa4561844fdc69f","affectsGlobalScope":true,"impliedFormat":1},{"version":"d3dffd70e6375b872f0b4e152de4ae682d762c61a24881ecc5eb9f04c5caf76f","impliedFormat":1},{"version":"613deebaec53731ff6b74fe1a89f094b708033db6396b601df3e6d5ab0ec0a47","impliedFormat":1},{"version":"d91a7d8b5655c42986f1bdfe2105c4408f472831c8f20cf11a8c3345b6b56c8c","impliedFormat":1},{"version":"e56eb632f0281c9f8210eb8c86cc4839a427a4ffffcfd2a5e40b956050b3e042","affectsGlobalScope":true,"impliedFormat":1},{"version":"e8a979b8af001c9fc2e774e7809d233c8ca955a28756f52ee5dee88ccb0611d2","impliedFormat":1},{"version":"cac793cc47c29e26e4ac3601dcb00b4435ebed26203485790e44f2ad8b6ad847","impliedFormat":1},{"version":"865a2612f5ec073dd48d454307ccabb04c48f8b96fda9940c5ebfe6b4b451f51","impliedFormat":1},{"version":"de9b09c703c51ac4bf93e37774cfc1c91e4ff17a5a0e9127299be49a90c5dc63","impliedFormat":1},{"version":"a0acca63c9e39580f32a10945df231815f0fe554c074da96ba6564010ffbd2d8","impliedFormat":1},{"version":"1be330b3a0b00590633f04c3b35db7fa618c9ee079258e2b24c137eb4ffcd728","impliedFormat":1},{"version":"0a5ab5c020557d3ccc84b92c0ca55ff790e886d92662aae668020d6320ab1867","impliedFormat":1},{"version":"413df52d4ea14472c2fa5bee62f7a40abd1eb49be0b9722ee01ee4e52e63beb2","impliedFormat":1},{"version":"db6d2d9daad8a6d83f281af12ce4355a20b9a3e71b82b9f57cddcca0a8964a96","impliedFormat":1},{"version":"7bd32a723a12f78ed756747468f2030bdd55774c68f628de07598dba5b912b14","impliedFormat":1},{"version":"24f8562308dd8ba6013120557fa7b44950b619610b2c6cb8784c79f11e3c4f90","impliedFormat":1},{"version":"a1d3d6e9718cceaf1e4352845387af0620564d3d2dff02611a5c3276f73c26cb","impliedFormat":1},{"version":"a86f82d646a739041d6702101afa82dcb935c416dd93cbca7fd754fd0282ce1f","impliedFormat":1},{"version":"57d6ac03382e30e9213641ff4f18cf9402bb246b77c13c8e848c0b1ca2b7ef92","impliedFormat":1},{"version":"ce75b1aebb33d510ff28af960a9221410a3eaf7f18fc5f21f9404075fba77256","impliedFormat":1},{"version":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","impliedFormat":1},{"version":"57e47d02e88abef89d214cdf52b478104dc17997015746e288cbb580beaef266","impliedFormat":1},{"version":"b1177acd771acfcc2648a03fc03ad3b3a1b1d2bdfa6769db0f669293b596ca13","impliedFormat":1},{"version":"3494c5bf00c1a40293ee5ff5128334b63d346abbf560c8987202c92dbc5bdc48","impliedFormat":1},{"version":"9e2739b32f741859263fdba0244c194ca8e96da49b430377930b8f721d77c000","impliedFormat":1},{"version":"99d62b942e98f691f508fc752637fec27661970aa3b0f5eb5a1e2775b995c273","impliedFormat":1},{"version":"a9af0e608929aaf9ce96bd7a7b99c9360636c31d73670e4af09a09950df97841","impliedFormat":1},{"version":"48d37b90a04e753a925228f50304d02c4f95d57bf682f8bb688621c3cd9d32ec","impliedFormat":1},{"version":"361e2b13c6765d7f85bb7600b48fde782b90c7c41105b7dab1f6e7871071ba20","impliedFormat":1},{"version":"c86fe861cf1b4c46a0fb7d74dffe596cf679a2e5e8b1456881313170f092e3fa","impliedFormat":1},{"version":"b6db56e4903e9c32e533b78ac85522de734b3d3a8541bf24d256058d464bf04b","impliedFormat":1},{"version":"24daa0366f837d22c94a5c0bad5bf1fd0f6b29e1fae92dc47c3072c3fdb2fbd5","impliedFormat":1},{"version":"b68c4ed987ef5693d3dccd85222d60769463aca404f2ffca1c4c42781dce388e","impliedFormat":1},{"version":"889c00f3d32091841268f0b994beba4dceaa5df7573be12c2c829d7c5fbc232c","impliedFormat":1},{"version":"65f43099ded6073336e697512d9b80f2d4fec3182b7b2316abf712e84104db00","impliedFormat":1},{"version":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","impliedFormat":1},{"version":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","impliedFormat":1},{"version":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881","impliedFormat":1},{"version":"12b8dfed70961bea1861e5d39e433580e71323abb5d33da6605182ec569db584","impliedFormat":1},{"version":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881","impliedFormat":1},{"version":"7e560f533aaf88cf9d3b427dcf6c112dd3f2ee26d610e2587583b6c354c753db","impliedFormat":1},{"version":"71e0082342008e4dfb43202df85ea0986ef8e003c921a1e49999d0234a3019da","impliedFormat":1},{"version":"27ab780875bcbb65e09da7496f2ca36288b0c541abaa75c311450a077d54ec15","impliedFormat":1},{"version":"b620391fe8060cf9bedc176a4d01366e6574d7a71e0ac0ab344a4e76576fcbb8","impliedFormat":1},{"version":"380647d8f3b7f852cca6d154a376dbf8ac620a2f12b936594504a8a852e71d2f","impliedFormat":1},{"version":"3e7efde639c6a6c3edb9847b3f61e308bf7a69685b92f665048c45132f51c218","impliedFormat":1},{"version":"df45ca1176e6ac211eae7ddf51336dc075c5314bc5c253651bae639defd5eec5","impliedFormat":1},{"version":"ef61792acbfa8c27c9bd113f02731e66229f7d3a169e3c1993b508134f1a58e0","impliedFormat":1},{"version":"9c82171d836c47486074e4ca8e059735bf97b205e70b196535b5efd40cbe1bc5","impliedFormat":1},{"version":"94fe3281392e1015b22f39535878610b4fa6f1388dc8d78746be3bc4e4bb8950","impliedFormat":1},{"version":"106c6025f1d99fd468fd8bf6e5bda724e11e5905a4076c5d29790b6c3745e50c","impliedFormat":1},{"version":"ce41407ff95aad31e28897741dfffb236d966eb38894f7a791c3a575b53f9d02","impliedFormat":1},{"version":"fac1803c07fbc9574815fdb83afddd9d0d4a2ce13f56d4e4cbb4525f8c09ee0a","impliedFormat":1},{"version":"824c76aec8d8c7e65769688cbee102238c0ef421ed6686f41b2a7d8e7e78a931","impliedFormat":1},{"version":"5eef43ef86c9c3945780211c2ce25cb9b66143a102713e56a2bea85163c5c3c7","impliedFormat":1},{"version":"a2a1cdf7273ad6641938a487ecf2fdd38f60abce41907817e44ab39e482e8739","impliedFormat":1},{"version":"c5426dbfc1cf90532f66965a7aa8c1136a78d4d0f96d8180ecbfc11d7722f1a5","impliedFormat":1},{"version":"ca921bf56756cb6fe957f6af693a35251b134fb932dc13f3dfff0bb7106f80b4","impliedFormat":1},{"version":"fee92c97f1aa59eb7098a0cc34ff4df7e6b11bae71526aca84359a2575f313d8","impliedFormat":1},{"version":"4da246ee3b860278888dd51913e6407a09ca43530db886e7bec2a592c9b9bde6","impliedFormat":1},{"version":"8c05ac9ead787bfc3e144b88bdc7d1ad8c0c7f1cd8412ab58cd3e1208d1990af","impliedFormat":1},{"version":"a23185bc5ef590c287c28a91baf280367b50ae4ea40327366ad01f6f4a8edbc5","impliedFormat":1},{"version":"65a15fc47900787c0bd18b603afb98d33ede930bed1798fc984d5ebb78b26cf9","impliedFormat":1},{"version":"9d202701f6e0744adb6314d03d2eb8fc994798fc83d91b691b75b07626a69801","impliedFormat":1},{"version":"de9d2df7663e64e3a91bf495f315a7577e23ba088f2949d5ce9ec96f44fba37d","impliedFormat":1},{"version":"c7af78a2ea7cb1cd009cfb5bdb48cd0b03dad3b54f6da7aab615c2e9e9d570c5","impliedFormat":1},{"version":"1ee45496b5f8bdee6f7abc233355898e5bf9bd51255db65f5ff7ede617ca0027","impliedFormat":1},{"version":"0c7c947ff881c4274c0800deaa0086971e0bfe51f89a33bd3048eaa3792d4876","affectsGlobalScope":true,"impliedFormat":1},{"version":"db01d18853469bcb5601b9fc9826931cc84cc1a1944b33cad76fd6f1e3d8c544","affectsGlobalScope":true,"impliedFormat":1},{"version":"dba114fb6a32b355a9cfc26ca2276834d72fe0e94cd2c3494005547025015369","impliedFormat":1},{"version":"a8f8e6ab2fa07b45251f403548b78eaf2022f3c2254df3dc186cb2671fe4996d","affectsGlobalScope":true,"impliedFormat":1},{"version":"fa6c12a7c0f6b84d512f200690bfc74819e99efae69e4c95c4cd30f6884c526e","impliedFormat":1},{"version":"f1c32f9ce9c497da4dc215c3bc84b722ea02497d35f9134db3bb40a8d918b92b","impliedFormat":1},{"version":"b73c319af2cc3ef8f6421308a250f328836531ea3761823b4cabbd133047aefa","affectsGlobalScope":true,"impliedFormat":1},{"version":"e433b0337b8106909e7953015e8fa3f2d30797cea27141d1c5b135365bb975a6","impliedFormat":1},{"version":"15b36126e0089bfef173ab61329e8286ce74af5e809d8a72edcafd0cc049057f","impliedFormat":1},{"version":"ddff7fc6edbdc5163a09e22bf8df7bef75f75369ebd7ecea95ba55c4386e2441","impliedFormat":1},{"version":"13283350547389802aa35d9f2188effaeac805499169a06ef5cd77ce2a0bd63f","impliedFormat":1},{"version":"2e4f37ffe8862b14d8e24ae8763daaa8340c0df0b859d9a9733def0eee7562d9","impliedFormat":1},{"version":"d07cbc787a997d83f7bde3877fec5fb5b12ce8c1b7047eb792996ed9726b4dde","impliedFormat":1},{"version":"6ac6715916fa75a1f7ebdfeacac09513b4d904b667d827b7535e84ff59679aff","impliedFormat":1},{"version":"8bba776476c48b0e319d243f353190f24096057acede3c2f620fee17ff885dba","impliedFormat":1},{"version":"b83cb14474fa60c5f3ec660146b97d122f0735627f80d82dd03e8caa39b4388c","impliedFormat":1},{"version":"42c169fb8c2d42f4f668c624a9a11e719d5d07dacbebb63cbcf7ef365b0a75b3","impliedFormat":1},{"version":"2b2f9dac86b659e6d5cd623bcc21519910a48114fc0cef52d8f86962c48d44e2","impliedFormat":1},{"version":"7e8b76334c75984d57a810a0652c61066ffacede59001dfc5c633565f791ee60","impliedFormat":1},{"version":"72ca9ca89ca15055cbb6ce767b6bf56615be5f1ea6a87ab432ee0603c8d19010","impliedFormat":1},{"version":"7274fbffbd7c9589d8d0ffba68157237afd5cecff1e99881ea3399127e60572f","impliedFormat":1},{"version":"b73cbf0a72c8800cf8f96a9acfe94f3ad32ca71342a8908b8ae484d61113f647","impliedFormat":1},{"version":"bae6dd176832f6423966647382c0d7ba9e63f8c167522f09a982f086cd4e8b23","impliedFormat":1},{"version":"208c9af9429dd3c76f5927b971263174aaa4bc7621ddec63f163640cbd3c473c","impliedFormat":1},{"version":"20865ac316b8893c1a0cc383ccfc1801443fbcc2a7255be166cf90d03fac88c9","impliedFormat":1},{"version":"c9958eb32126a3843deedda8c22fb97024aa5d6dd588b90af2d7f2bfac540f23","impliedFormat":1},{"version":"d682336018141807fb602709e2d95a192828fcb8d5ba06dda3833a8ea98f69e3","impliedFormat":1},{"version":"461d0ad8ae5f2ff981778af912ba71b37a8426a33301daa00f21c6ccb27f8156","impliedFormat":1},{"version":"e927c2c13c4eaf0a7f17e6022eee8519eb29ef42c4c13a31e81a611ab8c95577","impliedFormat":1},{"version":"fcafff163ca5e66d3b87126e756e1b6dfa8c526aa9cd2a2b0a9da837d81bbd72","impliedFormat":1},{"version":"70246ad95ad8a22bdfe806cb5d383a26c0c6e58e7207ab9c431f1cb175aca657","impliedFormat":1},{"version":"f00f3aa5d64ff46e600648b55a79dcd1333458f7a10da2ed594d9f0a44b76d0b","impliedFormat":1},{"version":"772d8d5eb158b6c92412c03228bd9902ccb1457d7a705b8129814a5d1a6308fc","impliedFormat":1},{"version":"45490817629431853543adcb91c0673c25af52a456479588b6486daba34f68bb","impliedFormat":1},{"version":"802e797bcab5663b2c9f63f51bdf67eff7c41bc64c0fd65e6da3e7941359e2f7","impliedFormat":1},{"version":"b01bd582a6e41457bc56e6f0f9de4cb17f33f5f3843a7cf8210ac9c18472fb0f","impliedFormat":1},{"version":"8b4327413e5af38cd8cb97c59f48c3c866015d5d642f28518e3a891c469f240e","impliedFormat":1},{"version":"cecad464ddaf764e5490018d248a8df1733f3d63435fbddac72941c1f4005b66","impliedFormat":1},{"version":"6124e973eab8c52cabf3c07575204efc1784aca6b0a30c79eb85fe240a857efa","impliedFormat":1},{"version":"0d891735a21edc75df51f3eb995e18149e119d1ce22fd40db2b260c5960b914e","impliedFormat":1},{"version":"3b414b99a73171e1c4b7b7714e26b87d6c5cb03d200352da5342ab4088a54c85","impliedFormat":1},{"version":"51b1709e7ad186919a0e30237a8607100143a86d28771b3d3f046359aca1e65c","impliedFormat":1},{"version":"0a437ae178f999b46b6153d79095b60c42c996bc0458c04955f1c996dc68b971","impliedFormat":1},{"version":"74b2a5e5197bd0f2e0077a1ea7c07455bbea67b87b0869d9786d55104006784f","impliedFormat":1},{"version":"4a7baeb6325920044f66c0f8e5e6f1f52e06e6d87588d837bdf44feb6f35c664","impliedFormat":1},{"version":"6dcf60530c25194a9ee0962230e874ff29d34c59605d8e069a49928759a17e0a","impliedFormat":1},{"version":"56013416784a6b754f3855f8f2bf6ce132320679b8a435389aca0361bce4df6b","impliedFormat":1},{"version":"43e96a3d5d1411ab40ba2f61d6a3192e58177bcf3b133a80ad2a16591611726d","impliedFormat":1},{"version":"30f4dab03b4bc54def77049ee3a10137109cf3b4acf2fd0e885c619760cfe694","impliedFormat":1},{"version":"002eae065e6960458bda3cf695e578b0d1e2785523476f8a9170b103c709cd4f","impliedFormat":1},{"version":"c51641ab4bfa31b7a50a0ca37edff67f56fab3149881024345b13f2b48b7d2de","impliedFormat":1},{"version":"a57b1802794433adec9ff3fed12aa79d671faed86c49b09e02e1ac41b4f1d33a","impliedFormat":1},{"version":"52abbd5035a97ebfb4240ec8ade2741229a7c26450c84eb73490dc5ea048b911","impliedFormat":1},{"version":"1042064ece5bb47d6aba91648fbe0635c17c600ebdf567588b4ca715602f0a9d","impliedFormat":1},{"version":"4360ad4de54de2d5c642c4375d5eab0e7fe94ebe8adca907e6c186bbef75a54d","impliedFormat":1},{"version":"4a889f2c763edb4d55cb624257272ac10d04a1cad2ed2948b10ed4a7fda2a428","impliedFormat":1},{"version":"7bb79aa2fead87d9d56294ef71e056487e848d7b550c9a367523ee5416c44cfa","impliedFormat":1},{"version":"9c9cae45dc94c2192c7d25f80649414fa13c425d0399a2c7cb2b979e4e50af42","impliedFormat":1},{"version":"6c87b6bcf4336b29c837ea49afbdde69cc15a91cbbfd9f20c0af8694927dec08","impliedFormat":1},{"version":"27ff4196654e6373c9af16b6165120e2dd2169f9ad6abb5c935af5abd8c7938c","impliedFormat":1},{"version":"6dd9bcf10678b889842d467706836a0ab42e6c58711e33918ed127073807ee65","impliedFormat":1},{"version":"8c030e515014c10a2b98f9f48408e3ba18023dfd3f56e3312c6c2f3ae1f55a16","impliedFormat":1},{"version":"dafc31e9e8751f437122eb8582b93d477e002839864410ff782504a12f2a550c","impliedFormat":1},{"version":"ef9efc827cdad89c4ee54142164c793f530aa4d844ca9121cc35368310d5fb9c","impliedFormat":1},{"version":"643672ce383e1c58ea665a92c5481f8441edbd3e91db36e535abccbc9035adeb","impliedFormat":1},{"version":"8fa022ea514ce0ea78ac9b7092a9f97f08ead20c839c779891019e110fce8307","impliedFormat":1},{"version":"c93235337600b786fd7d0ff9c71a00f37ca65c4d63e5d695fc75153be2690f09","impliedFormat":1},{"version":"fa45f48f2def181ab2fb107a032c91b6c043ad05a179f3fbaafb8e5411fd01e4","impliedFormat":1},{"version":"a8e493c0355aabdd495e141bf1c4ec93454a0698c8675df466724adc2fcfe630","impliedFormat":1},{"version":"99702c9058170ae70ea72acbf01be3111784f06152dbf478f52c9afe423528bd","impliedFormat":1},{"version":"cf32f58a7ad3498c69c909121772971ffdee176b882f39c78532d0e0ab41a30d","impliedFormat":1},{"version":"e2bbc579a2fda9473e06b2a68d693e56928900f73ccfc03dabea789fe144e8a5","impliedFormat":1},{"version":"ce0df82a9ae6f914ba08409d4d883983cc08e6d59eb2df02d8e4d68309e7848b","impliedFormat":1},{"version":"796273b2edc72e78a04e86d7c58ae94d370ab93a0ddf40b1aa85a37a1c29ecd7","impliedFormat":1},{"version":"5df15a69187d737d6d8d066e189ae4f97e41f4d53712a46b2710ff9f8563ec9f","impliedFormat":1},{"version":"e17cd049a1448de4944800399daa4a64c5db8657cc9be7ef46be66e2a2cd0e7c","impliedFormat":1},{"version":"d05fb434f4ba073aed74b6c62eff1723c835de2a963dbb091e000a2decb5a691","impliedFormat":1},{"version":"bff8c8bffbf5f302a30ccb1c0557dae477892d50a80eecfe393bd89bac7fb41d","impliedFormat":1},{"version":"43ba4f2fa8c698f5c304d21a3ef596741e8e85a810b7c1f9b692653791d8d97a","impliedFormat":1},{"version":"4d4927cbee21750904af7acf940c5e3c491b4d5ebc676530211e389dd375607a","impliedFormat":1},{"version":"72105519d0390262cf0abe84cf41c926ade0ff475d35eb21307b2f94de985778","impliedFormat":1},{"version":"8a97e578a9bc40eb4f1b0ca78f476f2e9154ecbbfd5567ee72943bab37fc156a","impliedFormat":1},{"version":"a58abf1f5c8feb335475097abeddd32fd71c4dc2065a3d28cf15cacabad9654a","impliedFormat":1},{"version":"ccf6dd45b708fb74ba9ed0f2478d4eb9195c9dfef0ff83a6092fa3cf2ff53b4f","impliedFormat":1},{"version":"2d7db1d73456e8c5075387d4240c29a2a900847f9c1bff106a2e490da8fbd457","impliedFormat":1},{"version":"2b15c805f48e4e970f8ec0b1915f22d13ca6212375e8987663e2ef5f0205e832","impliedFormat":1},{"version":"f22d05663d873ee7a600faf78abb67f3f719d32266803440cf11d5db7ac0cab2","impliedFormat":1},{"version":"f0f05149debcf31b3a717ce8dd16e0323a789905cb9e27239167b604153b8885","impliedFormat":1},{"version":"35069c2c417bd7443ae7c7cafd1de02f665bf015479fec998985ffbbf500628c","impliedFormat":1},{"version":"b4f4d239a6632b86b315a6e4cfe0fac4e4bf6c934263bc07dd2bf5c7dbb8e6a5","impliedFormat":1},{"version":"0d44227395ae4a117dd7c8c9a048e18ade1f1f631bc5b883f9d469126e3cedab","impliedFormat":1},{"version":"9e21f8e2c0cfea713a4a372f284b60089c0841eb90bf3610539d89dbcd12d65a","impliedFormat":1},{"version":"045b752f44bf9bbdcaffd882424ab0e15cb8d11fa94e1448942e338c8ef19fba","impliedFormat":1},{"version":"2894c56cad581928bb37607810af011764a2f511f575d28c9f4af0f2ef02d1ab","impliedFormat":1},{"version":"0a72186f94215d020cb386f7dca81d7495ab6c17066eb07d0f44a5bf33c1b21a","impliedFormat":1},{"version":"a072c5f254d5cbb6522c0d4eeeb7cc4a6ce7f2f8ad84e2593d903bfe3aa44176","impliedFormat":1},{"version":"52b390f86821086a1be50100487faa9f7b23fc04343efb590f304382b4950e04","impliedFormat":1},{"version":"87122b31fe473758a5724388c93826caab566f62be2196aefc2ae8b04b814b52","impliedFormat":1},{"version":"063ab26d3488a665d2c3bc963b18ce220dad7351190629179165bc8c499c6cd9","impliedFormat":1},{"version":"6ac6715916fa75a1f7ebdfeacac09513b4d904b667d827b7535e84ff59679aff","impliedFormat":1},{"version":"2652448ac55a2010a1f71dd141f828b682298d39728f9871e1cdf8696ef443fd","impliedFormat":1},{"version":"fb400501bee56d86fa9b490e9d8b07d7df163d34d8235fcea27c3f9e8d064d1a","impliedFormat":1},{"version":"120599fd965257b1f4d0ff794bc696162832d9d8467224f4665f713a3119078b","impliedFormat":1},{"version":"5433f33b0a20300cca35d2f229a7fc20b0e8477c44be2affeb21cb464af60c76","impliedFormat":1},{"version":"db036c56f79186da50af66511d37d9fe77fa6793381927292d17f81f787bb195","impliedFormat":1},{"version":"bd4131091b773973ca5d2326c60b789ab1f5e02d8843b3587effe6e1ea7c9d86","impliedFormat":1},{"version":"794998dc1c5a19ce77a75086fe829fb9c92f2fd07b5631c7d5e0d04fd9bc540c","impliedFormat":1},{"version":"409678793827cdf5814e027b1f9e52a0445acb1c322282311c1c4e0855a0918e","impliedFormat":1},{"version":"6ac6715916fa75a1f7ebdfeacac09513b4d904b667d827b7535e84ff59679aff","impliedFormat":1},{"version":"0427df5c06fafc5fe126d14b9becd24160a288deff40e838bfbd92a35f8d0d00","impliedFormat":1},{"version":"3545dc8a9bdbd33db34462af7eed83f703083e4fee9135dadbba7edfe1e7db3c","impliedFormat":1},{"version":"7b5153a9b237898879441e5ddb576ded76ef3ab4c5baee4bb749ca5c72fc395d","impliedFormat":1},{"version":"49c346823ba6d4b12278c12c977fb3a31c06b9ca719015978cb145eb86da1c61","impliedFormat":1},{"version":"bfac6e50eaa7e73bb66b7e052c38fdc8ccfc8dbde2777648642af33cf349f7f1","impliedFormat":1},{"version":"92f7c1a4da7fbfd67a2228d1687d5c2e1faa0ba865a94d3550a3941d7527a45d","impliedFormat":1},{"version":"f53b120213a9289d9a26f5af90c4c686dd71d91487a0aa5451a38366c70dc64b","impliedFormat":1},{"version":"83fe880c090afe485a5c02262c0b7cdd76a299a50c48d9bde02be8e908fb4ae6","impliedFormat":1},{"version":"d5c2934185201f0768fb80d220f0e617cd05aa4c0c791ffcd508646c474b3c44","impliedFormat":1},{"version":"57d67b72e06059adc5e9454de26bbfe567d412b962a501d263c75c2db430f40e","impliedFormat":1},{"version":"6511e4503cf74c469c60aafd6589e4d14d5eb0a25f9bf043dcbecdf65f261972","impliedFormat":1},{"version":"e326c507507d6c6f3df4152e9e132a6189b30e14a262782796c2a627ba5d42cc","impliedFormat":1},{"version":"75efc43fb206f3825eb219c96b1e59fdabf2f2f042f424fa5f96335b99897540","impliedFormat":1},{"version":"a67b87d0281c97dfc1197ef28dfe397fc2c865ccd41f7e32b53f647184cc7307","impliedFormat":1},{"version":"771ffb773f1ddd562492a6b9aaca648192ac3f056f0e1d997678ff97dbb6bf9b","impliedFormat":1},{"version":"232f70c0cf2b432f3a6e56a8dc3417103eb162292a9fd376d51a3a9ea5fbbf6f","impliedFormat":1},{"version":"ca651584d8d718c1f0655ec4b0c340fbcd967ec1e1758807af3a3f43bc81f81e","impliedFormat":1},{"version":"cfb5f0ab72180f4e0b9ed1534847a63d5394b9a8ee685ae149d25fd53f1aec66","impliedFormat":1},{"version":"8a0e762ceb20c7e72504feef83d709468a70af4abccb304f32d6b9bac1129b2c","impliedFormat":1},{"version":"f613e4e752659ebd241be4d991c05200248b50e753fcecf50a249d30f4367794","impliedFormat":1},{"version":"9252d498a77517aab5d8d4b5eb9d71e4b225bbc7123df9713e08181de63180f6","impliedFormat":1},{"version":"de1ccef0cb3623291d55871e39eb7005cb79d8da519cb46959b0ba5e2422184f","impliedFormat":1},{"version":"35e6379c3f7cb27b111ad4c1aa69538fd8e788ab737b8ff7596a1b40e96f4f90","impliedFormat":1},{"version":"1fffe726740f9787f15b532e1dc870af3cd964dbe29e191e76121aa3dd8693f2","impliedFormat":1},{"version":"7cd657e359eac7829db5f02c856993e8945ffccc71999cdfb4ab3bf801a1bbc6","impliedFormat":1},{"version":"1a82deef4c1d39f6882f28d275cad4c01f907b9b39be9cbc472fcf2cf051e05b","impliedFormat":1},{"version":"4b20fcf10a5413680e39f5666464859fc56b1003e7dfe2405ced82371ebd49b6","impliedFormat":1},{"version":"f0f3f57e29b40e9cb0c4b155a96de2f61e51700d2c335dd547ef3c85e668c6a8","impliedFormat":1},{"version":"f7d628893c9fa52ba3ab01bcb5e79191636c4331ee5667ecc6373cbccff8ae12","impliedFormat":1},{"version":"35117a2e59d2eca30c1848c9ff328c75d131d3468f8649c9012ca885c80fe2ce","impliedFormat":1},{"version":"6a76daf108400ca1333e325772f24f40ebdde2120ef68f8c87d7a1adf0257541","impliedFormat":1},{"version":"313698394e61f0343ebf11b64e5cde7e948110eaba98e8dbd7bdd67ee8df2639","impliedFormat":1},{"version":"6459054aabb306821a043e02b89d54da508e3a6966601a41e71c166e4ea1474f","impliedFormat":1},{"version":"bb37588926aba35c9283fe8d46ebf4e79ffe976343105f5c6d45f282793352b2","impliedFormat":1},{"version":"05c97cddbaf99978f83d96de2d8af86aded9332592f08ce4a284d72d0952c391","impliedFormat":1},{"version":"72179f9dd22a86deaad4cc3490eb0fe69ee084d503b686985965654013f1391b","impliedFormat":1},{"version":"2e6114a7dd6feeef85b2c80120fdbfb59a5529c0dcc5bfa8447b6996c97a69f5","impliedFormat":1},{"version":"7b6ff760c8a240b40dab6e4419b989f06a5b782f4710d2967e67c695ef3e93c4","impliedFormat":1},{"version":"c8f004e6036aa1c764ad4ec543cf89a5c1893a9535c80ef3f2b653e370de45e6","impliedFormat":1},{"version":"91357dba2d5a7234ccfae834dc8363b5635e08f373bd18f548a9046b01864619","impliedFormat":1},{"version":"f31bbb122869d8903ff13c1036bdefc1e6a5bac9b2c3c35e42a9de84d43cd04a","impliedFormat":1},{"version":"c7fdbcfa0991e15215e2a5751676115cac943b39289791546c7197d7bb889c51","impliedFormat":1},{"version":"f974e4a06953682a2c15d5bd5114c0284d5abf8bc0fe4da25cb9159427b70072","impliedFormat":1},{"version":"50256e9c31318487f3752b7ac12ff365c8949953e04568009c8705db802776fb","impliedFormat":1},{"version":"7d73b24e7bf31dfb8a931ca6c4245f6bb0814dfae17e4b60c9e194a631fe5f7b","impliedFormat":1},{"version":"4eac446ac161245bfc6daa95f2cc64d2da4f7844e36a7a5641abfd4771ef0923","impliedFormat":1},{"version":"8de9fe97fa9e00ec00666fa77ab6e91b35d25af8ca75dabcb01e14ad3299b150","impliedFormat":1},{"version":"076527b1c2fd207de3101ba10e0c2b7d155aa8369cc7fe3eed723811e428223d","impliedFormat":1},{"version":"6c800b281b9e89e69165fd11536195488de3ff53004e55905e6c0059a2d8591e","impliedFormat":1},{"version":"7d4254b4c6c67a29d5e7f65e67d72540480ac2cfb041ca484847f5ae70480b62","impliedFormat":1},{"version":"397f568f996f8ffcf12d9156342552b0da42f6571eadba6bce61c99e1651977d","impliedFormat":1},{"version":"ff0c0d446569f8756be0882b520fd94429468de9f922ab6bf9eed4da55eb0187","impliedFormat":1},{"version":"d663134457d8d669ae0df34eabd57028bddc04fc444c4bc04bc5215afc91e1f4","impliedFormat":1},{"version":"a52674bc98da7979607e0f44d4c015c59c1b1d264c83fc50ec79ff2cfea06723","impliedFormat":1},{"version":"89b3d1b267c4380fbb8e5cadccbb284843b90066f16a2f6e8a5b3a030bb7dcfb","impliedFormat":1},{"version":"f58226e78464f9c85be6cf47c665a8e33b32121ab4cdb2670b66a06f1114a55c","impliedFormat":1},{"version":"9b06ce81ad598c9c6b011cb66182fa66575ad6bd1f8f655830a6a0223a197ab7","impliedFormat":1},{"version":"e108f38a04a607f9386d68a4c6f3fdae1b712960f11f6482c6f1769bab056c2e","impliedFormat":1},{"version":"a3128a84a9568762a2996df79717d92154d18dd894681fc0ab3a098fa7f8ee3b","affectsGlobalScope":true,"impliedFormat":1},{"version":"347791f3792f436950396dd6171d6450234358001ae7c94ca209f1406566ccbf","impliedFormat":1},{"version":"dd80b1e600d00f5c6a6ba23f455b84a7db121219e68f89f10552c54ba46e4dc9","impliedFormat":1},{"version":"2896c2e673a5d3bd9b4246811f79486a073cbb03950c3d252fba10003c57411a","impliedFormat":1},{"version":"616775f16134fa9d01fc677ad3f76e68c051a056c22ab552c64cc281a9686790","impliedFormat":1},{"version":"65c24a8baa2cca1de069a0ba9fba82a173690f52d7e2d0f1f7542d59d5eb4db0","impliedFormat":1},{"version":"f9fe6af238339a0e5f7563acee3178f51db37f32a2e7c09f85273098cee7ec49","impliedFormat":1},{"version":"51bf55bb6eb80f11b3aa59fb0a9571565a7ea304a19381f6da5630f4b2e206c4","impliedFormat":1},{"version":"77e71242e71ebf8528c5802993697878f0533db8f2299b4d36aa015bae08a79c","impliedFormat":1},{"version":"98a787be42bd92f8c2a37d7df5f13e5992da0d967fab794adbb7ee18370f9849","impliedFormat":1},{"version":"5c96bad5f78466785cdad664c056e9e2802d5482ca5f862ed19ba34ffbb7b3a4","impliedFormat":1},{"version":"b7fff2d004c5879cae335db8f954eb1d61242d9f2d28515e67902032723caeab","impliedFormat":1},{"version":"5f3dc10ae646f375776b4e028d2bed039a93eebbba105694d8b910feebbe8b9c","impliedFormat":1},{"version":"bb0cd7862b72f5eba39909c9889d566e198fcaddf7207c16737d0c2246112678","impliedFormat":1},{"version":"4545c1a1ceca170d5d83452dd7c4994644c35cf676a671412601689d9a62da35","impliedFormat":1},{"version":"320f4091e33548b554d2214ce5fc31c96631b513dffa806e2e3a60766c8c49d9","impliedFormat":1},{"version":"a2d648d333cf67b9aeac5d81a1a379d563a8ffa91ddd61c6179f68de724260ff","impliedFormat":1},{"version":"d90d5f524de38889d1e1dbc2aeef00060d779f8688c02766ddb9ca195e4a713d","impliedFormat":1},{"version":"a3f41ed1b4f2fc3049394b945a68ae4fdefd49fa1739c32f149d32c0545d67f5","impliedFormat":1},{"version":"bad68fd0401eb90fe7da408565c8aee9c7a7021c2577aec92fa1382e8876071a","impliedFormat":1},{"version":"47699512e6d8bebf7be488182427189f999affe3addc1c87c882d36b7f2d0b0e","impliedFormat":1},{"version":"fec01479923e169fb52bd4f668dbeef1d7a7ea6e6d491e15617b46f2cacfa37d","impliedFormat":1},{"version":"8a8fb3097ba52f0ae6530ec6ab34e43e316506eb1d9aa29420a4b1e92a81442d","impliedFormat":1},{"version":"44e09c831fefb6fe59b8e65ad8f68a7ecc0e708d152cfcbe7ba6d6080c31c61e","impliedFormat":1},{"version":"1c0a98de1323051010ce5b958ad47bc1c007f7921973123c999300e2b7b0ecc0","impliedFormat":1},{"version":"4655709c9cb3fd6db2b866cab7c418c40ed9533ce8ea4b66b5f17ec2feea46a9","impliedFormat":1},{"version":"87affad8e2243635d3a191fa72ef896842748d812e973b7510a55c6200b3c2a4","impliedFormat":1},{"version":"ad036a85efcd9e5b4f7dd5c1a7362c8478f9a3b6c3554654ca24a29aa850a9c5","impliedFormat":1},{"version":"fedebeae32c5cdd1a85b4e0504a01996e4a8adf3dfa72876920d3dd6e42978e7","impliedFormat":1},{"version":"22b87e96a61c525464e115db0148593a861e77806fd37ab280e1903019a6e212","impliedFormat":1},{"version":"cdf21eee8007e339b1b9945abf4a7b44930b1d695cc528459e68a3adc39a622e","impliedFormat":1},{"version":"330896c1a2b9693edd617be24fbf9e5895d6e18c7955d6c08f028f272b37314d","impliedFormat":1},{"version":"1d9c0a9a6df4e8f29dc84c25c5aa0bb1da5456ebede7a03e03df08bb8b27bae6","impliedFormat":1},{"version":"84380af21da938a567c65ef95aefb5354f676368ee1a1cbb4cae81604a4c7d17","impliedFormat":1},{"version":"1af3e1f2a5d1332e136f8b0b95c0e6c0a02aaabd5092b36b64f3042a03debf28","impliedFormat":1},{"version":"30d8da250766efa99490fc02801047c2c6d72dd0da1bba6581c7e80d1d8842a4","impliedFormat":1},{"version":"03566202f5553bd2d9de22dfab0c61aa163cabb64f0223c08431fb3fc8f70280","impliedFormat":1},{"version":"9a01f12466488eccd8d9eafc8fecb9926c175a4bf4a8f73a07c3bcf8b3363282","impliedFormat":1},{"version":"b80f624162276f24a4ec78b8e86fbee80ca255938e12f8b58e7a8f1a6937120b","impliedFormat":1},{"version":"1de80059b8078ea5749941c9f863aa970b4735bdbb003be4925c853a8b6b4450","impliedFormat":1},{"version":"1d079c37fa53e3c21ed3fa214a27507bda9991f2a41458705b19ed8c2b61173d","impliedFormat":1},{"version":"5bf5c7a44e779790d1eb54c234b668b15e34affa95e78eada73e5757f61ed76a","impliedFormat":1},{"version":"5835a6e0d7cd2738e56b671af0e561e7c1b4fb77751383672f4b009f4e161d70","impliedFormat":1},{"version":"5c634644d45a1b6bc7b05e71e05e52ec04f3d73d9ac85d5927f647a5f965181a","impliedFormat":1},{"version":"4b7f74b772140395e7af67c4841be1ab867c11b3b82a51b1aeb692822b76c872","impliedFormat":1},{"version":"27be6622e2922a1b412eb057faa854831b95db9db5035c3f6d4b677b902ab3b7","impliedFormat":1},{"version":"b95a6f019095dd1d48fd04965b50dfd63e5743a6e75478343c46d2582a5132bf","impliedFormat":99},{"version":"c2008605e78208cfa9cd70bd29856b72dda7ad89df5dc895920f8e10bcb9cd0a","impliedFormat":99},{"version":"a61e739f0b2c0165086c77a28d7e4b58a2a8703c646cd1e1641788484afc6ff2","impliedFormat":99},{"version":"63a7595a5015e65262557f883463f934904959da563b4f788306f699411e9bac","impliedFormat":1},{"version":"9e40365afca304124bc53eb03412643abf074a1580e4dc279a7a16000d11f985","impliedFormat":1},{"version":"4ba137d6553965703b6b55fd2000b4e07ba365f8caeb0359162ad7247f9707a6","impliedFormat":1},{"version":"ceec3c81b2d81f5e3b855d9367c1d4c664ab5046dff8fd56552df015b7ccbe8f","affectsGlobalScope":true,"impliedFormat":1},{"version":"4e18cfe14fa8602c7ff80cbbddb91e31608e5ae20bd361fe7e6a607706cb033c","affectsGlobalScope":true,"impliedFormat":1},{"version":"a1219ee18b9282b4c6a31f1f0bcc9255b425e99363268ba6752a932cf76662f0","impliedFormat":1},{"version":"3dc14e1ab45e497e5d5e4295271d54ff689aeae00b4277979fdd10fa563540ae","impliedFormat":1},{"version":"1d63055b690a582006435ddd3aa9c03aac16a696fac77ce2ed808f3e5a06efab","impliedFormat":1},{"version":"b789bf89eb19c777ed1e956dbad0925ca795701552d22e68fd130a032008b9f9","impliedFormat":1},"f2b3bca04d1bfe583daae1e1f798c92ec24bb6693bd88d0a09ba6802dee362a8","c8f32e105f28245147f3ebdbec0caf65ead80798d6b5846d8c8558d86490145e","614bce25b089c3f19b1e17a6346c74b858034040154c6621e7d35303004767cc",{"version":"c82e272bdd6b91312781f7abbc255d4202b1833cb72ac516b37ed3964658374f","impliedFormat":99},{"version":"397e0cbdbbdc4341e7841c3c63d8507c177119abf07532cf276f81fad1da7442","impliedFormat":99},{"version":"9066b3d7edd9c47eb9599e9208d7c8ac6a36930e29db608a9f274ce84bee369f","impliedFormat":99},{"version":"625f53599e78f04333381bdb8ee8ba4d38778534789a2c14c8b022fe6b46d865","impliedFormat":99},"dcfaf32eef588a98a744e9c3ada702a5a4e4560338ad30872a55e0b971bbebf2",{"version":"a80ec72f5e178862476deaeed532c305bdfcd3627014ae7ac2901356d794fc93","impliedFormat":99},{"version":"e5885f7b9247fb96fb143a533f3a37fd511f8b96b42d56f76ed0fc7dc36e6dc8","impliedFormat":99},{"version":"571b2640f0cf541dfed72c433706ad1c70fb55ed60763343aa617e150fbb036e","impliedFormat":1},{"version":"6a2372186491f911527a890d92ac12b88dec29f1c0cec7fce93745aba3253fde","impliedFormat":1},{"version":"c57b441e0c0a9cbdfa7d850dae1f8a387d6f81cbffbc3cd0465d530084c2417d","impliedFormat":99},{"version":"9970ef80d5414c25679f4be4feffcc51375c54b520df496a0871a7c89e3b65e5","impliedFormat":1},{"version":"2cef84bf00cbdb452fdc5d8ecfe7b8c0aa3fa788bdc4ad8961e2e636530dbb60","impliedFormat":99},{"version":"24104650185414f379d5cc35c0e2c19f06684a73de5b472bae79e0d855771ecf","impliedFormat":99},{"version":"799003c0ab928582fca04977f47b8d85b43a8de610f4eef0ad2d069fbb9f9399","impliedFormat":99},{"version":"b13dd41c344a23e085f81b2f5cd96792e6b35ae814f32b25e39d9841844ad240","impliedFormat":99},{"version":"17d8b4e6416e48b6e23b73d05fd2fde407e2af8fddbe9da2a98ede14949c3489","impliedFormat":99},{"version":"6d17b2b41f874ab4369b8e04bdbe660163ea5c8239785c850f767370604959e3","impliedFormat":99},{"version":"04b4c044c8fe6af77b6c196a16c41e0f7d76b285d036d79dcaa6d92e24b4982b","impliedFormat":99},{"version":"30bdeead5293c1ddfaea4097d3e9dd5a6b0bc59a1e07ff4714ea1bbe7c5b2318","impliedFormat":99},{"version":"e7df226dcc1b0ce76b32f160556f3d1550124c894aae2d5f73cefaaf28df7779","impliedFormat":99},{"version":"f2b7eef5c46c61e6e72fba9afd7cc612a08c0c48ed44c3c5518559d8508146a2","impliedFormat":99},{"version":"00f0ba57e829398d10168b7db1e16217f87933e61bd8612b53a894bd7d6371da","impliedFormat":99},{"version":"126b20947d9fa74a88bb4e9281462bda05e529f90e22d08ee9f116a224291e84","impliedFormat":99},{"version":"40d9e43acee39702745eb5c641993978ac40f227475eacc99a83ba893ad995db","impliedFormat":99},{"version":"8a66b69b21c8de9cb88b4b6d12f655d5b7636e692a014c5aa1bd81745c8c51d5","impliedFormat":99},{"version":"ebbb846bdd5a78fdacff59ae04cea7a097912aeb1a2b34f8d88f4ebb84643069","impliedFormat":99},{"version":"7321adb29ffd637acb33ee67ea035f1a97d0aa0b14173291cc2fd58e93296e04","impliedFormat":99},{"version":"320816f1a4211188f07a782bdb6c1a44555b3e716ce13018f528ad7387108d5f","impliedFormat":99},{"version":"b2cc8a474b7657f4a03c67baf6bff75e26635fd4b5850675e8cad524a09ddd0c","impliedFormat":99},{"version":"0d081e9dc251063cc69611041c17d25847e8bdbe18164baaa89b7f1f1633c0ab","impliedFormat":99},{"version":"a64c25d8f4ec16339db49867ea2324e77060782993432a875d6e5e8608b0de1e","impliedFormat":99},{"version":"0739310b6b777f3e2baaf908c0fbc622c71160e6310eb93e0d820d86a52e2e23","impliedFormat":99},{"version":"37b32e4eadd8cd3c263e7ac1681c58b2ac54f3f77bb34c5e4326cc78516d55a9","impliedFormat":99},{"version":"9b7a8974e028c4ed6f7f9abb969e3eb224c069fd7f226e26fcc3a5b0e2a1eba8","impliedFormat":99},{"version":"e8100b569926a5592146ed68a0418109d625a045a94ed878a8c5152b1379237c","impliedFormat":99},{"version":"594201c616c318b7f3149a912abd8d6bdf338d765b7bcbde86bca2e66b144606","impliedFormat":99},{"version":"03e380975e047c5c6ded532cf8589e6cc85abb7be3629e1e4b0c9e703f2fd36f","impliedFormat":99},{"version":"fae14b53b7f52a8eb3274c67c11f261a58530969885599efe3df0277b48909e1","impliedFormat":99},{"version":"c41206757c428186f2e0d1fd373915c823504c249336bdc9a9c9bbdf9da95fef","impliedFormat":99},{"version":"e961f853b7b0111c42b763a6aa46fc70d06a697db3d8ed69b38f7ba0ae42a62b","impliedFormat":99},{"version":"3db90f79e36bcb60b3f8de1bc60321026800979c150e5615047d598c787a64b7","impliedFormat":99},{"version":"639b6fb3afbb8f6067c1564af2bd284c3e883f0f1556d59bd5eb87cdbbdd8486","impliedFormat":99},{"version":"49795f5478cb607fd5965aa337135a8e7fd1c58bc40c0b6db726adf186dd403f","impliedFormat":99},{"version":"7d8890e6e2e4e215959e71d5b5bd49482cf7a23be68d48ea446601a4c99bd511","impliedFormat":99},{"version":"d56f72c4bb518de5702b8b6ae3d3c3045c99e0fd48b3d3b54c653693a8378017","impliedFormat":99},{"version":"4c9ac40163e4265b5750510d6d2933fb7b39023eed69f7b7c68b540ad960826e","impliedFormat":99},{"version":"8dfab17cf48e7be6e023c438a9cdf6d15a9b4d2fa976c26e223ba40c53eb8da8","impliedFormat":99},{"version":"38bdf7ccacfd8e418de3a7b1e3cecc29b5625f90abc2fa4ac7843a290f3bf555","impliedFormat":99},{"version":"9819e46a914735211fbc04b8dc6ba65152c62e3a329ca0601a46ba6e05b2c897","impliedFormat":99},{"version":"50f0dc9a42931fb5d65cdd64ba0f7b378aedd36e0cfca988aa4109aad5e714cb","impliedFormat":99},{"version":"894f23066f9fafccc6e2dd006ed5bd85f3b913de90f17cf1fe15a2eb677fd603","impliedFormat":99},{"version":"abdf39173867e6c2d6045f120a316de451bbb6351a6929546b8470ddf2e4b3b9","impliedFormat":99},{"version":"aa2cb4053f948fbd606228195bbe44d78733861b6f7204558bbee603202ee440","impliedFormat":99},{"version":"6911b41bfe9942ac59c2da1bbcbe5c3c1f4e510bf65cae89ed00f434cc588860","impliedFormat":99},{"version":"7b81bc4d4e2c764e85d869a8dd9fe3652b34b45c065482ac94ffaacc642b2507","impliedFormat":99},{"version":"895df4edb46ccdcbce2ec982f5eed292cf7ea3f7168f1efea738ee346feab273","impliedFormat":99},{"version":"8692bb1a4799eda7b2e3288a6646519d4cebb9a0bddf800085fc1bd8076997a0","impliedFormat":99},{"version":"239c9e98547fe99711b01a0293f8a1a776fc10330094aa261f3970aaba957c82","impliedFormat":99},{"version":"34833ec50360a32efdc12780ae624e9a710dd1fd7013b58c540abf856b54285a","impliedFormat":99},{"version":"647538e4007dcc351a8882067310a0835b5bb8559d1cfa5f378e929bceb2e64d","impliedFormat":99},{"version":"992d6b1abcc9b6092e5a574d51d441238566b6461ade5de53cb9718e4f27da46","impliedFormat":99},{"version":"938702305649bf1050bd79f3803cf5cc2904596fc1edd4e3b91033184eae5c54","impliedFormat":99},{"version":"1e931d3c367d4b96fe043e792196d9c2cf74f672ff9c0b894be54e000280a79d","impliedFormat":99},{"version":"05bec322ea9f6eb9efcd6458bb47087e55bd688afdd232b78379eb5d526816ed","impliedFormat":99},{"version":"4c449a874c2d2e5e5bc508e6aa98f3140218e78c585597a21a508a647acd780a","impliedFormat":99},{"version":"dae15e326140a633d7693e92b1af63274f7295ea94fb7c322d5cbe3f5e48be88","impliedFormat":99},{"version":"c2b0a869713bca307e58d81d1d1f4b99ebfc7ec8b8f17e80dde40739aa8a2bc6","impliedFormat":99},{"version":"6e4b4ff6c7c54fa9c6022e88f2f3e675eac3c6923143eb8b9139150f09074049","impliedFormat":99},{"version":"69559172a9a97bbe34a32bff8c24ef1d8c8063feb5f16a6d3407833b7ee504cf","impliedFormat":99},{"version":"86b94a2a3edcb78d9bfcdb3b382547d47cb017e71abe770c9ee8721e9c84857f","impliedFormat":99},{"version":"e3fafafda82853c45c0afc075fea1eaf0df373a06daf6e6c7f382f9f61b2deb3","impliedFormat":99},{"version":"a4ba4b31de9e9140bc49c0addddbfaf96b943a7956a46d45f894822e12bf5560","impliedFormat":99},{"version":"d8a7926fc75f2ed887f17bae732ee31a4064b8a95a406c87e430c58578ee1f67","impliedFormat":99},{"version":"9886ffbb134b0a0059fd82219eba2a75f8af341d98bc6331b6ef8a921e10ec68","impliedFormat":99},{"version":"c2ead057b70d0ae7b87a771461a6222ebdb187ba6f300c974768b0ae5966d10e","impliedFormat":99},{"version":"46687d985aed8485ab2c71085f82fafb11e69e82e8552cf5d3849c00e64a00a5","impliedFormat":99},{"version":"999ca66d4b5e2790b656e0a7ce42267737577fc7a52b891e97644ec418eff7ec","impliedFormat":99},{"version":"ec948ee7e92d0888f92d4a490fdd0afb27fbf6d7aabebe2347a3e8ac82c36db9","impliedFormat":99},{"version":"03ef2386c683707ce741a1c30cb126e8c51a908aa0acc01c3471fafb9baaacd5","impliedFormat":99},{"version":"66a372e03c41d2d5e920df5282dadcec2acae4c629cb51cab850825d2a144cea","impliedFormat":99},{"version":"ddf9b157bd4c06c2e4646c9f034f36267a0fbd028bd4738214709de7ea7c548b","impliedFormat":99},{"version":"3e795aac9be23d4ad9781c00b153e7603be580602e40e5228e2dafe8a8e3aba1","impliedFormat":99},{"version":"98c461ec5953dfb1b5d5bca5fee0833c8a932383b9e651ca6548e55f1e2c71c3","impliedFormat":99},{"version":"5c42107b46cb1d36b6f1dee268df125e930b81f9b47b5fa0b7a5f2a42d556c10","impliedFormat":99},{"version":"7e32f1251d1e986e9dd98b6ff25f62c06445301b94aeebdf1f4296dbd2b8652f","impliedFormat":99},{"version":"2f7e328dda700dcb2b72db0f58c652ae926913de27391bd11505fc5e9aae6c33","impliedFormat":99},{"version":"3de7190e4d37da0c316db53a8a60096dbcd06d1a50677ccf11d182fa26882080","impliedFormat":99},{"version":"a9d6f87e59b32b02c861aade3f4477d7277c30d43939462b93f48644fa548c58","impliedFormat":99},{"version":"2bce8fd2d16a9432110bbe0ba1e663fd02f7d8b8968cd10178ea7bc306c4a5df","impliedFormat":99},{"version":"798bedbf45a8f1e55594e6879cd46023e8767757ecce1d3feaa78d16ad728703","impliedFormat":99},{"version":"62723d5ac66f7ed6885a3931dd5cfa017797e73000d590492988a944832e8bc2","impliedFormat":99},{"version":"03db8e7df7514bf17fc729c87fff56ca99567b9aa50821f544587a666537c233","impliedFormat":99},{"version":"9b1f311ba4409968b68bf20b5d892dbd3c5b1d65c673d5841c7dbde351bc0d0b","impliedFormat":99},{"version":"2d1e8b5431502739fe335ceec0aaded030b0f918e758a5d76f61effa0965b189","impliedFormat":99},{"version":"e725839b8f884dab141b42e9d7ff5659212f6e1d7b4054caa23bc719a4629071","impliedFormat":99},{"version":"4fa38a0b8ae02507f966675d0a7d230ed67c92ab8b5736d99a16c5fbe2b42036","impliedFormat":99},{"version":"50ec1e8c23bad160ddedf8debeebc722becbddda127b8fdce06c23eacd3fe689","impliedFormat":99},{"version":"9a0aea3a113064fd607f41375ade308c035911d3c8af5ae9db89593b5ca9f1f9","impliedFormat":99},{"version":"8d643903b58a0bf739ce4e6a8b0e5fb3fbdfaacbae50581b90803934b27d5b89","impliedFormat":99},{"version":"19de2915ccebc0a1482c2337b34cb178d446def2493bf775c4018a4ea355adb8","impliedFormat":99},{"version":"9be8fc03c8b5392cd17d40fd61063d73f08d0ee3457ecf075dcb3768ae1427bd","impliedFormat":99},{"version":"a2d89a8dc5a993514ca79585039eea083a56822b1d9b9d9d85b14232e4782cbe","impliedFormat":99},{"version":"f526f20cae73f17e8f38905de4c3765287575c9c4d9ecacee41cfda8c887da5b","impliedFormat":99},{"version":"d9ec0978b7023612b9b83a71fee8972e290d02f8ff894e95cdd732cd0213b070","impliedFormat":99},{"version":"7ab10c473a058ec8ac4790b05cae6f3a86c56be9b0c0a897771d428a2a48a9f9","impliedFormat":99},{"version":"451d7a93f8249d2e1453b495b13805e58f47784ef2131061821b0e456a9fd0e1","impliedFormat":99},{"version":"21c56fe515d227ed4943f275a8b242d884046001722a4ba81f342a08dbe74ae2","impliedFormat":99},{"version":"d8311f0c39381aa1825081c921efde36e618c5cf46258c351633342a11601208","impliedFormat":99},{"version":"6b50c3bcc92dc417047740810596fcb2df2502aa3f280c9e7827e87896da168a","impliedFormat":99},{"version":"18a6b318d1e7b31e5749a52be0cf9bbce1b275f63190ef32e2c79db0579328ca","impliedFormat":99},{"version":"6a2d0af2c27b993aa85414f3759898502aa198301bc58b0d410948fe908b07b0","impliedFormat":99},{"version":"2da11b6f5c374300e5e66a6b01c3c78ec21b5d3fec0748a28cc28e00be73e006","impliedFormat":99},{"version":"0729691b39c24d222f0b854776b00530877217bfc30aac1dc7fa2f4b1795c536","impliedFormat":99},{"version":"ca45bb5c98c474d669f0e47615e4a5ae65d90a2e78531fda7862ee43e687a059","impliedFormat":99},{"version":"c1c058b91d5b9a24c95a51aea814b0ad4185f411c38ac1d5eef0bf3cebec17dc","impliedFormat":99},{"version":"3ab0ed4060b8e5b5e594138aab3e7f0262d68ad671d6678bcda51568d4fc4ccc","impliedFormat":99},{"version":"e2bf1faba4ff10a6020c41df276411f641d3fdce5c6bae1db0ec84a0bf042106","impliedFormat":99},{"version":"80b0a8fe14d47a71e23d7c3d4dcee9584d4282ef1d843b70cab1a42a4ea1588c","impliedFormat":99},{"version":"a0f02a73f6e3de48168d14abe33bf5970fdacdb52d7c574e908e75ad571e78f7","impliedFormat":99},{"version":"c728002a759d8ec6bccb10eed56184e86aeff0a762c1555b62b5d0fa9d1f7d64","impliedFormat":99},{"version":"586f94e07a295f3d02f847f9e0e47dbf14c16e04ccc172b011b3f4774a28aaea","impliedFormat":99},{"version":"cfe1a0f4ed2df36a2c65ea6bc235dbb8cf6e6c25feb6629989f1fa51210b32e7","impliedFormat":99},{"version":"8ba69c9bf6de79c177329451ffde48ddab7ec495410b86972ded226552f664df","impliedFormat":99},{"version":"15111cbe020f8802ad1d150524f974a5251f53d2fe10eb55675f9df1e82dbb62","impliedFormat":99},{"version":"782dc153c56a99c9ed07b2f6f497d8ad2747764966876dbfef32f3e27ce11421","impliedFormat":99},{"version":"cc2db30c3d8bb7feb53a9c9ff9b0b859dd5e04c83d678680930b5594b2bf99cb","impliedFormat":99},{"version":"46909b8c85a6fd52e0807d18045da0991e3bdc7373435794a6ba425bc23cc6be","impliedFormat":99},{"version":"e4e511ff63bb6bd69a2a51e472c6044298bca2c27835a34a20827bc3ef9b7d13","impliedFormat":99},{"version":"2c86f279d7db3c024de0f21cd9c8c2c972972f842357016bfbbd86955723b223","impliedFormat":99},{"version":"112c895cff9554cf754f928477c7d58a21191c8089bffbf6905c87fe2dc6054f","impliedFormat":99},{"version":"8cfc293b33082003cacbf7856b8b5e2d6dd3bde46abbd575b0c935dc83af4844","impliedFormat":99},{"version":"d2c5c53f85ce0474b3a876d76c4fc44ff7bb766b14ed1bf495f9abac181d7f5f","impliedFormat":99},{"version":"3c523f27926905fcbe20b8301a0cc2da317f3f9aea2273f8fc8d9ae88b524819","impliedFormat":99},{"version":"9ca0d706f6b039cc52552323aeccb4db72e600b67ddc7a54cebc095fc6f35539","impliedFormat":99},{"version":"a64909a9f75081342ddd061f8c6b49decf0d28051bc78e698d347bdcb9746577","impliedFormat":99},{"version":"7d8d55ae58766d0d52033eae73084c4db6a93c4630a3e17f419dd8a0b2a4dcd8","impliedFormat":99},{"version":"b8b5c8ba972d9ffff313b3c8a3321e7c14523fc58173862187e8d1cb814168ac","impliedFormat":99},{"version":"9c42c0fa76ee36cf9cc7cc34b1389fbb4bd49033ec124b93674ec635fabf7ffe","impliedFormat":99},{"version":"6184c8da9d8107e3e67c0b99dedb5d2dfe5ccf6dfea55c2a71d4037caf8ca196","impliedFormat":99},{"version":"4030ceea7bf41449c1b86478b786e3b7eadd13dfe5a4f8f5fe2eb359260e08b3","impliedFormat":99},{"version":"7bf516ec5dfc60e97a5bde32a6b73d772bd9de24a2e0ec91d83138d39ac83d04","impliedFormat":99},{"version":"e6a6fb3e6525f84edf42ba92e261240d4efead3093aca3d6eb1799d5942ba393","impliedFormat":99},{"version":"45df74648934f97d26800262e9b2af2f77ef7191d4a5c2eb1df0062f55e77891","impliedFormat":99},{"version":"3fe361e4e567f32a53af1f2c67ad62d958e3d264e974b0a8763d174102fe3b29","impliedFormat":99},{"version":"28b520acee4bc6911bfe458d1ad3ebc455fa23678463f59946ad97a327c9ab2b","impliedFormat":99},{"version":"121b39b1a9ad5d23ed1076b0db2fe326025150ef476dccb8bf87778fcc4f6dd7","impliedFormat":99},{"version":"f791f92a060b52aa043dde44eb60307938f18d4c7ac13df1b52c82a1e658953f","impliedFormat":99},{"version":"df09443e7743fd6adc7eb108e760084bacdf5914403b7aac5fbd4dc4e24e0c2c","impliedFormat":99},{"version":"eeb4ff4aa06956083eaa2aad59070361c20254b865d986bc997ee345dbd44cbb","impliedFormat":99},{"version":"ed84d5043444d51e1e5908f664addc4472c227b9da8401f13daa565f23624b6e","impliedFormat":99},{"version":"146bf888b703d8baa825f3f2fb1b7b31bda5dff803e15973d9636cdda33f4af3","impliedFormat":99},{"version":"b4ec8b7a8d23bdf7e1c31e43e5beac3209deb7571d2ccf2a9572865bf242da7c","impliedFormat":99},{"version":"3fba0d61d172091638e56fba651aa1f8a8500aac02147d29bd5a9cc0bc8f9ec2","impliedFormat":99},{"version":"a5a57deb0351b03041e0a1448d3a0cc5558c48e0ed9b79b69c99163cdca64ad8","impliedFormat":99},{"version":"9bcecf0cbc2bfc17e33199864c19549905309a0f9ecc37871146107aac6e05ae","impliedFormat":99},{"version":"d6a211db4b4a821e93c978add57e484f2a003142a6aef9dbfa1fe990c66f337b","impliedFormat":99},{"version":"bd4d10bd44ce3f630dd9ce44f102422cb2814ead5711955aa537a52c8d2cae14","impliedFormat":99},{"version":"08e4c39ab1e52eea1e528ee597170480405716bae92ebe7a7c529f490afff1e0","impliedFormat":99},{"version":"625bb2bc3867557ea7912bd4581288a9fca4f3423b8dffa1d9ed57fafc8610e3","impliedFormat":99},{"version":"d1992164ecc334257e0bef56b1fd7e3e1cea649c70c64ffc39999bb480c0ecdf","impliedFormat":99},{"version":"a53ff2c4037481eb357e33b85e0d78e8236e285b6428b93aa286ceea1db2f5dc","impliedFormat":99},{"version":"4fe608d524954b6857d78857efce623852fcb0c155f010710656f9db86e973a5","impliedFormat":99},{"version":"b53b62a9838d3f57b70cc456093662302abb9962e5555f5def046172a4fe0d4e","impliedFormat":99},{"version":"9866369eb72b6e77be2a92589c9df9be1232a1a66e96736170819e8a1297b61f","impliedFormat":99},{"version":"43abfbdf4e297868d780b8f4cfdd8b781b90ecd9f588b05e845192146a86df34","impliedFormat":99},{"version":"582419791241fb851403ae4a08d0712a63d4c94787524a7419c2bc8e0eb1b031","impliedFormat":99},{"version":"18437eeb932fe48590b15f404090db0ab3b32d58f831d5ffc157f63b04885ee5","impliedFormat":99},{"version":"0c5eaedf622d7a8150f5c2ec1f79ac3d51eea1966b0b3e61bfdea35e8ca213a7","impliedFormat":99},{"version":"fac39fc7a9367c0246de3543a6ee866a0cf2e4c3a8f64641461c9f2dac0d8aae","impliedFormat":99},{"version":"3b9f559d0200134f3c196168630997caedeadc6733523c8b6076a09615d5dec8","impliedFormat":99},{"version":"932af64286d9723da5ef7b77a0c4229829ce8e085e6bcc5f874cb0b83e8310d4","impliedFormat":99},{"version":"adeb9278f11f5561157feee565171c72fd48f5fe34ed06f71abf24e561fcaa1e","impliedFormat":99},{"version":"2269fef79b4900fc6b08c840260622ca33524771ff24fda5b9101ad98ea551f3","impliedFormat":99},{"version":"73d47498a1b73d5392d40fb42a3e7b009ae900c8423f4088c4faa663cc508886","impliedFormat":99},{"version":"7efc34cdc4da0968c3ba687bc780d5cacde561915577d8d1c1e46c7ac931d023","impliedFormat":99},{"version":"3c20a3bb0c50c819419f44aa55acc58476dad4754a16884cef06012d02b0722f","impliedFormat":99},{"version":"4569abf6bc7d51a455503670f3f1c0e9b4f8632a3b030e0794c61bfbba2d13be","impliedFormat":99},{"version":"98b2297b4dc1404078a54b61758d8643e4c1d7830af724f3ed2445d77a7a2d57","impliedFormat":99},{"version":"952ba89d75f1b589e07070fea2d8174332e3028752e76fd46e1c16cc51e6e2af","impliedFormat":99},{"version":"b6c9a2deefb6a57ff68d2a38d33c34407b9939487fc9ee9f32ba3ecf2987a88a","impliedFormat":99},{"version":"f6b371377bab3018dac2bca63e27502ecbd5d06f708ad7e312658d3b5315d948","impliedFormat":99},{"version":"31947dd8f1c8eeb7841e1f139a493a73bd520f90e59a6415375d0d8e6a031f01","impliedFormat":99},{"version":"95cd83b807e10b1af408e62caf5fea98562221e8ddca9d7ccc053d482283ddda","impliedFormat":99},{"version":"19287d6b76288c2814f1633bdd68d2b76748757ffd355e73e41151644e4773d6","impliedFormat":99},{"version":"fc4e6ec7dade5f9d422b153c5d8f6ad074bd9cc4e280415b7dc58fb5c52b5df1","impliedFormat":99},{"version":"3aea973106e1184db82d8880f0ca134388b6cbc420f7309d1c8947b842886349","impliedFormat":99},{"version":"765e278c464923da94dda7c2b281ece92f58981642421ae097862effe2bd30fa","impliedFormat":99},{"version":"de260bed7f7d25593f59e859bd7c7f8c6e6bb87e8686a0fcafa3774cb5ca02d8","impliedFormat":99},{"version":"b5c341ce978f5777fbe05bc86f65e9906a492fa6b327bda3c6aae900c22e76c6","impliedFormat":99},{"version":"686ddbfaf88f06b02c6324005042f85317187866ca0f8f4c9584dd9479653344","impliedFormat":99},{"version":"7f789c0c1db29dd3aab6e159d1ba82894a046bf8df595ac48385931ae6ad83e0","impliedFormat":99},{"version":"8eb3057d4fe9b59b2492921b73a795a2455ebe94ccb3d01027a7866612ead137","impliedFormat":99},{"version":"1e43c5d7aee1c5ec20611e28b5417f5840c75d048de9d7f1800d6808499236f8","impliedFormat":99},{"version":"d42610a5a2bee4b71769968a24878885c9910cd049569daa2d2ee94208b3a7a5","impliedFormat":99},{"version":"f6ed95506a6ed2d40ed5425747529befaa4c35fcbbc1e0d793813f6d725690fa","impliedFormat":99},{"version":"a6fcc1cd6583939506c906dff1276e7ebdc38fbe12d3e108ba38ad231bd18d97","impliedFormat":99},{"version":"ed13354f0d96fb6d5878655b1fead51722b54875e91d5e53ef16de5b71a0e278","impliedFormat":99},{"version":"1193b4872c1fb65769d8b164ca48124c7ebacc33eae03abf52087c2b29e8c46c","impliedFormat":99},{"version":"af682dfabe85688289b420d939020a10eb61f0120e393d53c127f1968b3e9f66","impliedFormat":99},{"version":"0dca04006bf13f72240c6a6a502df9c0b49c41c3cab2be75e81e9b592dcd4ea8","impliedFormat":99},{"version":"79d6ac4a2a229047259116688f9cd62fda25422dee3ad304f77d7e9af53a41ef","impliedFormat":99},{"version":"64534c17173990dc4c3d9388d16675a059aac407031cfce8f7fdffa4ee2de988","impliedFormat":99},{"version":"ba46d160a192639f3ca9e5b640b870b1263f24ac77b6895ab42960937b42dcbb","impliedFormat":99},{"version":"5e5ddd6fc5b590190dde881974ab969455e7fad61012e32423415ae3d085b037","impliedFormat":99},{"version":"1c16fd00c42b60b96fe0fa62113a953af58ddf0d93b0a49cb4919cf5644616f0","impliedFormat":99},{"version":"eb240c0e6b412c57f7d9a9f1c6cd933642a929837c807b179a818f6e8d3a4e44","impliedFormat":99},{"version":"4a7bde5a1155107fc7d9483b8830099f1a6072b6afda5b78d91eb5d6549b3956","impliedFormat":99},{"version":"3c1baaffa9a24cc7ef9eea6b64742394498e0616b127ca630aca0e11e3298006","impliedFormat":99},{"version":"87ca1c31a326c898fa3feb99ec10750d775e1c84dbb7c4b37252bcf3742c7b21","impliedFormat":99},{"version":"d7bd26af1f5457f037225602035c2d7e876b80d02663ab4ca644099ad3a55888","impliedFormat":99},{"version":"2ad0a6b93e84a56b64f92f36a07de7ebcb910822f9a72ad22df5f5d642aff6f3","impliedFormat":99},{"version":"523d1775135260f53f672264937ee0f3dc42a92a39de8bee6c48c7ea60b50b5a","impliedFormat":99},{"version":"e441b9eebbc1284e5d995d99b53ed520b76a87cab512286651c4612d86cd408e","impliedFormat":99},{"version":"76f853ee21425c339a79d28e0859d74f2e53dee2e4919edafff6883dd7b7a80f","impliedFormat":99},{"version":"00cf042cd6ba1915648c8d6d2aa00e63bbbc300ea54d28ed087185f0f662e080","impliedFormat":99},{"version":"f57e6707d035ab89a03797d34faef37deefd3dd90aa17d90de2f33dce46a2c56","impliedFormat":99},{"version":"cc8b559b2cf9380ca72922c64576a43f000275c72042b2af2415ce0fb88d7077","impliedFormat":99},{"version":"1a337ca294c428ba8f2eb01e887b28d080ee4a4307ae87e02e468b1d26af4a74","impliedFormat":99},{"version":"5a15362fc2e72765a908c0d4dd89e3ab3b763e8bc8c23f19234a709ecfd202fe","impliedFormat":99},{"version":"2dffdfe62ac8af0943853234519616db6fd8958fc7ff631149fd8364e663f361","impliedFormat":99},{"version":"5dbdb2b2229b5547d8177c34705272da5a10b8d0033c49efbc9f6efba5e617f2","impliedFormat":99},{"version":"6fc0498cd8823d139004baff830343c9a0d210c687b2402c1384fb40f0aa461c","impliedFormat":99},{"version":"8492306a4864a1dc6fc7e0cc0de0ae9279cbd37f3aae3e9dc1065afcdc83dddc","impliedFormat":99},{"version":"c011b378127497d6337a93f020a05f726db2c30d55dc56d20e6a5090f05919a6","impliedFormat":99},{"version":"f4556979e95a274687ae206bbab2bb9a71c3ad923b92df241d9ab88c184b3f40","impliedFormat":99},{"version":"50e82bb6e238db008b5beba16d733b77e8b2a933c9152d1019cf8096845171a4","impliedFormat":99},{"version":"d6011f8b8bbf5163ef1e73588e64a53e8bf1f13533c375ec53e631aad95f1375","impliedFormat":99},{"version":"693cd7936ac7acfa026d4bcb5801fce71cec49835ba45c67af1ef90dbfd30af7","impliedFormat":99},{"version":"195e2cf684ecddfc1f6420564535d7c469f9611ce7a380d6e191811f84556cd2","impliedFormat":99},{"version":"1dc6b6e7b2a7f2962f31c77f4713f3a5a132bbe14c00db75d557568fe82e4311","impliedFormat":99},{"version":"add93b1180e9aaac2dae4ef3b16f7655893e2ecbe62bd9e48366c305f0063d89","impliedFormat":99},{"version":"594bd896fe37c970aafb7a376ebeec4c0d636b62a5f611e2e27d30fb839ad8a5","impliedFormat":99},{"version":"b1c6a6faf60542ba4b4271db045d7faea56e143b326ef507d2797815250f3afc","impliedFormat":99},{"version":"8c8b165beb794260f462679329b131419e9f5f35212de11c4d53e6d4d9cbedf6","impliedFormat":99},{"version":"ee5a4cf57d49fcf977249ab73c690a59995997c4672bb73fcaaf2eed65dbd1b2","impliedFormat":99},{"version":"f9f36051f138ab1c40b76b230c2a12b3ce6e1271179f4508da06a959f8bee4c1","impliedFormat":99},{"version":"9dc2011a3573d271a45c12656326530c0930f92539accbec3531d65131a14a14","impliedFormat":99},{"version":"091521ce3ede6747f784ae6f68ad2ea86bbda76b59d2bf678bcad2f9d141f629","impliedFormat":99},{"version":"202c2be951f53bafe943fb2c8d1245e35ed0e4dfed89f48c9a948e4d186dd6d4","impliedFormat":99},{"version":"c618aead1d799dbf4f5b28df5a6b9ce13d72722000a0ec3fe90a8115b1ea9226","impliedFormat":99},{"version":"9b0bf59708549c3e77fddd36530b95b55419414f88bbe5893f7bc8b534617973","impliedFormat":99},{"version":"7e216f67c4886f1bde564fb4eebdd6b185f262fe85ad1d6128cad9b229b10354","impliedFormat":99},{"version":"cd51e60b96b4d43698df74a665aa7a16604488193de86aa60ec0c44d9f114951","impliedFormat":99},{"version":"b63341fb6c7ba6f2aeabd9fc46b43e6cc2d2b9eec06534cfd583d9709f310ec2","impliedFormat":99},{"version":"be2af50c81b15bcfe54ad60f53eb1c72dae681c72d0a9dce1967825e1b5830a3","impliedFormat":99},{"version":"be5366845dfb9726f05005331b9b9645f237f1ddc594c0def851208e8b7d297b","impliedFormat":99},{"version":"5ddd536aaeadd4bf0f020492b3788ed209a7050ce27abec4e01c7563ff65da81","impliedFormat":99},{"version":"e243b24da119c1ef0d79af2a45217e50682b139cb48e7607efd66cc01bd9dcda","impliedFormat":99},{"version":"5b1398c8257fd180d0bf62e999fe0a89751c641e87089a83b24392efda720476","impliedFormat":99},{"version":"1588b1359f8507a16dbef67cd2759965fc2e8d305e5b3eb71be5aa9506277dff","impliedFormat":99},{"version":"4c99f2524eee1ec81356e2b4f67047a4b7efaf145f1c4eb530cd358c36784423","impliedFormat":99},{"version":"b30c6b9f6f30c35d6ef84daed1c3781e367f4360171b90598c02468b0db2fc3d","impliedFormat":99},{"version":"79c0d32274ccfd45fae74ac61d17a2be27aea74c70806d22c43fc625b7e9f12a","impliedFormat":99},{"version":"1b7e3958f668063c9d24ac75279f3e610755b0f49b1c02bb3b1c232deb958f54","impliedFormat":99},{"version":"779d4022c3d0a4df070f94858a33d9ebf54af3664754536c4ce9fd37c6f4a8db","impliedFormat":99},{"version":"e662f063d46aa8c088edffdf1d96cb13d9a2cbf06bc38dc6fc62b4d125fb7b49","impliedFormat":99},{"version":"d1d612df1e41c90d9678b07740d13d4f8e6acec2f17390d4ff4be5c889a6d37d","impliedFormat":99},{"version":"c95933fe140918892d569186f17b70ef6b1162f851a0f13f6a89e8f4d599c5a1","impliedFormat":99},{"version":"1d8d30677f87c13c2786980a80750ac1e281bdb65aa013ea193766fe9f0edd74","impliedFormat":99},{"version":"4661673cbc984b8a6ee5e14875a71ed529b64e7f8e347e12c0db4cecc25ad67d","impliedFormat":99},{"version":"7f980a414274f0f23658baa9a16e21d828535f9eac538e2eab2bb965325841db","impliedFormat":99},{"version":"20fb747a339d3c1d4a032a31881d0c65695f8167575e01f222df98791a65da9b","impliedFormat":99},{"version":"dd4e7ebd3f205a11becf1157422f98db675a626243d2fbd123b8b93efe5fb505","impliedFormat":99},{"version":"43ec6b74c8d31e88bb6947bb256ad78e5c6c435cbbbad991c3ff39315b1a3dba","impliedFormat":99},{"version":"b27242dd3af2a5548d0c7231db7da63d6373636d6c4e72d9b616adaa2acef7e1","impliedFormat":99},{"version":"e0ee7ba0571b83c53a3d6ec761cf391e7128d8f8f590f8832c28661b73c21b68","impliedFormat":99},{"version":"072bfd97fc61c894ef260723f43a416d49ebd8b703696f647c8322671c598873","impliedFormat":99},{"version":"e70875232f5d5528f1650dd6f5c94a5bed344ecf04bdbb998f7f78a3c1317d02","impliedFormat":99},{"version":"8e495129cb6cd8008de6f4ff8ce34fe1302a9e0dcff8d13714bd5593be3f7898","impliedFormat":99},"58719b3cc5573083dd92d6a0a84cf5adb14b5f667eee5792ecea78bca4dc519a","82403231e33fd3d45b111e5e819df194cdfa7cef9a726770185724a60bd20932",{"version":"a9373d52584b48809ffd61d74f5b3dfd127da846e3c4ee3c415560386df3994b","impliedFormat":99},{"version":"caf4af98bf464ad3e10c46cf7d340556f89197aab0f87f032c7b84eb8ddb24d9","impliedFormat":99},{"version":"7ec047b73f621c526468517fea779fec2007dd05baa880989def59126c98ef79","impliedFormat":99},{"version":"8dd450de6d756cee0761f277c6dc58b0b5a66b8c274b980949318b8cad26d712","impliedFormat":99},{"version":"904d6ad970b6bd825449480488a73d9b98432357ab38cf8d31ffd651ae376ff5","impliedFormat":99},{"version":"dfcf16e716338e9fe8cf790ac7756f61c85b83b699861df970661e97bf482692","impliedFormat":99},{"version":"1ae50a613547ec947e11207752a17137ee7e778c07ccb5341ce38010cd1ded72","impliedFormat":1},"3d6a560c635fd91094e43191ecf73b124ccb2537e6060f85d5d31fcf68150e74","89b253669dbd7dc811a1d4f6135686945f4af31212647f6ce2d6f1593f960e0d","991f8677b0ac277018b73b962c67b5558674da4f92a5895e1d636a29db11c9ab","d2caf93c35499bc58e97f8cddd1d9b4c740d4995da8b8b64544255a009131ca4","2d5ea8489f78767680cc0c4424a549e534a384c7d3a4133d416668a06400bd86","749e08a53dcfebbb071a1f90026bd66e0d291cc83742d173f9f9433540caa322","78cdb63dff3ec7ef074ada630ff20a5d8004768b6cbe24ed134a8bfba12bafbb",{"version":"8085954ba165e611c6230596078063627f3656fed3fb68ad1e36a414c4d7599a","impliedFormat":99},"e8672934f1c315f36cdae39380454ba8c2da62aca420dfb827d96693091419c4","f41c11fc13e9a1f1b849349cb51b137ddd27de0a17c5339675c789d58f556cc4","3043afb24b7ae9a93479f626d0fb6a0f73d3e6376f098a43d427413243b1aab5",{"version":"2c57db2bf2dbd9e8ef4853be7257d62a1cb72845f7b976bb4ee827d362675f96","impliedFormat":99},"4c395ef15549e46068eb3b32a2a10fb5bfdb01f6834a3c0231a218a529015c83","75ce6d9cb637e33127ae42456e53b63c59f7c78f90a18fc746ec5cb5836e0e5b","deb87a3665b55e5cf48c9636d637217e32b0aacde0614f7da28258d8dc714811","c6cd5e39c36e5f40b6a215f07c1ae81c02b6308d6b5ac4ec3da6fa3948e11d10",{"version":"78ac5fb99fcb823f2a35e22b3df9618b7a02c62e3447c6cbb8c9f61e08a2303f","signature":"27be486b3089794ca3f95962f91e545198bde2f5fc43d1bc62511c5518dd079b"},"dc7137ea23e037c2354fae1d524033d6374a8688c20a135fad98051825580081",{"version":"fe93c474ab38ac02e30e3af073412b4f92b740152cf3a751fdaee8cbea982341","impliedFormat":1},{"version":"c60093e32612d44af7042c3eb457c616aec3deee748a5a1eb1a6188e3d837f5c","impliedFormat":1},{"version":"1e00b8bf9e3766c958218cd6144ffe08418286f89ff44ba5a2cc830c03dd22c7","impliedFormat":1},"46fe42bf0169b003509fee3a01b495e05a3f11134c035e62dd7037392b9aa585","0f85cd3588f3b06a7950a666a017ebfff38efb9a64be24e802597426abd95e1c",{"version":"6b5f886fe41e2e767168e491fe6048398ed6439d44e006d9f51cc31265f08978","impliedFormat":99},{"version":"56a87e37f91f5625eb7d5f8394904f3f1e2a90fb08f347161dc94f1ae586bdd0","impliedFormat":99},{"version":"6b863463764ae572b9ada405bf77aac37b5e5089a3ab420d0862e4471051393b","impliedFormat":99},{"version":"1179ef8174e0e4a09d35576199df04803b1db17c0fb35b9326442884bc0b0cce","impliedFormat":99},"8795c9fac7c48d565ff6c47cbf4cca8bfefe25d8cb3d7e7aeba36855739a76ab","8bc3f6d77d7632051ae9cd7f769b6b275fc27af9a0c5d3fc7b6b97d3437e2901","361c3d0209b0e1a6abe105cfc3e4d992af72bd387dca18514db306eed4338479","9f420be0055df9161696bfe13ff676f4dabceba57622514008f482a4deead4f2","1b84ed4bade0c3cbadcd928004100f56ef57fdf4b8914cb62cf99e41408bd33c",{"version":"cc3738ba01d9af5ba1206a313896837ff8779791afcd9869e582783550f17f38","impliedFormat":99},"55140ef92c201c82d530dede076603611fbfb2cdc899e4d8459b58f6cbb2b235","1c79881abe123bf6618a4a7a5436d60896cb75e3ef78a9da8d9faf0aea77a353","a7ca0e7f1e535b4ac1aa17fc2098799538721f638cacc54a577d95c8baf00000","9f21a03e3df0592b2951abd422f183d61b5fea8cd9a9cb3ca3d0a4fd821ff42e","88b78ba15ed3cfc799039df10a7bbbf2c1d9a20318f1adf5afa2e00367a9ae86","5a5a15590078ad9ab4f213679d8d84c3ff5d33d34025b4e8394fbca3ac3975af","75c523386a4ce9d0380fe3e10a45eda1620bb61a53f1aedcad0ff7046085c63e","491a87bfae8f28773624d353bf56b9288d0852413e814d508e0d086dc7b06edb",{"version":"68b6a7501a56babd7bcd840e0d638ee7ec582f1e70b3c36ebf32e5e5836913c8","impliedFormat":99},{"version":"7a14bf21ae8a29d64c42173c08f026928daf418bed1b97b37ac4bb2aa197b89b","impliedFormat":99},"e8469e599381cf021ce751c27cca3d8cb06440a45665ca9c2ef2efb0acef1fd9","7b6d28e94940a03e065e140880808af034ae6b1526d37e6ef3cccc0076595836","b4664f8eb81602cd3b18621ec24829f6b470ea09e68f39db09af114c5528e276","64e6907678b57140a67978f61492b7e64ca54bd7d63ae9ca22b898f5ad93bffe","272dd9b3c25477017595983aedb0a7b733d218227e4442e4a814e8c203909669","7daf7aa0b5fdd5dd81b6aaf84b8487fe36b2141b46e864f3cdab447919b7289c",{"version":"2535fc1a5fe64892783ff8f61321b181c24f824e688a4a05ae738da33466605b","impliedFormat":99},"29a217781737bbf5c430859b3de46097a44ada81c4143c2d05543d2167de0ee1",{"version":"151ff381ef9ff8da2da9b9663ebf657eac35c4c9a19183420c05728f31a6761d","impliedFormat":1},{"version":"f3d8c757e148ad968f0d98697987db363070abada5f503da3c06aefd9d4248c1","impliedFormat":1},{"version":"96d14f21b7652903852eef49379d04dbda28c16ed36468f8c9fa08f7c14c9538","impliedFormat":1}],"root":[[474,476],481,746,747,[755,761],[763,765],[767,772],776,777,[782,786],[788,795],[798,803],805],"options":{"allowJs":true,"esModuleInterop":true,"jsx":1,"module":99,"skipLibCheck":true,"strict":true,"target":4},"referencedMap":[[474,1],[476,2],[418,3],[778,4],[762,5],[766,6],[748,7],[753,8],[750,4],[751,4],[804,9],[780,10],[752,4],[749,7],[796,5],[781,9],[787,5],[482,7],[797,11],[779,3],[806,3],[807,3],[808,3],[136,12],[137,12],[138,13],[97,14],[139,15],[140,16],[141,17],[92,3],[95,18],[93,3],[94,3],[142,19],[143,20],[144,21],[145,22],[146,23],[147,24],[148,24],[150,3],[149,25],[151,26],[152,27],[153,28],[135,29],[96,3],[154,30],[155,31],[156,32],[188,33],[157,34],[158,35],[159,36],[160,37],[161,38],[162,39],[163,40],[164,41],[165,42],[166,43],[167,43],[168,44],[169,3],[170,45],[172,46],[171,47],[173,48],[174,49],[175,50],[176,51],[177,52],[178,53],[179,54],[180,55],[181,56],[182,57],[183,58],[184,59],[185,60],[186,61],[187,62],[192,63],[193,64],[191,7],[189,65],[190,66],[81,3],[83,67],[265,7],[485,68],[484,69],[483,3],[486,3],[82,3],[576,70],[555,71],[652,3],[556,72],[492,70],[493,70],[494,70],[495,70],[496,70],[497,70],[498,70],[499,70],[500,70],[501,70],[502,70],[503,70],[504,70],[505,70],[506,70],[507,70],[508,70],[509,70],[488,3],[510,70],[511,70],[512,3],[513,70],[514,70],[515,70],[516,70],[517,70],[518,70],[519,70],[520,70],[521,70],[522,70],[523,70],[524,70],[525,70],[526,70],[527,70],[528,70],[529,70],[530,70],[531,70],[532,70],[533,70],[534,70],[535,70],[536,70],[537,70],[538,70],[539,70],[540,70],[541,70],[542,70],[543,70],[544,70],[545,70],[546,70],[547,70],[548,70],[549,70],[550,70],[551,70],[552,70],[553,70],[554,70],[557,73],[558,70],[559,70],[560,74],[561,75],[562,70],[563,70],[564,70],[565,70],[566,70],[567,70],[568,70],[490,3],[569,70],[570,70],[571,70],[572,70],[573,70],[574,70],[575,70],[577,76],[578,70],[579,70],[580,70],[581,70],[582,70],[583,70],[584,70],[585,70],[586,70],[587,70],[588,70],[589,70],[590,70],[591,70],[592,70],[593,70],[594,70],[595,70],[596,3],[597,3],[598,3],[745,77],[599,70],[600,70],[601,70],[602,70],[603,70],[604,70],[605,3],[606,70],[607,3],[608,70],[609,70],[610,70],[611,70],[612,70],[613,70],[614,70],[615,70],[616,70],[617,70],[618,70],[619,70],[620,70],[621,70],[622,70],[623,70],[624,70],[625,70],[626,70],[627,70],[628,70],[629,70],[630,70],[631,70],[632,70],[633,70],[634,70],[635,70],[636,70],[637,70],[638,70],[639,70],[640,3],[641,70],[642,70],[643,70],[644,70],[645,70],[646,70],[647,70],[648,70],[649,70],[650,70],[651,70],[653,78],[489,70],[654,70],[655,70],[656,3],[657,3],[658,3],[659,70],[660,3],[661,3],[662,3],[663,3],[664,3],[665,70],[666,70],[667,70],[668,70],[669,70],[670,70],[671,70],[672,70],[677,79],[675,80],[674,81],[676,82],[673,70],[678,70],[679,70],[680,70],[681,70],[682,70],[683,70],[684,70],[685,70],[686,70],[687,70],[688,3],[689,3],[690,70],[691,70],[692,3],[693,3],[694,3],[695,70],[696,70],[697,70],[698,70],[699,76],[700,70],[701,70],[702,70],[703,70],[704,70],[705,70],[706,70],[707,70],[708,70],[709,70],[710,70],[711,70],[712,70],[713,70],[714,70],[715,70],[716,70],[717,70],[718,70],[719,70],[720,70],[721,70],[722,70],[723,70],[724,70],[725,70],[726,70],[727,70],[728,70],[729,70],[730,70],[731,70],[732,70],[733,70],[734,70],[735,70],[736,70],[737,70],[738,70],[739,70],[740,70],[491,83],[741,3],[742,3],[743,3],[744,3],[754,7],[90,84],[421,85],[426,86],[428,87],[214,88],[369,89],[396,90],[225,3],[206,3],[212,3],[358,91],[293,92],[213,3],[359,93],[398,94],[399,95],[346,96],[355,97],[263,98],[363,99],[364,100],[362,101],[361,3],[360,102],[397,103],[215,104],[300,3],[301,105],[210,3],[226,106],[216,107],[238,106],[269,106],[199,106],[368,108],[378,3],[205,3],[324,109],[325,110],[319,111],[449,3],[327,3],[328,111],[320,112],[340,7],[454,113],[453,114],[448,3],[266,115],[401,3],[354,116],[353,3],[447,117],[321,7],[241,118],[239,119],[450,3],[452,120],[451,3],[240,121],[442,122],[445,123],[250,124],[249,125],[248,126],[457,7],[247,127],[288,3],[460,3],[774,128],[773,3],[463,3],[462,7],[464,129],[195,3],[365,130],[366,131],[367,132],[390,3],[204,133],[194,3],[197,134],[339,135],[338,136],[329,3],[330,3],[337,3],[332,3],[335,137],[331,3],[333,138],[336,139],[334,138],[211,3],[202,3],[203,106],[420,140],[429,141],[433,142],[372,143],[371,3],[284,3],[465,144],[381,145],[322,146],[323,147],[316,148],[306,3],[314,3],[315,149],[344,150],[307,151],[345,152],[342,153],[341,3],[343,3],[297,154],[373,155],[374,156],[308,157],[312,158],[304,159],[350,160],[380,161],[383,162],[286,163],[200,164],[379,165],[196,90],[402,3],[403,166],[414,167],[400,3],[413,168],[91,3],[388,169],[272,3],[302,170],[384,3],[201,3],[233,3],[412,171],[209,3],[275,172],[311,173],[370,174],[310,3],[411,3],[405,175],[406,176],[207,3],[408,177],[409,178],[391,3],[410,164],[231,179],[389,180],[415,181],[218,3],[221,3],[219,3],[223,3],[220,3],[222,3],[224,182],[217,3],[278,183],[277,3],[283,184],[279,185],[282,186],[281,186],[285,184],[280,185],[237,187],[267,188],[377,189],[467,3],[437,190],[439,191],[309,3],[438,192],[375,155],[466,193],[326,155],[208,3],[268,194],[234,195],[235,196],[236,197],[232,198],[349,198],[244,198],[270,199],[245,199],[228,200],[227,3],[276,201],[274,202],[273,203],[271,204],[376,205],[348,206],[347,207],[318,208],[357,209],[356,210],[352,211],[262,212],[264,213],[261,214],[229,215],[296,3],[425,3],[295,216],[351,3],[287,217],[305,130],[303,218],[289,219],[291,220],[461,3],[290,221],[292,221],[423,3],[422,3],[424,3],[459,3],[294,222],[259,7],[89,3],[242,223],[251,3],[299,224],[230,3],[431,7],[441,225],[258,7],[435,111],[257,226],[417,227],[256,225],[198,3],[443,228],[254,7],[255,7],[246,3],[298,3],[253,229],[252,230],[243,231],[313,42],[382,42],[407,3],[386,232],[385,3],[427,3],[260,7],[317,7],[419,233],[84,7],[87,234],[88,235],[85,7],[86,3],[404,236],[395,237],[394,3],[393,238],[392,3],[416,239],[430,240],[432,241],[434,242],[775,243],[436,244],[440,245],[473,246],[444,246],[472,247],[446,248],[455,249],[456,250],[458,251],[468,252],[471,133],[470,3],[469,253],[387,254],[487,3],[477,3],[480,255],[478,256],[479,257],[79,3],[80,3],[13,3],[14,3],[16,3],[15,3],[2,3],[17,3],[18,3],[19,3],[20,3],[21,3],[22,3],[23,3],[24,3],[3,3],[25,3],[26,3],[4,3],[27,3],[31,3],[28,3],[29,3],[30,3],[32,3],[33,3],[34,3],[5,3],[35,3],[36,3],[37,3],[38,3],[6,3],[42,3],[39,3],[40,3],[41,3],[43,3],[7,3],[44,3],[49,3],[50,3],[45,3],[46,3],[47,3],[48,3],[8,3],[54,3],[51,3],[52,3],[53,3],[55,3],[9,3],[56,3],[57,3],[58,3],[60,3],[59,3],[61,3],[62,3],[10,3],[63,3],[64,3],[65,3],[11,3],[66,3],[67,3],[68,3],[69,3],[70,3],[1,3],[71,3],[72,3],[12,3],[76,3],[74,3],[78,3],[73,3],[77,3],[75,3],[113,258],[123,259],[112,258],[133,260],[104,261],[103,262],[132,253],[126,263],[131,264],[106,265],[120,266],[105,267],[129,268],[101,269],[100,253],[130,270],[102,271],[107,272],[108,3],[111,272],[98,3],[134,273],[124,274],[115,275],[116,276],[118,277],[114,278],[117,279],[127,253],[109,280],[110,281],[119,282],[99,283],[122,274],[121,272],[125,3],[128,284],[794,285],[792,286],[802,287],[800,288],[776,289],[777,290],[803,291],[759,292],[758,293],[756,7],[757,294],[763,295],[764,296],[747,296],[761,297],[767,298],[786,299],[795,300],[785,297],[793,297],[783,301],[805,302],[782,303],[799,297],[755,300],[788,304],[801,297],[798,305],[784,306],[791,307],[765,308],[789,309],[768,310],[790,311],[769,312],[770,313],[771,3],[772,314],[746,315],[760,3],[475,3],[481,316]],"affectedFilesPendingEmit":[476,794,792,802,800,776,777,803,759,758,756,757,763,764,747,761,767,786,795,785,793,783,805,782,799,755,788,801,798,784,791,765,789,768,790,769,770,771,772,746,760,481],"version":"5.8.3"}



================================================
File: src/app/globals.css
================================================
@import "tailwindcss";
@import "tw-animate-css";

@theme {
  --font-sans: var(--font-satoshi);
  --font-mono: var(--font-geist-mono);
  
  /* Iridium & Photon Color System */
  --color-iridium-50: #f8fafc;
  --color-iridium-100: #f1f5f9;
  --color-iridium-200: #e2e8f0;
  --color-iridium-300: #cbd5e1;
  --color-iridium-400: #94a3b8;
  --color-iridium-500: #64748b;
  --color-iridium-600: #475569;
  --color-iridium-700: #334155;
  --color-iridium-800: #1e293b;
  --color-iridium-900: #0f172a;
  --color-iridium-950: #020617;
  
  --color-photon-50: #f0fdff;
  --color-photon-100: #ccf7fe;
  --color-photon-200: #99effd;
  --color-photon-300: #66e7fc;
  --color-photon-400: #06d6f7;
  --color-photon-500: #00bcd4;
  --color-photon-600: #0891b2;
  --color-photon-700: #0e7490;
  --color-photon-800: #155e75;
  --color-photon-900: #164e63;
  --color-photon-950: #083344;
  
  /* Semantic Colors - Dark Theme First */
  --color-background: #020617;
  --color-foreground: #e2e8f0;
  --color-card: #0f172a;
  --color-card-foreground: #e2e8f0;
  --color-popover: #0f172a;
  --color-popover-foreground: #e2e8f0;
  --color-primary: #00bcd4;
  --color-primary-foreground: #020617;
  --color-secondary: #1e293b;
  --color-secondary-foreground: #f1f5f9;
  --color-muted: #1e293b;
  --color-muted-foreground: #94a3b8;
  --color-accent: #00bcd4;
  --color-accent-foreground: #020617;
  --color-destructive: #ef4444;
  --color-destructive-foreground: #f8fafc;
  --color-border: #334155;
  --color-input: #334155;
  --color-ring: #00bcd4;
  
  /* Border Radius */
  --radius: 0.5rem;
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  
  /* Animations */
  --animate-accordion-down: accordion-down 0.2s ease-out;
  --animate-accordion-up: accordion-up 0.2s ease-out;
  --animate-spin-slow: spin 10s linear infinite;
  --animate-pulse-glow: pulse-glow 2s ease-in-out infinite;
  
  /* Keyframes */
  --keyframes-accordion-down: 0% { height: 0 } 100% { height: var(--radix-accordion-content-height) };
  --keyframes-accordion-up: 0% { height: var(--radix-accordion-content-height) } 100% { height: 0 };
  --keyframes-spin-slow: 0% { transform: rotate(0deg) } 100% { transform: rotate(360deg) };
  --keyframes-pulse-glow: 0%, 100% { box-shadow: 0 0 20px rgba(0, 188, 212, 0.3) } 50% { box-shadow: 0 0 40px rgba(0, 188, 212, 0.6) };
}

@layer base {
  * {
    @apply border-border;
    @apply min-w-0;
  }
  
  html {
    @apply h-full;
  }
  
  body {
    @apply h-full bg-background text-foreground font-sans antialiased;
    font-feature-settings: 'rlig' 1, 'calt' 1;
  }
  
  /* Selection */
  ::selection {
    @apply bg-photon-400 text-black;
  }
  
  /* Focus */
  *:focus-visible {
    @apply outline outline-2 outline-offset-2 outline-photon-500;
  }
  
  /* Pylons.ai Typography System */
  h1 {
    @apply font-mono font-bold text-4xl lg:text-6xl;
    @apply bg-gradient-to-br from-white via-photon-200 to-photon-400;
    @apply bg-clip-text text-transparent;
    line-height: 1.1;
    letter-spacing: -0.02em;
  }

  h2 {
    @apply font-mono font-semibold text-2xl lg:text-4xl;
    @apply bg-gradient-to-r from-white to-iridium-300;
    @apply bg-clip-text text-transparent;
    line-height: 1.2;
    letter-spacing: -0.01em;
  }

  h3 {
    @apply font-mono font-semibold text-xl lg:text-2xl text-photon-300;
    line-height: 1.3;
  }

  h4 {
    @apply font-mono font-medium text-lg text-photon-400;
    line-height: 1.4;
  }

  p {
    @apply font-sans text-base text-iridium-300 leading-relaxed;
  }

  /* Gradient Text Utilities */
  .text-gradient-primary {
    @apply bg-gradient-to-r from-photon-400 via-photon-300 to-photon-500;
    @apply bg-clip-text text-transparent;
  }

  .text-gradient-secondary {
    @apply bg-gradient-to-r from-iridium-200 to-iridium-400;
    @apply bg-clip-text text-transparent;
  }

  /* Custom Scrollbar */
  ::-webkit-scrollbar {
    width: 8px;
  }

  ::-webkit-scrollbar-track {
    @apply bg-iridium-900;
  }

  ::-webkit-scrollbar-thumb {
    @apply bg-iridium-600 rounded-full;
  }

  ::-webkit-scrollbar-thumb:hover {
    @apply bg-photon-600;
  }
  
  /* Button Animations */
  .btn-glow {
    @apply transition-all duration-300;
    @apply hover:shadow-lg hover:shadow-photon-500/25;
  }
  
  .btn-glow:hover {
    animation: pulse-glow 2s ease-in-out infinite;
  }
}



================================================
File: src/app/layout.tsx
================================================
import type { Metadata } from "next";
import { Inter, JetBrains_Mono } from "next/font/google";
import "./globals.css";

// Temporary fallback fonts until actual Geist Mono and Satoshi files are added
const inter = Inter({
  variable: "--font-satoshi",
  subsets: ["latin"],
  display: "swap",
});

const jetbrainsMono = JetBrains_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
  display: "swap",
});

// TODO: Replace with actual local fonts when available:
// const geistMono = localFont({
//   src: './fonts/GeistMono-Variable.woff2',
//   variable: '--font-geist-mono',
//   display: 'swap',
// });

// const satoshi = localFont({
//   src: './fonts/Satoshi-Variable.woff2',
//   variable: '--font-satoshi',
//   display: 'swap',
// });

export const metadata: Metadata = {
  title: "AdMind By Saif",
  description: "Modern design system with Iridium & Photon color palette, featuring dark-first approach and professional typography.",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" className="dark" suppressHydrationWarning>
      <body
        className={`${inter.variable} ${jetbrainsMono.variable} font-sans antialiased`}
      >
        {children}
      </body>
    </html>
  );
}



================================================
File: src/app/page.tsx
================================================
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { DashboardLayout } from "@/components/dashboard";
import { 
  TrendingUp, 
  Users, 
  Target, 
  DollarSign,
  Eye,
  MousePointer,
  BarChart3,
  Activity,
  Plus,
  ExternalLink
} from "lucide-react";

const stats = [
  {
    title: "Total Ad Campaigns",
    value: "2,847",
    change: "+12.5%",
    changeType: "increase" as const,
    icon: Target,
  },
  {
    title: "Ad Spend",
    value: "$45,231",
    change: "+8.2%",
    changeType: "increase" as const,
    icon: DollarSign,
  },
  {
    title: "Impressions",
    value: "1.2M",
    change: "+15.3%",
    changeType: "increase" as const,
    icon: Eye,
  },
  {
    title: "Click-through Rate",
    value: "3.24%",
    change: "-2.1%",
    changeType: "decrease" as const,
    icon: MousePointer,
  },
];

const recentActivity = [
  {
    title: "New competitor analysis completed",
    description: "Analysis for Nike Spring Campaign 2024",
    time: "2 hours ago",
    type: "analysis"
  },
  {
    title: "High-performing ad detected",
    description: "Adidas video ad with 12.3% CTR",
    time: "4 hours ago",
    type: "alert"
  },
  {
    title: "Weekly report generated",
    description: "Performance summary for March 2024",
    time: "1 day ago",
    type: "report"
  },
  {
    title: "New trend identified",
    description: "Gaming ads showing 45% increase in engagement",
    time: "2 days ago",
    type: "trend"
  }
];

export default function Dashboard() {
  return (
    <DashboardLayout>
      <div className="space-y-8">
        {/* Header */}
        <div className="flex flex-col space-y-4 md:flex-row md:items-center md:justify-between md:space-y-0">
          <div>
            <h1 className="text-3xl font-bold">Ad Intelligence Dashboard</h1>
            <p className="text-muted-foreground">
              Monitor your campaigns and discover winning strategies from competitors
            </p>
          </div>
          <div className="flex gap-3">
            <Button variant="outline" asChild>
              <Link href="/competitors">
                <Target className="mr-2 h-4 w-4" />
                Competitors
              </Link>
            </Button>
            <Button variant="outline" asChild>
              <Link href="/ads">
                <BarChart3 className="mr-2 h-4 w-4" />
                View Ads
              </Link>
            </Button>
            <Button>
              <TrendingUp className="mr-2 h-4 w-4" />
              Analyze Trends
            </Button>
          </div>
        </div>

        {/* Stats Grid */}
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
          {stats.map((stat) => (
            <Card key={stat.title} className="relative overflow-hidden">
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium text-muted-foreground">
                  {stat.title}
                </CardTitle>
                <stat.icon className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{stat.value}</div>
                <p className={`text-xs ${
                  stat.changeType === 'increase' 
                    ? 'text-green-400' 
                    : 'text-red-400'
                }`}>
                  {stat.change} from last month
                </p>
              </CardContent>
              <div className="absolute inset-x-0 bottom-0 h-1 bg-gradient-to-r from-photon-500 to-photon-400" />
            </Card>
          ))}
        </div>

        {/* Quick Access Section */}
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          <Card className="border-2 border-primary/20 bg-gradient-to-br from-primary/5 to-primary/10">
            <CardHeader className="pb-3">
              <CardTitle className="flex items-center gap-2 text-primary">
                <Target className="h-5 w-5" />
                Competitors Hub
              </CardTitle>
              <CardDescription>
                Manage and analyze your competitors
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-3">
              <div className="flex items-center justify-between text-sm">
                <span className="text-muted-foreground">Active Competitors</span>
                <span className="font-medium">5</span>
              </div>
              <div className="flex items-center justify-between text-sm">
                <span className="text-muted-foreground">Total Ads Tracked</span>
                <span className="font-medium">1,247</span>
              </div>
              <div className="flex gap-2 pt-2">
                <Button size="sm" className="flex-1" asChild>
                  <Link href="/competitors">
                    <ExternalLink className="mr-2 h-4 w-4" />
                    View All
                  </Link>
                </Button>
                <Button size="sm" variant="outline" className="flex-1" asChild>
                  <Link href="/competitors">
                    <Plus className="mr-2 h-4 w-4" />
                    Add New
                  </Link>
                </Button>
              </div>
            </CardContent>
          </Card>

          <Card className="border-2 border-orange-500/20 bg-gradient-to-br from-orange-500/5 to-orange-500/10">
            <CardHeader className="pb-3">
              <CardTitle className="flex items-center gap-2 text-orange-600">
                <BarChart3 className="h-5 w-5" />
                Ad Intelligence
              </CardTitle>
              <CardDescription>
                Discover winning ad strategies
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-3">
              <div className="flex items-center justify-between text-sm">
                <span className="text-muted-foreground">Analyzed Ads</span>
                <span className="font-medium">432</span>
              </div>
              <div className="flex items-center justify-between text-sm">
                <span className="text-muted-foreground">Top Performing</span>
                <span className="font-medium">89</span>
              </div>
              <div className="flex gap-2 pt-2">
                <Button size="sm" variant="outline" className="flex-1" asChild>
                  <Link href="/ads">
                    <ExternalLink className="mr-2 h-4 w-4" />
                    Browse Ads
                  </Link>
                </Button>
                <Button size="sm" variant="outline" className="flex-1" asChild>
                  <Link href="/ads">
                    <BarChart3 className="mr-2 h-4 w-4" />
                    Analyze
                  </Link>
                </Button>
              </div>
            </CardContent>
          </Card>

          <Card className="border-2 border-green-500/20 bg-gradient-to-br from-green-500/5 to-green-500/10">
            <CardHeader className="pb-3">
              <CardTitle className="flex items-center gap-2 text-green-600">
                <TrendingUp className="h-5 w-5" />
                Trending Insights
              </CardTitle>
              <CardDescription>
                Latest market trends and opportunities
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-3">
              <div className="flex items-center justify-between text-sm">
                <span className="text-muted-foreground">New Trends</span>
                <span className="font-medium">12</span>
              </div>
              <div className="flex items-center justify-between text-sm">
                <span className="text-muted-foreground">Hot Keywords</span>
                <span className="font-medium">47</span>
              </div>
              <div className="flex gap-2 pt-2">
                <Button size="sm" variant="outline" className="flex-1" asChild>
                  <Link href="/trends">
                    <ExternalLink className="mr-2 h-4 w-4" />
                    View Trends
                  </Link>
                </Button>
                <Button size="sm" variant="outline" className="flex-1" asChild>
                  <Link href="/search">
                    <Eye className="mr-2 h-4 w-4" />
                    Search
                  </Link>
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Main Content Grid */}
        <div className="grid gap-6 lg:grid-cols-3">
          {/* Chart Placeholder */}
          <Card className="lg:col-span-2">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Activity className="h-5 w-5 text-photon-400" />
                Performance Overview
              </CardTitle>
              <CardDescription>
                Campaign performance trends over the last 30 days
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-80 flex items-center justify-center bg-gradient-to-br from-iridium-900/20 to-photon-900/10 rounded-lg border border-border/50">
                <div className="text-center space-y-4">
                  <div className="h-16 w-16 rounded-full bg-gradient-to-br from-photon-400 to-photon-600 flex items-center justify-center mx-auto">
                    <BarChart3 className="h-8 w-8 text-white" />
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold">Chart Integration Ready</h3>
                    <p className="text-sm text-muted-foreground">
                      Connect your analytics to see real-time data visualization
                    </p>
                  </div>
                  <Button size="sm" className="btn-glow">
                    Configure Charts
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Recent Activity */}
          <Card>
            <CardHeader>
              <CardTitle>Recent Activity</CardTitle>
              <CardDescription>
                Latest insights and alerts from your campaigns
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {recentActivity.map((activity, index) => (
                <div key={index} className="flex gap-3">
                  <div className="h-2 w-2 rounded-full bg-photon-400 mt-2 flex-shrink-0" />
                  <div className="space-y-1">
                    <p className="text-sm font-medium leading-none">
                      {activity.title}
                    </p>
                    <p className="text-xs text-muted-foreground">
                      {activity.description}
                    </p>
                    <p className="text-xs text-muted-foreground">
                      {activity.time}
                    </p>
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>
        </div>

        {/* Bottom Section */}
        <div className="grid gap-6 md:grid-cols-2">
          <Card>
            <CardHeader>
              <CardTitle className="text-gradient-primary flex items-center gap-2">
                <Target className="h-5 w-5" />
                Top Performing Ads
              </CardTitle>
              <CardDescription>
                AI-powered insights from your Ad Intelligence platform
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                <div className="flex items-center gap-3 p-3 rounded-lg bg-gradient-to-r from-photon-500/10 to-photon-400/5 border border-photon-500/20">
                  <div className="h-12 w-12 rounded bg-gradient-to-br from-photon-400 to-photon-600 flex items-center justify-center">
                    <Target className="h-6 w-6 text-white" />
                  </div>
                  <div className="flex-1">
                    <p className="font-medium text-sm">High-Performing Tech Ad</p>
                    <p className="text-xs text-muted-foreground">AI Score: 9.2/10</p>
                  </div>
                  <div className="text-right">
                    <p className="text-xs text-photon-400 font-mono">$2,400 spend</p>
                    <p className="text-xs text-muted-foreground">Active</p>
                  </div>
                </div>
                <div className="flex items-center gap-3 p-3 rounded-lg bg-muted/20 border border-border/50">
                  <div className="h-12 w-12 rounded bg-gradient-to-br from-photon-400/20 to-photon-600/20 flex items-center justify-center">
                    <Target className="h-6 w-6 text-photon-400" />
                  </div>
                  <div className="flex-1">
                    <p className="font-medium text-sm">Fashion Campaign 2024</p>
                    <p className="text-xs text-muted-foreground">AI Score: 8.7/10</p>
                  </div>
                  <div className="text-right">
                    <p className="text-xs text-muted-foreground font-mono">$1,800 spend</p>
                    <p className="text-xs text-muted-foreground">Active</p>
                  </div>
                </div>
                <div className="flex items-center gap-3 p-3 rounded-lg bg-muted/20 border border-border/50">
                  <div className="h-12 w-12 rounded bg-gradient-to-br from-photon-400/20 to-photon-600/20 flex items-center justify-center">
                    <Target className="h-6 w-6 text-photon-400" />
                  </div>
                  <div className="flex-1">
                    <p className="font-medium text-sm">Gaming Ads Trend</p>
                    <p className="text-xs text-muted-foreground">AI Score: 8.1/10</p>
                  </div>
                  <div className="text-right">
                    <p className="text-xs text-muted-foreground font-mono">$1,200 spend</p>
                    <p className="text-xs text-muted-foreground">Ended</p>
                  </div>
                </div>
                <div className="mt-3 pt-3 border-t border-border/50">
                  <Button size="sm" variant="outline" className="w-full" asChild>
                    <Link href="/ads">View All Ads</Link>
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="text-gradient-secondary flex items-center gap-2">
                <Users className="h-5 w-5" />
                Competitor Insights
              </CardTitle>
              <CardDescription>
                Stay ahead with intelligence on your competition
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {['Nike', 'Adidas', 'Puma'].map((brand, index) => (
                  <div key={brand} className="flex items-center justify-between p-3 rounded-lg bg-muted/20 border border-border/50">
                    <div className="flex items-center gap-3">
                      <div className="h-8 w-8 rounded bg-gradient-to-br from-iridium-400 to-iridium-600 flex items-center justify-center">
                        <span className="text-xs font-bold text-white">{brand[0]}</span>
                      </div>
                      <div>
                        <p className="text-sm font-medium">{brand}</p>
                        <p className="text-xs text-muted-foreground">{Math.floor(Math.random() * 50 + 10)} active ads</p>
                      </div>
                    </div>
                    <Button size="sm" variant="outline">
                      View
                    </Button>
                  </div>
                ))}
                <div className="mt-4 pt-3 border-t border-border/50 space-y-2">
                  <Button size="sm" variant="outline" className="w-full" asChild>
                    <Link href="/competitors">
                      <Target className="mr-2 h-4 w-4" />
                      Manage All Competitors
                    </Link>
                  </Button>
                  <Button size="sm" variant="outline" className="w-full" asChild>
                    <Link href="/competitors">
                      <Users className="mr-2 h-4 w-4" />
                      Add New Competitor
                    </Link>
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </DashboardLayout>
  );
}



================================================
File: src/app/ad-sets/[id]/page.tsx
================================================
'use client';

import { useParams, useRouter } from 'next/navigation';
import { useEffect, useState } from 'react';
import { AdWithAnalysis } from '@/types/ad';
import { adsApi, ApiError, PaginatedAdsResponse } from '@/lib/api';
import { transformAdsWithAnalysis } from '@/lib/transformers';
import { DashboardLayout } from '@/components/dashboard';
import { AdCard } from '@/features/dashboard/components/AdCard';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Pagination } from '@/components/ui/pagination';
import { ArrowLeft, Layers, Star } from 'lucide-react';
import { Badge } from '@/components/ui/badge';

export default function AdSetDetailPage() {
  const params = useParams();
  const router = useRouter();
  const adSetId = Number(params.id);
  
  const [adVariants, setAdVariants] = useState<AdWithAnalysis[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [page, setPage] = useState(1);
  const [pageSize] = useState(24);
  const [totalItems, setTotalItems] = useState(0);
  const [totalPages, setTotalPages] = useState(0);
  const [bestAdId, setBestAdId] = useState<number | null>(null);

  useEffect(() => {
    if (isNaN(adSetId)) {
      setError('Invalid Ad Set ID');
      setLoading(false);
      return;
    }
    
    fetchAdSetDetails();
  }, [adSetId]);
  
  const fetchAdSetDetails = async () => {
    try {
      // First, let's get the ad set details to find the best_ad_id
      // This is a placeholder - you would need to implement this endpoint
      // For now, we'll fetch the first page of variants and assume the first one is representative
      
      fetchAdVariants();
      
    } catch (err) {
      console.error('Error fetching ad set details:', err);
      setError('Failed to fetch ad set details');
      setLoading(false);
    }
  };

  const fetchAdVariants = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await adsApi.getAdsInSet(adSetId, page, pageSize);
      
      // Update pagination state
      setTotalItems(response.pagination.total_items);
      setTotalPages(response.pagination.total_pages);
      
      // Transform the API response data
      const transformedAds = transformAdsWithAnalysis(response.data);
      
      // For now, we'll assume the first ad is the representative one
      // In a real implementation, you would get this from the ad set endpoint
      if (transformedAds.length > 0 && page === 1) {
        setBestAdId(transformedAds[0].id || null);
      }
      
      setAdVariants(transformedAds);
      
    } catch (err) {
      console.error('Error fetching ad variants:', err);
      
      if (err instanceof ApiError) {
        setError(`API Error: ${err.message}`);
      } else {
        setError('Failed to fetch ad variants. Please try again later.');
      }
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (!isNaN(adSetId)) {
      fetchAdVariants();
    }
  }, [page]); // Refetch when page changes

  const handleBackClick = () => {
    router.back();
  };

  const handlePageChange = (newPage: number) => {
    setPage(newPage);
  };

  const renderAdVariants = () => {
    if (adVariants.length === 0) {
      return (
        <div className="text-center py-20">
          <p className="text-muted-foreground">No ad variants found in this set.</p>
        </div>
      );
    }

    return (
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
        {adVariants.map(ad => (
          <div key={ad.id} className="relative">
            {ad.id === bestAdId && (
              <Badge className="absolute -top-2 -right-2 z-20 bg-amber-500 text-black flex items-center gap-1 px-2 py-1 shadow-lg">
                <Star className="h-3 w-3 fill-current" />
                <span className="font-semibold">Best Variant</span>
              </Badge>
            )}
            <AdCard ad={ad} hideSetBadge={true} />
          </div>
        ))}
      </div>
    );
  };

  const renderLoading = () => (
    <div className="flex items-center justify-center h-96">
      <div className="flex flex-col items-center space-y-4">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
        <p className="text-muted-foreground">Loading ad variants...</p>
      </div>
    </div>
  );

  const renderError = () => (
    <Card className="border-red-300 bg-red-50 dark:bg-red-900/10">
      <CardHeader>
        <CardTitle className="text-red-600 dark:text-red-400">Error</CardTitle>
        <CardDescription className="text-red-500 dark:text-red-300">
          Failed to load ad variants
        </CardDescription>
      </CardHeader>
      <CardContent>
        <p className="text-sm text-red-600 dark:text-red-300">{error}</p>
        <Button variant="outline" className="mt-4" onClick={fetchAdVariants}>
          Try Again
        </Button>
      </CardContent>
    </Card>
  );

  return (
    <DashboardLayout>
      <div className="container mx-auto px-4 py-6">
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center space-x-2">
            <Button variant="outline" size="sm" onClick={handleBackClick}>
              <ArrowLeft className="h-4 w-4 mr-1" /> Back
            </Button>
            <h1 className="text-2xl font-bold flex items-center">
              <Layers className="h-6 w-6 mr-2" /> 
              Ad Set #{adSetId}
              {totalItems > 0 && (
                <span className="ml-2 text-sm font-normal text-muted-foreground">
                  ({totalItems} variants)
                </span>
              )}
            </h1>
          </div>
        </div>

        {loading ? renderLoading() : error ? renderError() : (
          <div className="space-y-6">
            {renderAdVariants()}
            
            {/* Pagination */}
            {totalPages > 1 && (
              <div className="flex justify-center mt-6">
                <Pagination
                  currentPage={page}
                  totalPages={totalPages}
                  pageSize={pageSize}
                  totalItems={totalItems}
                  onPageChange={handlePageChange}
                  onPageSizeChange={(size) => {}}
                />
              </div>
            )}
          </div>
        )}
      </div>
    </DashboardLayout>
  );
} 


================================================
File: src/app/ads/page.tsx
================================================
'use client';

import { AdCard } from '@/features/dashboard/components/AdCard';
import { AdList } from '@/features/dashboard/components/AdList';
import { BulkActionToolbar } from '@/features/dashboard/components/BulkActionToolbar';
import { AdWithAnalysis } from '@/types/ad';
import { adsApi, ApiError } from '@/lib/api';
import { transformAdsWithAnalysis } from '@/lib/transformers';
import { useEffect, useState } from 'react';
import { DashboardLayout } from '@/components/dashboard';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Pagination } from '@/components/ui/pagination';
import { ViewToggle } from '@/components/ui/view-toggle';
import { 
  Brain, 
  TrendingUp, 
  Target,
  RefreshCw,
  Filter,
  Search,
  Zap,
  Eye,
  DollarSign,
  MousePointer
} from 'lucide-react';
import { AdFilters } from '@/features/dashboard/components/AdFilters';
import { AdSearch } from '@/features/dashboard/components/AdSearch';
import { ActiveFilterBadges } from '@/features/dashboard/components/ActiveFilterBadges';
import { AdFilterParams } from '@/lib/api';
import { useRouter, usePathname, useSearchParams } from 'next/navigation';

export default function AdIntelligencePage() {
  const [ads, setAds] = useState<AdWithAnalysis[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [totalItems, setTotalItems] = useState(0);
  const [totalPages, setTotalPages] = useState(0);
  const [stats, setStats] = useState({
    totalAds: 0,
    highScoreAds: 0,
    avgScore: 0,
    activeAds: 0,
    analyzedAds: 0,
  });
  const router = useRouter();
  const pathname = usePathname();
  const searchParams = useSearchParams();

  const storageKey = 'adsFilters';

  const parseInitialFilters = (): AdFilterParams => {
    // If URL has any search params, use them.
    if (searchParams?.toString()) {
      const params: AdFilterParams = {
        page: searchParams.get('page') ? Number(searchParams.get('page')) : 1,
        page_size: searchParams.get('page_size') ? Number(searchParams.get('page_size')) : 24,
        sort_by: (searchParams.get('sort_by') as any) || 'created_at',
        sort_order: (searchParams.get('sort_order') as any) || 'desc',
      };
      if (searchParams.get('search')) params.search = searchParams.get('search')!;
      if (searchParams.get('media_type')) params.media_type = searchParams.get('media_type')!;
      if (searchParams.get('is_active')) params.is_active = searchParams.get('is_active') === 'true';
      if (searchParams.get('min_overall_score')) params.min_overall_score = Number(searchParams.get('min_overall_score'));
      if (searchParams.get('max_overall_score')) params.max_overall_score = Number(searchParams.get('max_overall_score'));
      if (searchParams.get('min_hook_score')) params.min_hook_score = Number(searchParams.get('min_hook_score'));
      if (searchParams.get('max_hook_score')) params.max_hook_score = Number(searchParams.get('max_hook_score'));
      if (searchParams.get('min_duration_days')) params.min_duration_days = Number(searchParams.get('min_duration_days'));
      if (searchParams.get('max_duration_days')) params.max_duration_days = Number(searchParams.get('max_duration_days'));
      if (searchParams.get('date_from')) params.date_from = searchParams.get('date_from')!;
      if (searchParams.get('date_to')) params.date_to = searchParams.get('date_to')!;
      if (searchParams.get('competitor_id')) params.competitor_id = Number(searchParams.get('competitor_id'));
      return params;
    }

    // Fallback to sessionStorage if available (e.g., navigating back without query string)
    if (typeof window !== 'undefined') {
      try {
        const stored = sessionStorage.getItem(storageKey);
        if (stored) return JSON.parse(stored) as AdFilterParams;
      } catch (_) {}
    }

    // Default filters
    return {
    page: 1,
    page_size: 24,
    sort_by: 'created_at',
    sort_order: 'desc',
    };
  };

  const [filters, setFilters] = useState<AdFilterParams>(parseInitialFilters);
  
  // New state for view and selection
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [selectedAds, setSelectedAds] = useState<Set<number>>(new Set());
  const [isDeleting, setIsDeleting] = useState(false);
  const [deletingAds, setDeletingAds] = useState<Set<number>>(new Set());
  const [isDeletingAll, setIsDeletingAll] = useState(false);
  const isDevMode = process.env.NODE_ENV === 'development';

  useEffect(() => {
    fetchAds();
  }, [filters]);

  useEffect(() => {
    const params = new URLSearchParams();
    Object.entries(filters).forEach(([key, value]) => {
      if (value !== undefined && value !== null) params.set(key, String(value));
    });
    router.replace(`${pathname}?${params.toString()}`, { scroll: false });

    // Persist to sessionStorage for navigation without query params
    if (typeof window !== 'undefined') {
      sessionStorage.setItem(storageKey, JSON.stringify(filters));
    }
  }, [filters, router, pathname]);

  // Clear selection when ads change (e.g., after deletion)
  useEffect(() => {
    if (selectedAds.size > 0) {
      const currentAdIds = new Set(ads.map(ad => ad.id).filter((id): id is number => id !== undefined));
      const validSelectedAds = new Set(
        Array.from(selectedAds).filter(id => currentAdIds.has(id))
      );
      
      if (validSelectedAds.size !== selectedAds.size) {
        console.log('Clearing invalid selections:', 
          Array.from(selectedAds).filter(id => !currentAdIds.has(id)));
        setSelectedAds(validSelectedAds);
      }
    }
  }, [ads]);

  const fetchAds = async () => {
    try {
      setLoading(true);
      setError(null);
      
      // Create a simplified version of filters that should be compatible with the current backend
      const safeFilters: AdFilterParams = {
        page: filters.page,
        page_size: filters.page_size,
        // has_analysis: true, // Removed - show all ads, not just analyzed ones
        sort_by: filters.sort_by || 'created_at',
        sort_order: filters.sort_order || 'desc',
      };
      
      // Only add these filters if they're defined, as they might cause the join_entities error
      if (filters.search) safeFilters.search = filters.search;
      if (filters.media_type) safeFilters.media_type = filters.media_type;
      if (filters.is_active !== undefined) safeFilters.is_active = filters.is_active;
      if (filters.competitor_id) safeFilters.competitor_id = filters.competitor_id;
      
      // Add duration filters
      if (filters.min_duration_days !== undefined) safeFilters.min_duration_days = filters.min_duration_days;
      if (filters.max_duration_days !== undefined) safeFilters.max_duration_days = filters.max_duration_days;
      
      // Add score filters
      if (filters.min_overall_score !== undefined) safeFilters.min_overall_score = filters.min_overall_score;
      if (filters.max_overall_score !== undefined) safeFilters.max_overall_score = filters.max_overall_score;
      if (filters.min_hook_score !== undefined) safeFilters.min_hook_score = filters.min_hook_score;
      if (filters.max_hook_score !== undefined) safeFilters.max_hook_score = filters.max_hook_score;
      
      // Add date filters
      if (filters.date_from) safeFilters.date_from = filters.date_from;
      if (filters.date_to) safeFilters.date_to = filters.date_to;
      
      // Fetch ads with analysis using simplified filters
      const response = await adsApi.getAds(safeFilters);
      
      // Use actual pagination metadata from backend
      setTotalItems(response.pagination.total_items);
      setTotalPages(response.pagination.total_pages);
      
      const transformedAds = transformAdsWithAnalysis(response.data);
      setAds(transformedAds);
      
      // The client-side filtering was removed for debugging.
      // The stats are now calculated on the transformed ads.
      
      // Calculate stats based on transformed ads
      const highScoreCount = transformedAds.filter(ad => 
        ad.analysis?.overall_score !== undefined && 
        ad.analysis.overall_score > 8).length;
      const activeCount = transformedAds.filter(ad => ad.is_active === true).length;
      const adsWithAnalysis = transformedAds.filter(ad => 
        ad.analysis?.overall_score !== undefined);
      const avgScore = adsWithAnalysis.length > 0 
        ? adsWithAnalysis.reduce((sum, ad) => sum + (ad.analysis?.overall_score || 0), 0) / adsWithAnalysis.length 
        : 0;
      
      setStats({
        totalAds: response.pagination.total_items,
        highScoreAds: highScoreCount,
        avgScore: avgScore,
        activeAds: activeCount,
        analyzedAds: adsWithAnalysis.length, // Add count of analyzed ads
      });
    } catch (err) {
      console.error('Error fetching ads:', err);
      
      if (err instanceof ApiError) {
        // If we get the specific join_entities error, show a more user-friendly message
        if (err.message.includes('join_entities')) {
          setError('Some filter options are not supported by the current backend version. Please try with fewer filters.');
        } else {
          setError(`API Error: ${err.message}`);
        }
      } else {
        setError('Failed to fetch ads. Please ensure the backend is running.');
      }
    } finally {
      setLoading(false);
    }
  };

  const handleRefresh = () => {
    fetchAds();
  };

  const handleApplyFilters = (newFilters: AdFilterParams) => {
    // Merge with existing filters, reset to page 1
    setFilters(prev => ({
      ...prev,
      ...newFilters,
      page: 1
    }));
  };

  const handleResetFilters = () => {
    setFilters({
      page: 1,
      page_size: 24,
      // has_analysis: true, // Removed - show all ads when resetting
      sort_by: 'created_at',
      sort_order: 'desc',
    });
  };

  const handleSearch = (query: string) => {
    setFilters(prev => ({
      ...prev,
      search: query,
      page: 1
    }));
  };

  const handleRemoveFilter = (key: keyof AdFilterParams) => {
    setFilters(prev => {
      const newFilters = { ...prev };
      delete newFilters[key];
      return { ...newFilters, page: 1 };
    });
  };

  const handlePageChange = (page: number) => {
    setFilters(prev => ({
      ...prev,
      page
    }));
    // Scroll to top when page changes
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  const handlePageSizeChange = (pageSize: number) => {
    setFilters(prev => ({
      ...prev,
      page_size: pageSize,
      page: 1 // Reset to first page when changing page size
    }));
  };

  // Selection handlers
  const handleAdSelection = (adId: number, selected: boolean) => {
    setSelectedAds(prev => {
      const newSet = new Set(prev);
      if (selected) {
        newSet.add(adId);
      } else {
        newSet.delete(adId);
      }
      return newSet;
    });
  };

  const handleSelectAll = (selected: boolean) => {
    if (selected) {
      // Filter out ads with undefined id before creating the Set
      setSelectedAds(new Set(ads.map(ad => ad.id).filter((id): id is number => id !== undefined)));
    } else {
      setSelectedAds(new Set());
    }
  };

  const handleClearSelection = () => {
    setSelectedAds(new Set());
  };

  // Bulk delete handler
  const handleBulkDelete = async () => {
    if (selectedAds.size === 0) return;
    
    if (!confirm(`Are you sure you want to delete ${selectedAds.size} ads? This action cannot be undone.`)) {
      return;
    }

    const adIds = Array.from(selectedAds);
    
    setIsDeleting(true);
    setDeletingAds(new Set(adIds));
    
    try {
      console.log('Deleting ads:', adIds);
      
      const result = await adsApi.bulkDeleteAds(adIds);
      console.log('Delete result:', result);
      
      // Clear selection immediately
      setSelectedAds(new Set());
      
      // Optimistically remove deleted ads from current state
      setAds(prevAds => prevAds.filter(ad => !adIds.includes(ad.id as number)));
      
      // Small delay to show the deletion animation
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // Refresh data from server to ensure consistency
      await fetchAds();
      
      // Show success message
      alert(`Successfully deleted ${result.deleted_count} out of ${result.requested_count} ads`);
    } catch (err) {
      console.error('Error deleting ads:', err);
      alert('Failed to delete ads. Please try again.');
      
      // On error, restore the selection
      setSelectedAds(new Set(adIds));
    } finally {
      setIsDeleting(false);
      setDeletingAds(new Set());
    }
  };

  const handleDropAllAds = async () => {
    if (!window.confirm('WARNING: This will delete ALL ads in the database. This action cannot be undone. Are you sure?')) {
      return;
    }
    
    try {
      setIsDeletingAll(true);
      const result = await adsApi.deleteAllAds();
      alert(`Successfully deleted ${result.count} ads`);
      fetchAds(); // Refresh the ads list
    } catch (error) {
      console.error('Error deleting all ads:', error);
      alert(`Error deleting all ads: ${error instanceof Error ? error.message : 'Unknown error'}`);
    } finally {
      setIsDeletingAll(false);
    }
  };

  const renderStats = () => (
    <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 mb-8">
      <Card>
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium text-muted-foreground">Total Ads</CardTitle>
          <Target className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">{stats.totalAds}</div>
          <p className="text-xs text-photon-400">Total in Database</p>
        </CardContent>
      </Card>
      
      <Card>
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium text-muted-foreground">AI Analyzed</CardTitle>
          <Brain className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold text-blue-400">{stats.analyzedAds}</div>
          <p className="text-xs text-muted-foreground">With AI Analysis</p>
        </CardContent>
      </Card>
      
      <Card>
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium text-muted-foreground">Average Score</CardTitle>
          <TrendingUp className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">{stats.avgScore.toFixed(1)}</div>
          <p className="text-xs text-muted-foreground">Performance Rating</p>
        </CardContent>
      </Card>
      
      <Card>
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium text-muted-foreground">High Performers</CardTitle>
          <Zap className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold text-photon-400">{stats.highScoreAds}</div>
          <p className="text-xs text-muted-foreground">Score &gt; 8.0</p>
        </CardContent>
      </Card>
      
      <Card>
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium text-muted-foreground">Active Ads</CardTitle>
          <Eye className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold text-green-400">{stats.activeAds}</div>
          <p className="text-xs text-muted-foreground">Currently Running</p>
        </CardContent>
      </Card>
      
      {/* Dev Tools card removed as per requirements */}
    </div>
  );

  const renderLoadingState = () => (
    <div className="space-y-8">
      {renderStats()}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {[1, 2, 3, 4, 5, 6, 7, 8].map((i) => (
          <div key={i} className="bg-card rounded-xl border animate-pulse h-96">
            <div className="p-6">
              <div className="flex items-center space-x-3 mb-4">
                <div className="w-10 h-10 bg-iridium-700 rounded-full"></div>
                <div className="flex-1">
                  <div className="h-4 bg-iridium-700 rounded w-3/4 mb-2"></div>
                  <div className="h-3 bg-iridium-700 rounded w-1/2"></div>
                </div>
              </div>
              <div className="h-32 bg-iridium-700 rounded-lg mb-4"></div>
              <div className="space-y-2">
                <div className="h-4 bg-iridium-700 rounded w-full"></div>
                <div className="h-3 bg-iridium-700 rounded w-5/6"></div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );

  const renderErrorState = () => (
    <div className="space-y-8">
      <div className="max-w-2xl mx-auto text-center">
        <Card className="bg-red-900/20 border-red-500">
          <CardHeader>
            <CardTitle className="text-red-400 flex items-center justify-center gap-2">
              <Brain className="h-5 w-5" />
              Connection Error
            </CardTitle>
            <CardDescription className="text-red-300">
              {error}
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <Button onClick={handleRefresh} className="bg-photon-500 text-photon-950 hover:bg-photon-400">
              <RefreshCw className="mr-2 h-4 w-4" />
              Retry Connection
            </Button>
            
            <div className="bg-iridium-900/50 border border-iridium-700 rounded-lg p-4 text-left">
              <h3 className="font-mono font-semibold text-photon-300 mb-2">Setup Instructions</h3>
              <div className="text-sm text-iridium-300 space-y-1">
                <p>1. Start the backend server:</p>
                <code className="block bg-iridium-800 p-2 rounded text-xs">cd backend && python -m uvicorn app.main:app --reload</code>
                <p>2. Backend should be available at: <code className="bg-iridium-800 px-2 py-1 rounded">http://localhost:8000</code></p>
                <p>3. Check the API docs at: <code className="bg-iridium-800 px-2 py-1 rounded">http://localhost:8000/docs</code></p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );

  const renderEmptyState = () => (
    <div className="space-y-8">
      {renderStats()}

      {/* Filter controls still available when no ads */}
      <AdFilters
        onApplyFilters={handleApplyFilters}
        onResetFilters={handleResetFilters}
        currentFilters={filters}
        inline
        disabled={loading}
      />

      {/* Active filter badges with ability to remove */}
      <ActiveFilterBadges
        filters={filters}
        onRemoveFilter={handleRemoveFilter}
      />

      <div className="text-center py-12">
        <Card className="max-w-md mx-auto">
          <CardHeader>
            <CardTitle className="text-photon-300 flex items-center justify-center gap-2">
              <Brain className="h-5 w-5" />
              No Ads Found
            </CardTitle>
            <CardDescription>
              No ads match the current filters.
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <p className="text-sm text-iridium-400">
              Adjust or clear filters to broaden your search.
            </p>
            <div className="flex flex-col sm:flex-row gap-3 justify-center">
            <Button onClick={handleRefresh} variant="outline">
              <RefreshCw className="mr-2 h-4 w-4" />
                Refresh
              </Button>
              {/* Clear all filters button appears only if any extra filters are active */}
              {Object.keys(filters).some(k => !['page','page_size','sort_by','sort_order'].includes(k)) && (
                <Button onClick={handleResetFilters} variant="secondary">
                  <Filter className="mr-2 h-4 w-4" />
                  Clear Filters
            </Button>
              )}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );

  return (
    <DashboardLayout>
      <div className="space-y-6">
        {/* Header */}
        <div className="flex flex-col space-y-4 md:flex-row md:items-center md:justify-between md:space-y-0">
          <div>
            <h1 className="text-3xl font-bold flex items-center gap-2">
              <Brain className="h-8 w-8 text-photon-400" />
              Ad Intelligence
            </h1>
            <p className="text-muted-foreground">
              Discover high-performing ads with AI-powered analysis and insights
              {totalItems > 0 && (
                <span className="ml-2 text-photon-400">
                  â€¢ Page {filters.page || 1} of {totalPages} ({totalItems} ads)
                </span>
              )}
            </p>
          </div>
          <div className="flex gap-3">
            <ViewToggle 
              view={viewMode} 
              onViewChange={setViewMode}
              disabled={loading}
            />
            <AdSearch 
              onSearch={handleSearch} 
              disabled={loading}
            />
            <Button onClick={handleRefresh} disabled={loading}>
              <RefreshCw className={`mr-2 h-4 w-4 ${loading ? 'animate-spin' : ''}`} />
              Refresh
            </Button>
          </div>
        </div>

        {/* Content */}
        {loading ? renderLoadingState() : error ? renderErrorState() : ads.length === 0 ? renderEmptyState() : (
          <div className="space-y-8">
            {renderStats()}
            
            {/* Inline Filters Section */}
            <AdFilters 
              onApplyFilters={handleApplyFilters} 
              onResetFilters={handleResetFilters}
              currentFilters={filters}
              inline
              disabled={loading}
            />
            
            {/* Active Filters */}
            <ActiveFilterBadges filters={filters} onRemoveFilter={handleRemoveFilter} />
            
            {/* Bulk Action Toolbar */}
            <BulkActionToolbar 
              selectedCount={selectedAds.size}
              onDelete={handleBulkDelete}
              onClear={handleClearSelection}
              isDeleting={isDeleting}
              disabled={loading}
            />
            
            {/* Ad Content */}
            {viewMode === 'list' ? (
              <AdList 
                ads={ads}
                selectedAds={selectedAds}
                onSelectionChange={handleAdSelection}
                onSelectAll={handleSelectAll}
                showSelection={true}
              />
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {ads.map((ad) => (
                  <AdCard 
                    key={`ad-${ad.id ?? 'unknown'}`} 
                    ad={ad} 
                    isSelected={ad.id !== undefined && selectedAds.has(ad.id)}
                    isDeleting={ad.id !== undefined && deletingAds.has(ad.id)}
                    onSelectionChange={handleAdSelection}
                    showSelection={true}
                  />
                ))}
              </div>
            )}
            

            {/* Pagination */}
            <Pagination
              currentPage={filters.page || 1}
              totalPages={totalPages}
              pageSize={filters.page_size || 24}
              totalItems={totalItems}
              onPageChange={handlePageChange}
              onPageSizeChange={handlePageSizeChange}
              disabled={loading}
            />
          </div>
        )}
      </div>
    </DashboardLayout>
  );
} 


================================================
File: src/app/ads/[id]/page.tsx
================================================
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { adsApi, ApiError } from '@/lib/api';
import { AdWithAnalysis } from '@/types/ad';
import { transformAdsWithAnalysis } from '@/lib/transformers';
import { DashboardLayout } from '@/components/dashboard';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardFooter, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Play, Image, ArrowLeft, Globe2, Eye, DollarSign, Zap, TrendingUp, ChevronLeft, ChevronRight, Calendar, Info } from 'lucide-react';
import { cn } from '@/lib/utils';
import { differenceInDays, format, parseISO } from 'date-fns';

const CreativeCard = ({ creative, index }: { creative: AdWithAnalysis['creatives'][0], index: number }) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const body = creative.body || '';
  const canTruncate = body.length > 150;

  return (
    <div key={creative.id || index} className="border border-border/30 rounded-lg p-4 space-y-2">
      <h4 className="font-semibold text-sm">Creative {index + 1}</h4>
      {creative.media && creative.media.length > 0 && (
        <div className="rounded-md overflow-hidden">
          {creative.media[0].type === 'Video' ? (
            <video src={creative.media[0].url} controls className="w-full h-auto" />
          ) : (
            <img src={creative.media[0].url} alt={creative.title || ''} className="w-full h-auto" />
          )}
        </div>
      )}
      {creative.title && (
        <p className="text-xs"><strong>Title:</strong> {creative.title}</p>
      )}
      {body && (
        <p className="text-xs">
          <strong>Body:</strong>{' '}
          {canTruncate && !isExpanded ? `${body.substring(0, 150)}...` : body}
          {canTruncate && (
            <Button variant="link" size="sm" onClick={() => setIsExpanded(!isExpanded)} className="p-0 h-auto ml-1 text-xs">
              {isExpanded ? 'Show less' : 'Show more'}
            </Button>
          )}
        </p>
      )}
      {creative.cta?.text && (
        <p className="text-xs"><strong>CTA:</strong> {creative.cta.text}</p>
      )}
    </div>
  );
};

export default function AdDetailPage() {
  const params = useParams();
  const id = params?.id as string;
  const router = useRouter();
  const [ad, setAd] = useState<AdWithAnalysis | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [currentCreativeIndex, setCurrentCreativeIndex] = useState(0);

  useEffect(() => {
    const fetchAd = async () => {
      try {
        setLoading(true);
        setError(null);
        const response = await adsApi.getAdById(Number(id));
        // Transform single ad into array-based transformer and pick first
        const transformed = transformAdsWithAnalysis([response]);
        setAd(transformed[0]);
      } catch (err) {
        if (err instanceof ApiError) {
          setError(err.message);
        } else {
          setError('Failed to load ad');
        }
      } finally {
        setLoading(false);
      }
    };
    if (id) {
      fetchAd();
    }
  }, [id]);

  const currentCreative = ad?.creatives?.[currentCreativeIndex];
  const media = currentCreative?.media?.[0];

  const renderMedia = () => {
    if (!media) return null;

    return (
      <div className="rounded-lg overflow-hidden border border-border/20 bg-card relative aspect-video max-h-[600px] w-full mx-auto">
        {media.type === 'Video' ? (
          <video key={media.url} src={media.url} controls className="w-full h-full object-contain" />
        ) : (
          <img src={media.url} alt={currentCreative?.title || 'Ad media'} className="w-full h-full object-contain" />
        )}
      </div>
    );
  };
  
  const renderCarouselControls = () => {
    if (!ad?.creatives || ad.creatives.length <= 1) return null;

    return (
      <div className="flex items-center justify-center gap-4 mt-4">
        <Button 
          variant="outline" 
          size="icon" 
          onClick={() => setCurrentCreativeIndex(prev => (prev - 1 + ad.creatives.length) % ad.creatives.length)}
        >
          <ChevronLeft className="h-4 w-4" />
        </Button>
        <span className="text-sm text-muted-foreground font-mono">
          Creative {currentCreativeIndex + 1} / {ad.creatives.length}
        </span>
        <Button 
          variant="outline" 
          size="icon" 
          onClick={() => setCurrentCreativeIndex(prev => (prev + 1) % ad.creatives.length)}
        >
          <ChevronRight className="h-4 w-4" />
        </Button>
      </div>
    );
  };

  const formatAdDuration = (startDateStr?: string, endDateStr?: string, isActive?: boolean): { formattedDate: string | null, duration: number | null, isActive: boolean } => {
    if (!startDateStr) return { formattedDate: null, duration: null, isActive: false };
    try {
      const startDate = parseISO(startDateStr);
      const endDate = endDateStr ? parseISO(endDateStr) : new Date();
      if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) return { formattedDate: null, duration: null, isActive: false };
      
      let duration = differenceInDays(endDate, startDate);
      duration = Math.max(duration, 1);
  
      const formattedStartDate = format(startDate, 'MMM d, yyyy');
      const formattedEndDate = endDateStr ? format(parseISO(endDateStr), 'MMM d, yyyy') : 'Present';
  
      if (isActive) {
        return { 
          formattedDate: `Running since ${formattedStartDate}`, 
          duration, 
          isActive: true 
        };
      }
  
      return { 
        formattedDate: `${formattedStartDate} - ${formattedEndDate}`, 
        duration, 
        isActive: false 
      };
    } catch (error) {
      console.error("Error formatting ad duration:", error);
      return { formattedDate: null, duration: null, isActive: false };
    }
  };

  if (loading) {
    return (
      <DashboardLayout>
        <div className="p-8 text-center text-sm text-muted-foreground">Loading ad details...</div>
      </DashboardLayout>
    );
  }

  if (error || !ad) {
    return (
      <DashboardLayout>
        <div className="p-8 text-center text-red-400">{error || 'Ad not found'}</div>
      </DashboardLayout>
    );
  }

  const countries = ad.targeting?.locations?.map(l => l.name) || [];
  const hasHighScore = ad.analysis?.overall_score && ad.analysis.overall_score > 8;
  const adDuration = formatAdDuration(ad.start_date, ad.end_date, ad.is_active);

  return (
    <DashboardLayout>
      <div className="space-y-6 p-4 md:p-8">
        {/* Back Button */}
        <Button variant="outline" onClick={() => router.back()}>
          <ArrowLeft className="h-4 w-4 mr-2" />Back to Ads
        </Button>

        {/* Header */}
        <div className="flex items-start gap-4">
          <Avatar className="size-16 ring-2 ring-border/20">
            <AvatarImage 
              src={ad.page_profile_picture_url || ad.competitor?.page_id ? `https://graph.facebook.com/${ad.competitor?.page_id}/picture?width=64&height=64` : undefined} 
              alt={ad.competitor?.name || ad.page_name || 'Competitor'} 
              className="object-cover" 
            />
            <AvatarFallback className="bg-gradient-to-br from-photon-900 to-photon-800 text-photon-200 font-mono text-sm font-semibold">
              {(ad.competitor?.name || ad.page_name || 'AD').substring(0, 2).toUpperCase()}
            </AvatarFallback>
          </Avatar>
          <div className="flex-1 space-y-1">
            <h1 className="text-2xl font-bold flex items-center gap-2">
              {ad.competitor?.name || ad.page_name || 'Unknown Competitor'}
              {hasHighScore && <Zap className="h-5 w-5 text-photon-400 fill-photon-400" />}
            </h1>
            <p className="text-sm text-muted-foreground">Ad ID: {ad.id} â€¢ Archive ID: {ad.ad_archive_id}</p>
            <div className="flex flex-wrap items-center gap-x-4 gap-y-2 text-sm text-muted-foreground pt-1">
              {adDuration.formattedDate && (
                <div className="flex items-center gap-1.5" title={`${adDuration.formattedDate} (${adDuration.duration} days)`}>
                  <Calendar className="h-4 w-4" />
                  <span>{adDuration.formattedDate}</span>
                  {adDuration.duration && (
                    <span className={cn("font-medium", adDuration.isActive ? "text-photon-400" : "")}>
                      â€¢ {adDuration.duration} {adDuration.duration === 1 ? 'day' : 'days'}
                    </span>
                  )}
                </div>
              )}
              {ad.display_format && (
                <div className="flex items-center gap-1.5" title={`Display Format: ${ad.display_format}`}>
                  <Info className="h-4 w-4" />
                  <span>{ad.display_format}</span>
                </div>
              )}
              {countries.length > 0 && (
                <div className="flex items-center gap-1.5" title={countries.join(', ')}>
                  <Globe2 className="h-4 w-4" />
                  <span>{countries.join(', ')}</span>
                </div>
              )}
            </div>
          </div>
          <div className="flex flex-col items-end text-right">
            <div className="flex items-center gap-1 text-foreground">
              <TrendingUp className="h-4 w-4" />
              <span className="font-mono font-semibold text-lg">
                {ad.analysis?.overall_score ? ad.analysis.overall_score.toFixed(1) : 'N/A'}
              </span>
            </div>
            <span className="text-xs text-muted-foreground">Overall Score</span>
          </div>
        </div>

        {/* Media */}
        {renderMedia()}
        {renderCarouselControls()}

        {/* Content & Analysis */}
        <div className="grid lg:grid-cols-3 gap-6">
          {/* Ad Content */}
          <Card>
            <CardHeader>
              <CardTitle>Ad Content</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3 text-sm">
              {currentCreative?.title && <p><strong>Title:</strong> {currentCreative.title}</p>}
              {currentCreative?.body && <p><strong>Body:</strong> <span className="whitespace-pre-wrap">{currentCreative.body}</span></p>}
              {currentCreative?.cta?.text && <p><strong>CTA:</strong> {currentCreative.cta.text}</p>}
            </CardContent>
            <CardFooter className="text-xs text-muted-foreground flex gap-4">
              <div className="flex items-center gap-1"><Eye className="h-3 w-3" />{ad.impressions_text || 'Unknown'}</div>
              {ad.spend && <div className="flex items-center gap-1"><DollarSign className="h-3 w-3" />{ad.spend}</div>}
            </CardFooter>
          </Card>

          {/* AI Analysis */}
          <Card>
            <CardHeader>
              <CardTitle>AI Analysis</CardTitle>
              <CardDescription>Insights generated by AI</CardDescription>
            </CardHeader>
            <CardContent className="space-y-3 text-sm">
              {ad.analysis ? (
                <>
                  {ad.analysis.summary && <p><strong>Summary:</strong> {ad.analysis.summary}</p>}
                  {ad.analysis.hook_score !== undefined && <p><strong>Hook Score:</strong> {ad.analysis.hook_score}</p>}
                  {ad.analysis.overall_score !== undefined && <p><strong>Overall Score:</strong> {ad.analysis.overall_score}</p>}
                  {ad.analysis.confidence_score !== undefined && <p><strong>Confidence:</strong> {ad.analysis.confidence_score}</p>}
                  {ad.analysis.target_audience && <p><strong>Target Audience:</strong> {ad.analysis.target_audience}</p>}
                  {ad.analysis.content_themes && <p><strong>Themes:</strong> {ad.analysis.content_themes.join(', ')}</p>}
                  {ad.analysis.analysis_version && <p><strong>Version:</strong> {ad.analysis.analysis_version}</p>}
                </>
              ) : (
                <p>No analysis data available.</p>
              )}
            </CardContent>
          </Card>

          {/* Lead Form */}
          {ad.lead_form && (
            <Card>
              <CardHeader>
                <CardTitle>Lead Form Preview</CardTitle>
                <CardDescription>A visual representation of the extracted form.</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {/* Standalone text fields */}
                {ad.lead_form.standalone_fields?.map((field) => (
                  <div key={field} className="grid w-full items-center gap-2">
                    <Label htmlFor={field} className="text-muted-foreground">{field}</Label>
                    <Input type="text" id={field} readOnly className="bg-muted/50" />
                  </div>
                ))}

                {/* Multi-choice questions */}
                {ad.lead_form.questions && Object.entries(ad.lead_form.questions).map(([question, options]) => (
                  <div key={question} className="grid w-full items-center gap-2">
                    <Label className="text-muted-foreground">{question}</Label>
                    <div className="flex flex-wrap gap-2 pt-1">
                      {Array.isArray(options) && options.map((option) => (
                        <Badge key={option} variant="outline" className="cursor-not-allowed font-normal">
                          {option}
                        </Badge>
                      ))}
                    </div>
                  </div>
                ))}
              </CardContent>
              <CardFooter>
                <Button disabled className="w-full">
                  Submit
                </Button>
              </CardFooter>
            </Card>
          )}
        </div>

        {/* Creatives Data */}
        {ad.creatives && ad.creatives.length > 0 && (
          <Card>
            <CardHeader>
              <CardTitle>Creatives ({ad.creatives.length})</CardTitle>
              <CardDescription>Carousel or multi-card content</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
                {ad.creatives.map((creative, i) => (
                  <CreativeCard key={creative.id || i} creative={creative} index={i} />
                ))}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Raw Data */}
        <Card>
          <CardHeader>
            <CardTitle>Raw Data</CardTitle>
            <CardDescription>Technical details for debugging</CardDescription>
          </CardHeader>
          <CardContent>
            <pre className="text-xs whitespace-pre-wrap break-all max-h-[400px] overflow-auto bg-black/40 p-4 rounded-lg border border-border/30">
              {JSON.stringify(ad, null, 2)}
            </pre>
          </CardContent>
        </Card>
      </div>
    </DashboardLayout>
  );
} 


================================================
File: src/app/competitors/page.tsx
================================================
'use client';

import { useState, useEffect, useMemo } from 'react';
import { useRouter } from 'next/navigation';
import { Plus, Search, Filter, Edit2, Trash2, Eye, Download, AlertCircle, CheckCircle, XCircle, Users, Settings, Globe, Clock, Activity, MoreVertical, ChevronDown, ChevronUp } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription, DialogFooter } from '@/components/ui/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from "@/components/ui/checkbox"
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { DashboardLayout } from '@/components/dashboard';
import { 
  getCompetitors, 
  getCompetitorStats, 
  createCompetitor, 
  updateCompetitor, 
  deleteCompetitor,
  bulkDeleteCompetitors,
  scrapeCompetitorAds,
  getCompetitorAds,
  type Competitor, 
  type CompetitorStats,
  type CompetitorCreate,
  type CompetitorUpdate,
  type PaginatedCompetitors,
  type CompetitorScrapeRequest 
} from '@/lib/api';
import { Label } from '@/components/ui/label';
import { Separator } from '@/components/ui/separator';
import { RefreshCw } from 'lucide-react';

interface CompetitorFormData {
  name: string;
  page_id: string;
  is_active: boolean;
}

interface ScrapeConfig {
  countries: string[];
  max_pages: number;
  delay_between_requests: number;
  active_status: 'active' | 'inactive' | 'all';
  date_from?: string;
  date_to?: string;
}

const COUNTRY_OPTIONS = [
  { value: 'ALL', label: 'All Countries' },
  { value: 'AE', label: 'United Arab Emirates' },
  { value: 'US', label: 'United States' },
  { value: 'GB', label: 'United Kingdom' },
  { value: 'CA', label: 'Canada' },
  { value: 'AU', label: 'Australia' },
  { value: 'DE', label: 'Germany' },
  { value: 'FR', label: 'France' },
  { value: 'ES', label: 'Spain' },
  { value: 'IT', label: 'Italy' },
  { value: 'BR', label: 'Brazil' },
  { value: 'IN', label: 'India' },
  { value: 'SG', label: 'Singapore' },
  { value: 'HK', label: 'Hong Kong' },
  { value: 'JP', label: 'Japan' },
  { value: 'KR', label: 'South Korea' },
];

export default function CompetitorsPage() {
  const router = useRouter();
  const [competitors, setCompetitors] = useState<PaginatedCompetitors>({
    data: [],
    total: 0,
    page: 1,
    page_size: 20,
    total_pages: 0,
    has_next: false,
    has_previous: false
  });
  
  const [stats, setStats] = useState<CompetitorStats>({
    total_competitors: 0,
    active_competitors: 0,
    inactive_competitors: 0,
    competitors_with_ads: 0,
    total_ads_across_competitors: 0,
    avg_ads_per_competitor: 0
  });
  
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState<'all' | 'active' | 'inactive'>('all');
  const [sortBy, setSortBy] = useState('created_at');
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');
  const [currentPage, setCurrentPage] = useState(1);
  const [selectedIds, setSelectedIds] = useState<number[]>([]);
  const [isConfirmDialogOpen, setIsConfirmDialogOpen] = useState(false);
  
  // Form state
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [selectedCompetitor, setSelectedCompetitor] = useState<Competitor | null>(null);
  const [formData, setFormData] = useState<CompetitorFormData>({
    name: '',
    page_id: '',
    is_active: true
  });
  const [formLoading, setFormLoading] = useState(false);

  const [showScrapeDialog, setShowScrapeDialog] = useState(false);
  const [scrapeConfig, setScrapeConfig] = useState<ScrapeConfig>({
    countries: ['AE'],
    max_pages: 10,
    delay_between_requests: 2,
    active_status: 'active',
  });
  const [scrapingCompetitor, setScrapingCompetitor] = useState<Competitor | null>(null);
  const [scrapeLoading, setScrapeLoading] = useState(false);

  const visibleCompetitorIds = useMemo(() => competitors.data.map(c => c.id), [competitors.data]);
  const isAllVisibleSelected = useMemo(() => selectedIds.length > 0 && visibleCompetitorIds.every(id => selectedIds.includes(id)), [selectedIds, visibleCompetitorIds]);

  // Load data
  useEffect(() => {
    loadData();
  }, [currentPage, searchTerm, statusFilter, sortBy, sortOrder]);

  const loadData = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const [competitorsData, statsData] = await Promise.all([
        getCompetitors({
          page: currentPage,
          page_size: 20,
          is_active: statusFilter === 'all' ? undefined : statusFilter === 'active',
          search: searchTerm || undefined,
          sort_by: sortBy,
          sort_order: sortOrder
        }),
        getCompetitorStats()
      ]);
      
      setCompetitors(competitorsData);
      setStats(statsData);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to load data');
    } finally {
      setLoading(false);
    }
  };

  const handleCreateCompetitor = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      setFormLoading(true);
      
      const competitorData: CompetitorCreate = {
        name: formData.name,
        page_id: formData.page_id,
        is_active: formData.is_active
      };
      
      await createCompetitor(competitorData);
      setIsAddDialogOpen(false);
      setFormData({ name: '', page_id: '', is_active: true });
      loadData();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to create competitor');
    } finally {
      setFormLoading(false);
    }
  };

  const handleUpdateCompetitor = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedCompetitor) return;
    
    try {
      setFormLoading(true);
      
      const updateData: CompetitorUpdate = {
        name: formData.name,
        page_id: formData.page_id,
        is_active: formData.is_active
      };
      
      await updateCompetitor(selectedCompetitor.id, updateData);
      setIsEditDialogOpen(false);
      setSelectedCompetitor(null);
      setFormData({ name: '', page_id: '', is_active: true });
      loadData();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to update competitor');
    } finally {
      setFormLoading(false);
    }
  };

  const handleDeleteCompetitor = async (competitor: Competitor) => {
    setSelectedIds([competitor.id]);
    setIsConfirmDialogOpen(true);
  };

  const handleBulkDelete = async () => {
    if (selectedIds.length === 0) return;
    
    try {
      const result = await bulkDeleteCompetitors(selectedIds);
      alert(`${result.message} Soft-deleted: ${result.soft_deleted_count}, Hard-deleted: ${result.hard_deleted_count}.`);
      setSelectedIds([]);
      loadData();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to delete competitors');
    } finally {
      setIsConfirmDialogOpen(false);
    }
  };

  const handleScrape = async (competitor: Competitor) => {
    try {
      setScrapingCompetitor(competitor);
      setShowScrapeDialog(true);
    } catch (err) {
      alert(`Failed to open scraping dialog: ${err instanceof Error ? err.message : 'Unknown error'}`);
    }
  };

  const startScrape = async () => {
    if (!scrapingCompetitor) return;
    
    try {
      setScrapeLoading(true);
      
      const payload: CompetitorScrapeRequest = {
        countries: scrapeConfig.countries,
        max_pages: scrapeConfig.max_pages,
        delay_between_requests: scrapeConfig.delay_between_requests,
        active_status: scrapeConfig.active_status,
        date_from: scrapeConfig.date_from,
        date_to: scrapeConfig.date_to,
      };
      
      const result = await scrapeCompetitorAds(scrapingCompetitor.id, payload);
      
      // Store task in localStorage for tracking
      const taskItem = {
        id: result.task_id,
        competitor_name: scrapingCompetitor.name,
        competitor_page_id: scrapingCompetitor.page_id,
        status: {
          task_id: result.task_id,
          state: 'PENDING' as const,
          status: result.status,
        },
        created_at: new Date().toISOString(),
        config: scrapeConfig,
      };
      
      // Get existing tasks from localStorage
      const existingTasks = localStorage.getItem('scrapingTasks');
      const tasks = existingTasks ? JSON.parse(existingTasks) : [];
      
      // Add new task to the beginning of the array
      tasks.unshift(taskItem);
      
      // Keep only the last 50 tasks to prevent localStorage from growing too large
      if (tasks.length > 50) {
        tasks.splice(50);
      }
      
      // Save back to localStorage
      localStorage.setItem('scrapingTasks', JSON.stringify(tasks));
      
      alert(`Scraping started successfully!\n\nTask ID: ${result.task_id}\nStatus: ${result.status}\n\nThis will take a few minutes. You can check the progress in the Tasks page.`);
      
      setShowScrapeDialog(false);
      setScrapingCompetitor(null);
      
      // Reload data after a short delay
      setTimeout(() => {
        loadData();
      }, 3000);
    } catch (err) {
      alert(`Failed to start scraping: ${err instanceof Error ? err.message : 'Unknown error'}`);
    } finally {
      setScrapeLoading(false);
    }
  };

  const toggleCountry = (country: string) => {
    setScrapeConfig(prev => {
      let countries = [...prev.countries];
      if (country === 'ALL') {
        // If selecting ALL, replace any existing selection with just 'ALL'
        countries = countries.includes('ALL') ? [] : ['ALL'];
      } else {
        // Selecting specific country while ALL is selected should clear ALL
        countries = countries.filter(c => c !== 'ALL');
        if (countries.includes(country)) {
          countries = countries.filter(c => c !== country);
        } else {
          countries.push(country);
        }
      }
      // Ensure at least one country is selected; default to ALL if none
      if (countries.length === 0) {
        countries = ['ALL'];
      }
      return { ...prev, countries };
    });
  };

  const handleViewCompetitor = (competitor: Competitor) => {
    router.push(`/competitors/${competitor.id}`);
  };

  const openEditDialog = (competitor: Competitor) => {
    setSelectedCompetitor(competitor);
    setFormData({
      name: competitor.name,
      page_id: competitor.page_id,
      is_active: competitor.is_active
    });
    setIsEditDialogOpen(true);
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  const resetForm = () => {
    setFormData({ name: '', page_id: '', is_active: true });
    setSelectedCompetitor(null);
  };

  const handleSelectOne = (id: number, checked: boolean) => {
    setSelectedIds(prev => 
      checked ? [...prev, id] : prev.filter(i => i !== id)
    );
  };

  const handleSelectAll = (checked: boolean) => {
    if (checked) {
      const allVisibleIds = competitors.data.map(c => c.id);
      setSelectedIds(prev => [...new Set([...prev, ...allVisibleIds])]);
    } else {
      const allVisibleIds = competitors.data.map(c => c.id);
      setSelectedIds(prev => prev.filter(id => !allVisibleIds.includes(id)));
    }
  };

  if (loading) {
    return (
      <DashboardLayout>
        <div className="flex items-center justify-center h-64">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        </div>
      </DashboardLayout>
    );
  }

  return (
    <DashboardLayout>
      <div className="space-y-6">
        {/* Header */}
        <div className="flex flex-col space-y-4 md:flex-row md:items-center md:justify-between md:space-y-0">
          <div>
            <h1 className="text-3xl font-bold flex items-center gap-2">
              <Users className="h-8 w-8 text-photon-400" />
              Competitors
            </h1>
            <p className="text-muted-foreground">
              Manage your competitors and track their advertising performance
            </p>
          </div>
          <div className="flex items-center gap-3">
            <Button 
              onClick={() => router.push('/tasks')}
              variant="outline"
              className="border-border bg-photon-500/10 text-photon-400 hover:bg-photon-500/20"
            >
              <Activity className="h-4 w-4 mr-2" />
              View Tasks
            </Button>
            
            <Button onClick={() => { resetForm(); setIsAddDialogOpen(true); }} className="bg-photon-500 text-photon-950 hover:bg-photon-400">
              <Plus className="h-4 w-4 mr-2" />
              Add Competitor
            </Button>
          </div>
        </div>

        {error && (
          <Card className="bg-red-900/20 border-red-500">
            <CardContent className="p-4">
              <div className="flex items-center">
                <AlertCircle className="h-5 w-5 text-red-400 mr-2" />
                <span className="text-red-300">{error}</span>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Statistics Cards */}
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-muted-foreground">Total</CardTitle>
              <Users className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{stats.total_competitors}</div>
              <p className="text-xs text-photon-400">Competitors</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-muted-foreground">Active</CardTitle>
              <CheckCircle className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-green-400">{stats.active_competitors}</div>
              <p className="text-xs text-muted-foreground">Currently Tracking</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-muted-foreground">Inactive</CardTitle>
              <XCircle className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-red-400">{stats.inactive_competitors}</div>
              <p className="text-xs text-muted-foreground">Paused</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-muted-foreground">With Ads</CardTitle>
              <Download className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-photon-400">{stats.competitors_with_ads}</div>
              <p className="text-xs text-muted-foreground">Have Data</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-muted-foreground">Total Ads</CardTitle>
              <Eye className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{stats.total_ads_across_competitors}</div>
              <p className="text-xs text-muted-foreground">Collected</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-muted-foreground">Avg Ads</CardTitle>
              <Users className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{stats.avg_ads_per_competitor.toFixed(1)}</div>
              <p className="text-xs text-muted-foreground">Per Competitor</p>
            </CardContent>
          </Card>
        </div>

        {/* Filters and Search */}
        <div className="flex flex-col sm:flex-row gap-4">
          <div className="flex-1">
            <div className="relative">
              <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Search competitors..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 bg-card border-border"
              />
            </div>
          </div>
          
          <Select value={statusFilter} onValueChange={(value: 'all' | 'active' | 'inactive') => setStatusFilter(value)}>
            <SelectTrigger className="w-48 bg-card border-border">
              <SelectValue placeholder="Filter by status" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Competitors</SelectItem>
              <SelectItem value="active">Active Only</SelectItem>
              <SelectItem value="inactive">Inactive Only</SelectItem>
            </SelectContent>
          </Select>

          <Select value={sortBy} onValueChange={setSortBy}>
            <SelectTrigger className="w-48 bg-card border-border">
              <SelectValue placeholder="Sort by" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="created_at">Date Created</SelectItem>
              <SelectItem value="name">Name</SelectItem>
              <SelectItem value="updated_at">Last Updated</SelectItem>
            </SelectContent>
          </Select>
        </div>

        {/* Competitors List */}
        <div className="grid gap-4">
          {selectedIds.length > 0 && (
            <div className="bg-muted p-2 rounded-md mb-4 flex justify-between items-center">
              <span className="text-sm font-medium">{selectedIds.length} competitor(s) selected</span>
              <Button variant="destructive" size="sm" onClick={() => setIsConfirmDialogOpen(true)}>
                <Trash2 className="mr-2 h-4 w-4" />
                Delete Selected
              </Button>
            </div>
          )}
          <div className="overflow-x-auto">
            <table className="w-full text-sm">
              <thead>
                <tr className="border-b">
                  <th className="p-2 w-10 text-left">
                    <Checkbox
                      checked={isAllVisibleSelected}
                      onCheckedChange={(checked) => handleSelectAll(Boolean(checked))}
                      aria-label="Select all"
                    />
                  </th>
                  <th className="p-2 text-left font-semibold">Name</th>
                  <th className="p-2 text-left font-semibold">Page ID</th>
                  <th className="p-2 text-left font-semibold">Status</th>
                  <th className="p-2 text-left font-semibold">Ads</th>
                  <th className="p-2 text-left font-semibold">Last Updated</th>
                  <th className="p-2 text-left font-semibold">Actions</th>
                </tr>
              </thead>
              <tbody>
                {loading ? (
                  <tr><td colSpan={7} className="text-center p-4">Loading...</td></tr>
                ) : error ? (
                  <tr><td colSpan={7} className="text-center p-4 text-red-500">{error}</td></tr>
                ) : competitors.data.length === 0 ? (
                  <tr><td colSpan={7} className="text-center p-4">No competitors found.</td></tr>
                ) : (
                  competitors.data.map(c => (
                    <tr key={c.id} className="border-b">
                       <td className="p-2">
                        <Checkbox
                          checked={selectedIds.includes(c.id)}
                          onCheckedChange={(checked) => handleSelectOne(c.id, Boolean(checked))}
                          aria-label={`Select ${c.name}`}
                        />
                      </td>
                      <td className="p-2 font-medium">{c.name}</td>
                      <td className="p-2 text-muted-foreground">{c.page_id}</td>
                      <td className="p-2">
                        <Badge variant={c.is_active ? 'default' : 'secondary'}>
                          {c.is_active ? 'Active' : 'Inactive'}
                        </Badge>
                      </td>
                      <td className="p-2">{c.ads_count}</td>
                      <td className="p-2 text-muted-foreground">{formatDate(c.updated_at)}</td>
                      <td className="p-2 flex items-center space-x-1">
                        <Button variant="ghost" size="icon" onClick={() => handleViewCompetitor(c)}><Eye className="h-4 w-4" /></Button>
                        <Button variant="ghost" size="icon" onClick={() => openEditDialog(c)}><Edit2 className="h-4 w-4" /></Button>
                        <Button variant="ghost" size="icon" onClick={() => handleScrape(c)}><Download className="h-4 w-4" /></Button>
                        <Button variant="ghost" size="icon" className="text-destructive" onClick={() => handleDeleteCompetitor(c)}><Trash2 className="h-4 w-4" /></Button>
                      </td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </div>
        </div>

        {/* Pagination */}
        {competitors.total_pages > 1 && (
          <div className="flex items-center justify-center gap-2 pt-6">
            <Button
              variant="outline"
              disabled={!competitors.has_previous}
              onClick={() => setCurrentPage(currentPage - 1)}
              className="border-border"
            >
              Previous
            </Button>
            
            <span className="text-sm text-muted-foreground">
              Page {currentPage} of {competitors.total_pages}
            </span>
            
            <Button
              variant="outline"
              disabled={!competitors.has_next}
              onClick={() => setCurrentPage(currentPage + 1)}
              className="border-border"
            >
              Next
            </Button>
          </div>
        )}

        {/* Add/Edit Dialog */}
        <Dialog open={isAddDialogOpen || isEditDialogOpen} onOpenChange={(open) => {
          if (!open) {
            setIsAddDialogOpen(false);
            setIsEditDialogOpen(false);
            setSelectedCompetitor(null);
          }
        }}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>{isEditDialogOpen ? 'Edit Competitor' : 'Add New Competitor'}</DialogTitle>
            </DialogHeader>
            <form onSubmit={isEditDialogOpen ? handleUpdateCompetitor : handleCreateCompetitor} className="space-y-4">
              <div>
                <Label htmlFor="name">Competitor Name</Label>
                <Input id="name" value={formData.name} onChange={(e) => setFormData(f => ({...f, name: e.target.value}))} required />
              </div>
              <div>
                <Label htmlFor="page_id">Facebook Page ID</Label>
                <Input id="page_id" value={formData.page_id} onChange={(e) => setFormData(f => ({...f, page_id: e.target.value}))} required />
              </div>
              <div className="flex items-center space-x-2">
                <Checkbox id="is_active" checked={formData.is_active} onCheckedChange={(checked) => setFormData(f => ({...f, is_active: Boolean(checked)}))} />
                <Label htmlFor="is_active">Active</Label>
              </div>
              <div className="flex justify-end space-x-2">
                <Button type="button" variant="outline" onClick={() => { setIsAddDialogOpen(false); setIsEditDialogOpen(false); }}>Cancel</Button>
                <Button type="submit" disabled={formLoading}>{formLoading ? 'Saving...' : 'Save'}</Button>
              </div>
            </form>
          </DialogContent>
        </Dialog>

        {/* Scrape Dialog */}
        <Dialog open={showScrapeDialog} onOpenChange={setShowScrapeDialog}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Scrape Ads for {scrapingCompetitor?.name}</DialogTitle>
              <DialogDescription>
                Configure scraping parameters for this competitor.
              </DialogDescription>
            </DialogHeader>
            <div className="space-y-4">
              <div>
                  <Label>Countries</Label>
                  <div className="grid grid-cols-2 gap-2 mt-2">
                      {COUNTRY_OPTIONS.map(country => (
                          <div key={country.value} className="flex items-center space-x-2">
                              <Checkbox
                                  id={`country-${country.value}`}
                                  checked={scrapeConfig.countries.includes(country.value)}
                                  onCheckedChange={() => toggleCountry(country.value)}
                              />
                              <Label htmlFor={`country-${country.value}`}>{country.label}</Label>
                          </div>
                      ))}
                  </div>
              </div>
              <div>
                <Label htmlFor="max_pages">Max Pages to Scrape</Label>
                <Input 
                  id="max_pages" 
                  type="number" 
                  value={scrapeConfig.max_pages} 
                  onChange={(e) => setScrapeConfig(s => ({...s, max_pages: parseInt(e.target.value, 10) || 1}))} 
                />
              </div>
               <div>
                <Label htmlFor="delay">Delay Between Requests (seconds)</Label>
                <Input 
                  id="delay" 
                  type="number" 
                  value={scrapeConfig.delay_between_requests} 
                  onChange={(e) => setScrapeConfig(s => ({...s, delay_between_requests: parseInt(e.target.value, 10) || 1}))}
                />
              </div>
              <div>
                <Label htmlFor="status">Ad Status</Label>
                <Select value={scrapeConfig.active_status} onValueChange={(v)=> setScrapeConfig(s=>({...s, active_status: v as 'active' | 'inactive' | 'all'}))}>
                  <SelectTrigger id="status" className="bg-card border-border">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="active">Active Only</SelectItem>
                    <SelectItem value="inactive">Inactive Only</SelectItem>
                    <SelectItem value="all">All</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label>Date Range</Label>
                <div className="flex gap-2">
                  <Input type="date" value={scrapeConfig.date_from || ''} onChange={(e)=> setScrapeConfig(s=>({...s, date_from: e.target.value}))} className="bg-card border-border flex-1" />
                  <span className="self-center">-</span>
                  <Input type="date" value={scrapeConfig.date_to || ''} onChange={(e)=> setScrapeConfig(s=>({...s, date_to: e.target.value}))} className="bg-card border-border flex-1" />
                </div>
              </div>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setShowScrapeDialog(false)}>Cancel</Button>
              <Button onClick={startScrape} disabled={scrapeLoading}>{scrapeLoading ? 'Starting...' : 'Start Scraping'}</Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>

        {/* Bulk Delete Confirmation Dialog */}
        <Dialog open={isConfirmDialogOpen} onOpenChange={setIsConfirmDialogOpen}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Are you absolutely sure?</DialogTitle>
              <DialogDescription>
                This action will delete {selectedIds.length} competitor(s). This may be a soft or hard delete depending on whether they have associated ads. This action cannot be undone.
              </DialogDescription>
            </DialogHeader>
            <DialogFooter>
              <Button variant="outline" onClick={() => setIsConfirmDialogOpen(false)}>Cancel</Button>
              <Button variant="destructive" onClick={handleBulkDelete}>Yes, delete</Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>

      </div>
    </DashboardLayout>
  );
} 


================================================
File: src/app/competitors/[id]/page.tsx
================================================
'use client';

import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { DashboardLayout } from '@/components/dashboard/layout';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Separator } from '@/components/ui/separator';
import { 
  ArrowLeft, 
  Users, 
  Activity, 
  TrendingUp, 
  Eye, 
  Download,
  Edit,
  Trash2,
  RefreshCw,
  Calendar,
  Target,
  BarChart3,
  Zap,
  AlertCircle,
  Settings,
  Globe,
  Clock,
  Filter
} from 'lucide-react';
import { 
  getCompetitor, 
  getCompetitorAds, 
  scrapeCompetitorAds,
  deleteCompetitor,
  type CompetitorDetail,
  type CompetitorScrapeRequest 
} from '@/lib/api';

interface CompetitorAd {
  id: number;
  ad_copy?: string;
  main_title?: string;
  main_body_text?: string;
  media_type?: string;
  media_url?: string;
  main_image_urls?: string[];
  impressions_text?: string;
  spend?: string;
  start_date?: string;
  end_date?: string;
  is_active?: boolean;
  created_at: string;
  updated_at: string;
  analysis?: {
    overall_score?: number;
    hook_score?: number;
    confidence_score?: number;
    target_audience?: string;
    content_themes?: string[];
  };
}

interface CompetitorAdsResponse {
  ads: {
    data: CompetitorAd[];
    total: number;
    page: number;
    page_size: number;
    total_pages: number;
    has_next: boolean;
    has_previous: boolean;
  };
}

interface ScrapeConfig {
  countries: string[];
  max_pages: number;
  delay_between_requests: number;
  active_status: 'active' | 'inactive' | 'all';
  date_from?: string; // YYYY-MM-DD
  date_to?: string;   // YYYY-MM-DD
}

const COUNTRY_OPTIONS = [
  { value: 'ALL', label: 'All Countries' },
  { value: 'AE', label: 'United Arab Emirates' },
  { value: 'US', label: 'United States' },
  { value: 'GB', label: 'United Kingdom' },
  { value: 'CA', label: 'Canada' },
  { value: 'AU', label: 'Australia' },
  { value: 'DE', label: 'Germany' },
  { value: 'FR', label: 'France' },
  { value: 'ES', label: 'Spain' },
  { value: 'IT', label: 'Italy' },
  { value: 'BR', label: 'Brazil' },
  { value: 'IN', label: 'India' },
  { value: 'SG', label: 'Singapore' },
  { value: 'HK', label: 'Hong Kong' },
  { value: 'JP', label: 'Japan' },
  { value: 'KR', label: 'South Korea' },
];

export default function CompetitorDetailPage() {
  const params = useParams();
  const router = useRouter();
  const competitorId = parseInt(params.id as string);
  
  const [competitor, setCompetitor] = useState<CompetitorDetail | null>(null);
  const [ads, setAds] = useState<CompetitorAdsResponse | null>(null);
  const [loading, setLoading] = useState(true);
  const [adsLoading, setAdsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [scrapeLoading, setScrapeLoading] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [showScrapeDialog, setShowScrapeDialog] = useState(false);
  const [scrapeConfig, setScrapeConfig] = useState<ScrapeConfig>({
    countries: ['ALL'],
    max_pages: 50,
    delay_between_requests: 2,
    active_status: 'active',
  });

  useEffect(() => {
    loadCompetitor();
    loadAds();
  }, [competitorId, currentPage]);

  const loadCompetitor = async () => {
    try {
      setLoading(true);
      setError(null);
      const data = await getCompetitor(competitorId);
      setCompetitor(data);
    } catch (err) {
      setError(`Failed to load competitor: ${err instanceof Error ? err.message : 'Unknown error'}`);
    } finally {
      setLoading(false);
    }
  };

  const loadAds = async () => {
    try {
      setAdsLoading(true);
      const data = await getCompetitorAds(competitorId, {
        page: currentPage,
        page_size: 12
      });
      setAds(data);
    } catch (err) {
      console.error('Failed to load ads:', err);
    } finally {
      setAdsLoading(false);
    }
  };

  const handleScrape = async () => {
    if (!competitor) return;
    
    try {
      setScrapeLoading(true);
      
      const scrapeRequest: CompetitorScrapeRequest = {
        countries: scrapeConfig.countries,
        max_pages: scrapeConfig.max_pages,
        delay_between_requests: scrapeConfig.delay_between_requests,
        active_status: scrapeConfig.active_status,
        date_from: scrapeConfig.date_from,
        date_to: scrapeConfig.date_to,
      };
      
      const result = await scrapeCompetitorAds(competitorId, scrapeRequest);
      
      // Store task in localStorage for tracking
      const taskItem = {
        id: result.task_id,
        competitor_name: competitor.name,
        competitor_page_id: competitor.page_id,
        status: {
          task_id: result.task_id,
          state: 'PENDING' as const,
          status: result.status,
        },
        created_at: new Date().toISOString(),
        config: scrapeConfig,
      };
      
      // Get existing tasks from localStorage
      const existingTasks = localStorage.getItem('scrapingTasks');
      const tasks = existingTasks ? JSON.parse(existingTasks) : [];
      
      // Add new task to the beginning of the array
      tasks.unshift(taskItem);
      
      // Keep only the last 50 tasks to prevent localStorage from growing too large
      if (tasks.length > 50) {
        tasks.splice(50);
      }
      
      // Save back to localStorage
      localStorage.setItem('scrapingTasks', JSON.stringify(tasks));
      
      alert(`Scraping started successfully!\n\nTask ID: ${result.task_id}\nStatus: ${result.status}\n\nThis will take a few minutes. You can check the progress in the Tasks page.`);
      
      setShowScrapeDialog(false);
      
      // Reload data after a short delay
      setTimeout(() => {
        loadCompetitor();
        loadAds();
      }, 3000);
    } catch (err) {
      alert(`Failed to start scraping: ${err instanceof Error ? err.message : 'Unknown error'}`);
    } finally {
      setScrapeLoading(false);
    }
  };

  const handleDelete = async () => {
    if (!competitor) return;
    
    if (confirm(`Are you sure you want to delete ${competitor.name}?`)) {
      try {
        await deleteCompetitor(competitorId);
        router.push('/competitors');
      } catch (err) {
        alert(`Failed to delete competitor: ${err instanceof Error ? err.message : 'Unknown error'}`);
      }
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  const getScoreColor = (score?: number) => {
    if (!score) return 'text-muted-foreground';
    if (score >= 8) return 'text-green-400';
    if (score >= 6) return 'text-yellow-400';
    return 'text-red-400';
  };

  const getScoreBadge = (score?: number) => {
    if (!score) return 'secondary';
    if (score >= 8) return 'default';
    if (score >= 6) return 'secondary';
    return 'destructive';
  };

  const toggleCountry = (country: string) => {
    setScrapeConfig(prev => {
      let countries = [...prev.countries];
      if (country === 'ALL') {
        countries = countries.includes('ALL') ? [] : ['ALL'];
      } else {
        countries = countries.filter(c => c !== 'ALL');
        if (countries.includes(country)) {
          countries = countries.filter(c => c !== country);
        } else {
          countries.push(country);
        }
      }
      if (countries.length === 0) {
        countries = ['ALL'];
      }
      return { ...prev, countries };
    });
  };

  if (loading) {
    return (
      <DashboardLayout>
        <div className="flex items-center justify-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-photon-400"></div>
        </div>
      </DashboardLayout>
    );
  }

  if (error || !competitor) {
    return (
      <DashboardLayout>
        <div className="space-y-6">
          <div className="flex items-center gap-4">
            <Button variant="outline" onClick={() => router.back()}>
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back
            </Button>
          </div>
          
          <Card className="bg-red-900/20 border-red-500">
            <CardContent className="p-6">
              <div className="flex items-center">
                <AlertCircle className="h-5 w-5 text-red-400 mr-2" />
                <span className="text-red-300">{error || 'Competitor not found'}</span>
              </div>
            </CardContent>
          </Card>
        </div>
      </DashboardLayout>
    );
  }

  return (
    <DashboardLayout>
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <Button variant="outline" onClick={() => router.back()} className="border-border">
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Competitors
            </Button>
            
            <div>
              <h1 className="text-3xl font-bold flex items-center gap-3">
                <Target className="h-8 w-8 text-photon-400" />
                {competitor.name}
              </h1>
              <p className="text-muted-foreground mt-1">
                Competitor Analysis & Performance Insights
              </p>
            </div>
          </div>
          
          <div className="flex items-center gap-2">
            <Badge 
              variant={competitor.is_active ? "default" : "secondary"}
              className={competitor.is_active ? "bg-green-500/20 text-green-400" : "bg-red-500/20 text-red-400"}
            >
              {competitor.is_active ? 'Active' : 'Inactive'}
            </Badge>
            
            <Button 
              variant="outline" 
              size="sm"
              onClick={() => router.push('/tasks')}
              className="border-border bg-photon-500/10 text-photon-400 hover:bg-photon-500/20"
            >
              <Activity className="h-4 w-4 mr-2" />
              View Tasks
            </Button>
            
            <Button 
              variant="outline" 
              size="sm" 
              onClick={() => router.push(`/competitors/${competitorId}/edit`)}
              className="border-border"
            >
              <Edit className="h-4 w-4 mr-2" />
              Edit
            </Button>
            
            <Dialog open={showScrapeDialog} onOpenChange={setShowScrapeDialog}>
              <DialogTrigger asChild>
                <Button 
                  variant="outline" 
                  size="sm"
                  className="border-border bg-photon-500/10 text-photon-400 hover:bg-photon-500/20"
                >
                  <Download className="h-4 w-4 mr-2" />
                  Configure Scrape
                </Button>
              </DialogTrigger>
              <DialogContent className="sm:max-w-2xl max-h-[90vh] overflow-y-auto">
                <DialogHeader>
                  <DialogTitle className="flex items-center gap-2">
                    <Settings className="h-5 w-5 text-photon-400" />
                    Scraping Configuration
                  </DialogTitle>
                  <DialogDescription>
                    Configure the parameters for scraping Facebook ads for {competitor.name}
                  </DialogDescription>
                </DialogHeader>
                
                <div className="space-y-6">
                  {/* Countries */}
                  <div className="space-y-4">
                    <div className="flex items-center gap-2">
                      <Globe className="h-4 w-4 text-photon-400" />
                      <h3 className="text-lg font-semibold">Target Countries</h3>
                    </div>
                    
                    <div className="grid grid-cols-3 gap-2 max-h-40 overflow-y-auto">
                      {COUNTRY_OPTIONS.map((country) => (
                        <div key={country.value} className="flex items-center space-x-2">
                          <input
                            type="checkbox"
                            id={country.value}
                            checked={scrapeConfig.countries.includes(country.value)}
                            onChange={() => toggleCountry(country.value)}
                            className="rounded border-border"
                          />
                          <label htmlFor={country.value} className="text-sm">
                            {country.label}
                          </label>
                        </div>
                      ))}
                    </div>
                  </div>

                  <Separator />

                  {/* Scraping Parameters */}
                  <div className="space-y-4">
                    <div className="flex items-center gap-2">
                      <Clock className="h-4 w-4 text-photon-400" />
                      <h3 className="text-lg font-semibold">Scraping Parameters</h3>
                    </div>
                    
                    <div className="grid grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label htmlFor="max_pages">Max Pages</Label>
                        <Input
                          id="max_pages"
                          type="number"
                          min="1"
                          max="100"
                          value={scrapeConfig.max_pages}
                          onChange={(e) => setScrapeConfig(prev => ({ ...prev, max_pages: parseInt(e.target.value) || 10 }))}
                          className="bg-card border-border"
                        />
                        <p className="text-xs text-muted-foreground">Number of pages to scrape (1-100)</p>
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="delay_between_requests">Delay (seconds)</Label>
                        <Input
                          id="delay_between_requests"
                          type="number"
                          min="1"
                          max="10"
                          value={scrapeConfig.delay_between_requests}
                          onChange={(e) => setScrapeConfig(prev => ({ ...prev, delay_between_requests: parseInt(e.target.value) || 2 }))}
                          className="bg-card border-border"
                        />
                        <p className="text-xs text-muted-foreground">Delay between requests (1-10 seconds)</p>
                      </div>
                    </div>
                  </div>

                  {/* Active Status & Date Range */}
                  <div className="space-y-4">
                    <div className="flex items-center gap-2">
                      <Eye className="h-4 w-4 text-photon-400" />
                      <h3 className="text-lg font-semibold">Ad Status & Date Range</h3>
                    </div>
                    <div className="grid grid-cols-2 gap-4">
                      {/* Active Only Switch */}
                      <div className="space-y-2 flex flex-col">
                        <Label htmlFor="active_only">Active Ads Only</Label>
                        <Select
                          value={scrapeConfig.active_status}
                          onValueChange={(value) => setScrapeConfig(prev => ({ ...prev, active_status: value as 'active' | 'inactive' | 'all'}))}
                        >
                          <SelectTrigger id="active_only" className="bg-card border-border">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="active">Active Only</SelectItem>
                            <SelectItem value="inactive">Inactive Only</SelectItem>
                            <SelectItem value="all">All</SelectItem>
                          </SelectContent>
                        </Select>
                        <p className="text-xs text-muted-foreground">Choose which ads to scrape.</p>
                      </div>
                      {/* Date range inputs */}
                      <div className="space-y-2">
                        <Label>Date Range</Label>
                        <div className="flex gap-2">
                          <Input type="date" value={scrapeConfig.date_from || ''} onChange={(e)=> setScrapeConfig(prev=>({...prev, date_from: e.target.value}))} className="bg-card border-border flex-1" />
                          <span className="self-center">-</span>
                          <Input type="date" value={scrapeConfig.date_to || ''} onChange={(e)=> setScrapeConfig(prev=>({...prev, date_to: e.target.value}))} className="bg-card border-border flex-1" />
                        </div>
                        <p className="text-xs text-muted-foreground">Leave blank for no date filtering.</p>
                      </div>
                    </div>
                  </div>

                  {/* Summary */}
                  <div className="bg-card border border-border rounded-lg p-4">
                    <h4 className="font-semibold mb-2">Scraping Summary</h4>
                    <div className="text-sm text-muted-foreground space-y-1">
                      <p>â€¢ Target: {competitor.name} ({competitor.page_id})</p>
                      <p>â€¢ Countries: {scrapeConfig.countries.join(', ')}</p>
                      <p>â€¢ Max pages: {scrapeConfig.max_pages} pages</p>
                      <p>â€¢ Active status: {scrapeConfig.active_status}</p>
                      <p>â€¢ Date range: {scrapeConfig.date_from || 'Any'} to {scrapeConfig.date_to || 'Any'}</p>
                      <p>â€¢ Estimated ads: ~{scrapeConfig.max_pages * 30} ads</p>
                      <p>â€¢ Estimated time: ~{Math.ceil((scrapeConfig.max_pages * scrapeConfig.delay_between_requests) / 60)} minutes</p>
                    </div>
                  </div>
                  
                  <div className="flex gap-3 pt-4">
                    <Button 
                      onClick={handleScrape} 
                      disabled={scrapeLoading || scrapeConfig.countries.length === 0}
                      className="flex-1 bg-photon-500 text-photon-950 hover:bg-photon-400"
                    >
                      {scrapeLoading ? (
                        <>
                          <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                          Starting Scrape...
                        </>
                      ) : (
                        <>
                          <Download className="h-4 w-4 mr-2" />
                          Start Scraping
                        </>
                      )}
                    </Button>
                    <Button 
                      variant="outline" 
                      onClick={() => setShowScrapeDialog(false)}
                      className="flex-1 border-border"
                    >
                      Cancel
                    </Button>
                  </div>
                </div>
              </DialogContent>
            </Dialog>
            
            <Button 
              variant="outline" 
              size="sm" 
              onClick={handleDelete}
              className="border-border text-red-400 hover:text-red-300"
            >
              <Trash2 className="h-4 w-4 mr-2" />
              Delete
            </Button>
          </div>
        </div>

        {/* Stats Cards */}
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-muted-foreground">Total Ads</CardTitle>
              <Eye className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{competitor.ads_count}</div>
              <p className="text-xs text-photon-400">Collected</p>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-muted-foreground">Active Ads</CardTitle>
              <Activity className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-green-400">{competitor.active_ads_count}</div>
              <p className="text-xs text-muted-foreground">Currently Running</p>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-muted-foreground">Analyzed</CardTitle>
              <BarChart3 className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-photon-400">{competitor.analyzed_ads_count}</div>
              <p className="text-xs text-muted-foreground">With AI Analysis</p>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-muted-foreground">Page ID</CardTitle>
              <Users className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-lg font-bold">{competitor.page_id}</div>
              <p className="text-xs text-muted-foreground">Facebook Page</p>
            </CardContent>
          </Card>
        </div>

        {/* Main Content */}
        <Tabs defaultValue="ads" className="space-y-6">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="ads">Ads Gallery</TabsTrigger>
            <TabsTrigger value="analytics">Analytics</TabsTrigger>
            <TabsTrigger value="details">Details</TabsTrigger>
          </TabsList>
          
          <TabsContent value="ads" className="space-y-6">
            <div className="flex items-center justify-between">
              <h2 className="text-2xl font-bold">Ad Gallery</h2>
              <Button variant="outline" onClick={loadAds} disabled={adsLoading} className="border-border">
                <RefreshCw className={`h-4 w-4 mr-2 ${adsLoading ? 'animate-spin' : ''}`} />
                Refresh
              </Button>
            </div>
            
            {adsLoading ? (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {[1, 2, 3, 4, 5, 6].map((i) => (
                  <div key={i} className="bg-card rounded-xl border animate-pulse h-96">
                    <div className="p-6">
                      <div className="h-4 bg-iridium-700 rounded w-3/4 mb-2"></div>
                      <div className="h-3 bg-iridium-700 rounded w-1/2 mb-4"></div>
                      <div className="h-32 bg-iridium-700 rounded-lg mb-4"></div>
                      <div className="space-y-2">
                        <div className="h-4 bg-iridium-700 rounded w-full"></div>
                        <div className="h-3 bg-iridium-700 rounded w-5/6"></div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            ) : ads?.ads.data.length === 0 ? (
              <Card className="p-12 text-center">
                <CardContent>
                  <Eye className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                  <h3 className="text-lg font-semibold mb-2">No Ads Found</h3>
                  <p className="text-muted-foreground mb-4">
                    This competitor doesn't have any ads yet.
                  </p>
                  <Button onClick={() => setShowScrapeDialog(true)} className="bg-photon-500 text-photon-950 hover:bg-photon-400">
                    <Download className="h-4 w-4 mr-2" />
                    Configure Scraping
                  </Button>
                </CardContent>
              </Card>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {ads?.ads.data.map((ad) => (
                  <Card key={ad.id} className="bg-card border-border hover:shadow-lg transition-shadow">
                    <CardContent className="p-6">
                      <div className="space-y-4">
                        {/* Ad Title */}
                        <div>
                          <h3 className="font-semibold text-lg line-clamp-2">
                            {ad.main_title || ad.ad_copy || 'Untitled Ad'}
                          </h3>
                          <p className="text-sm text-muted-foreground">
                            {formatDate(ad.created_at)}
                          </p>
                        </div>
                        
                        {/* Media */}
                        {ad.main_image_urls && ad.main_image_urls.length > 0 && (
                          <div className="aspect-video bg-iridium-800 rounded-lg flex items-center justify-center">
                            <img 
                              src={ad.main_image_urls[0]} 
                              alt="Ad creative"
                              className="max-h-full max-w-full object-contain rounded-lg"
                              onError={(e) => {
                                e.currentTarget.style.display = 'none';
                              }}
                            />
                          </div>
                        )}
                        
                        {/* Ad Copy */}
                        {ad.main_body_text && (
                          <p className="text-sm text-foreground line-clamp-3">
                            {ad.main_body_text}
                          </p>
                        )}
                        
                        {/* Metrics */}
                        <div className="flex flex-wrap gap-2">
                          {ad.is_active && (
                            <Badge variant="default" className="bg-green-500/20 text-green-400">
                              Active
                            </Badge>
                          )}
                          {ad.analysis?.overall_score && (
                            <Badge variant={getScoreBadge(ad.analysis.overall_score)}>
                              Score: {ad.analysis.overall_score.toFixed(1)}
                            </Badge>
                          )}
                          {ad.impressions_text && (
                            <Badge variant="secondary" className="bg-photon-500/20 text-photon-400">
                              {ad.impressions_text}
                            </Badge>
                          )}
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            )}
            
            {/* Pagination */}
            {ads && ads.ads.total_pages > 1 && (
              <div className="flex items-center justify-center gap-2 pt-6">
                <Button
                  variant="outline"
                  disabled={!ads.ads.has_previous}
                  onClick={() => setCurrentPage(prev => prev - 1)}
                  className="border-border"
                >
                  Previous
                </Button>
                
                <span className="text-sm text-muted-foreground">
                  Page {ads.ads.page} of {ads.ads.total_pages}
                </span>
                
                <Button
                  variant="outline"
                  disabled={!ads.ads.has_next}
                  onClick={() => setCurrentPage(prev => prev + 1)}
                  className="border-border"
                >
                  Next
                </Button>
              </div>
            )}
          </TabsContent>
          
          <TabsContent value="analytics" className="space-y-6">
            <h2 className="text-2xl font-bold">Performance Analytics</h2>
            
            <div className="grid gap-6 md:grid-cols-2">
              <Card>
                <CardHeader>
                  <CardTitle>Ad Performance Overview</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="flex justify-between items-center">
                      <span className="text-muted-foreground">Total Ads</span>
                      <span className="font-bold">{competitor.ads_count}</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-muted-foreground">Active Ads</span>
                      <span className="font-bold text-green-400">{competitor.active_ads_count}</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-muted-foreground">Analyzed</span>
                      <span className="font-bold text-photon-400">{competitor.analyzed_ads_count}</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-muted-foreground">Success Rate</span>
                      <span className="font-bold">
                        {competitor.ads_count > 0 ? 
                          Math.round((competitor.active_ads_count / competitor.ads_count) * 100) : 0}%
                      </span>
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader>
                  <CardTitle>Recent Activity</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="flex justify-between items-center">
                      <span className="text-muted-foreground">Last Updated</span>
                      <span className="font-bold">{formatDate(competitor.updated_at)}</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-muted-foreground">Created</span>
                      <span className="font-bold">{formatDate(competitor.created_at)}</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-muted-foreground">Status</span>
                      <Badge variant={competitor.is_active ? "default" : "secondary"}>
                        {competitor.is_active ? 'Active' : 'Inactive'}
                      </Badge>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
          
          <TabsContent value="details" className="space-y-6">
            <h2 className="text-2xl font-bold">Competitor Details</h2>
            
            <Card>
              <CardHeader>
                <CardTitle>Basic Information</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid gap-4 md:grid-cols-2">
                  <div>
                    <label className="text-sm font-medium text-muted-foreground">Name</label>
                    <p className="text-lg font-semibold">{competitor.name}</p>
                  </div>
                  <div>
                    <label className="text-sm font-medium text-muted-foreground">Facebook Page ID</label>
                    <p className="text-lg font-semibold">{competitor.page_id}</p>
                  </div>
                  <div>
                    <label className="text-sm font-medium text-muted-foreground">Status</label>
                    <div className="mt-1">
                      <Badge variant={competitor.is_active ? "default" : "secondary"}>
                        {competitor.is_active ? 'Active' : 'Inactive'}
                      </Badge>
                    </div>
                  </div>
                  <div>
                    <label className="text-sm font-medium text-muted-foreground">Created Date</label>
                    <p className="text-lg font-semibold">{formatDate(competitor.created_at)}</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </DashboardLayout>
  );
} 


================================================
File: src/app/tasks/page.tsx
================================================
'use client';

import { useState, useEffect } from 'react';
import { DashboardLayout } from '@/components/dashboard/layout';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { 
  Activity, 
  CheckCircle, 
  XCircle, 
  Clock, 
  RefreshCw,
  AlertCircle,
  BarChart3,
  Eye,
  Trash2,
  Download,
  Calendar,
  Target,
  Database,
  TrendingUp,
  FileText,
  Settings,
  Globe,
  Timer
} from 'lucide-react';
import { getScrapingStatus } from '@/lib/api';

interface TaskResult {
  success: boolean;
  competitor_page_id: string;
  total_ads_scraped: number;
  database_stats: {
    total_processed: number;
    created: number;
    updated: number;
    errors: number;
    competitors_created: number;
    competitors_updated: number;
  };
  completion_time: string;
  task_id: string;
}

interface TaskStatus {
  task_id: string;
  state: 'PENDING' | 'SUCCESS' | 'FAILURE' | 'PROGRESS';
  status: string;
  result?: TaskResult;
  error?: string;
  info?: any;
  started_at?: string;
  completed_at?: string;
}

interface TaskItem {
  id: string;
  competitor_name: string;
  competitor_page_id: string;
  status: TaskStatus;
  created_at: string;
  config: {
    countries: string[];
    max_pages: number;
    delay_between_requests: number;
  };
}

export default function TasksPage() {
  const [tasks, setTasks] = useState<TaskItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [refreshing, setRefreshing] = useState(false);
  const [selectedTask, setSelectedTask] = useState<TaskItem | null>(null);
  const [showTaskDetails, setShowTaskDetails] = useState(false);

  // Load tasks from localStorage and check their status
  useEffect(() => {
    loadTasks();
    const interval = setInterval(loadTasks, 5000); // Refresh every 5 seconds
    return () => clearInterval(interval);
  }, []);

  const loadTasks = async () => {
    try {
      setRefreshing(true);
      
      // Get tasks from localStorage
      const storedTasks = localStorage.getItem('scrapingTasks');
      if (!storedTasks) {
        setTasks([]);
        setLoading(false);
        return;
      }

      const taskItems: TaskItem[] = JSON.parse(storedTasks);
      
      // Update status for each task
      const updatedTasks = await Promise.all(
        taskItems.map(async (task) => {
          try {
            const statusResponse = await getScrapingStatus(task.id);
            return {
              ...task,
              status: statusResponse
            };
          } catch (err) {
            return {
              ...task,
              status: {
                ...task.status,
                state: 'FAILURE' as const,
                error: 'Failed to fetch status'
              }
            };
          }
        })
      );

      setTasks(updatedTasks);
      
      // Update localStorage with latest status
      localStorage.setItem('scrapingTasks', JSON.stringify(updatedTasks));
      
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to load tasks');
    } finally {
      setLoading(false);
      setRefreshing(false);
    }
  };

  const getStatusColor = (state: string) => {
    switch (state) {
      case 'SUCCESS': return 'bg-green-500/20 text-green-400';
      case 'FAILURE': return 'bg-red-500/20 text-red-400';
      case 'PROGRESS': return 'bg-yellow-500/20 text-yellow-400';
      case 'PENDING': return 'bg-blue-500/20 text-blue-400';
      default: return 'bg-gray-500/20 text-gray-400';
    }
  };

  const getStatusIcon = (state: string) => {
    switch (state) {
      case 'SUCCESS': return <CheckCircle className="h-4 w-4" />;
      case 'FAILURE': return <XCircle className="h-4 w-4" />;
      case 'PROGRESS': return <RefreshCw className="h-4 w-4 animate-spin" />;
      case 'PENDING': return <Clock className="h-4 w-4" />;
      default: return <AlertCircle className="h-4 w-4" />;
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const formatDuration = (startTime: string, endTime?: string) => {
    const start = new Date(startTime);
    const end = endTime ? new Date(endTime) : new Date();
    const diff = end.getTime() - start.getTime();
    const seconds = Math.floor(diff / 1000);
    const minutes = Math.floor(seconds / 60);
    
    if (minutes > 0) {
      return `${minutes}m ${seconds % 60}s`;
    }
    return `${seconds}s`;
  };

  const clearTask = (taskId: string) => {
    const updatedTasks = tasks.filter(task => task.id !== taskId);
    setTasks(updatedTasks);
    localStorage.setItem('scrapingTasks', JSON.stringify(updatedTasks));
  };

  const clearAllTasks = () => {
    if (confirm('Are you sure you want to clear all tasks?')) {
      setTasks([]);
      localStorage.removeItem('scrapingTasks');
    }
  };

  const getTaskStats = () => {
    const total = tasks.length;
    const completed = tasks.filter(t => t.status.state === 'SUCCESS').length;
    const failed = tasks.filter(t => t.status.state === 'FAILURE').length;
    const running = tasks.filter(t => ['PENDING', 'PROGRESS'].includes(t.status.state)).length;
    
    return { total, completed, failed, running };
  };

  const openTaskDetails = (task: TaskItem) => {
    setSelectedTask(task);
    setShowTaskDetails(true);
  };

  const stats = getTaskStats();

  if (loading) {
    return (
      <DashboardLayout>
        <div className="flex items-center justify-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-photon-400"></div>
        </div>
      </DashboardLayout>
    );
  }

  return (
    <DashboardLayout>
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold flex items-center gap-3">
              <Activity className="h-8 w-8 text-photon-400" />
              Scraping Tasks
            </h1>
            <p className="text-muted-foreground mt-1">
              Monitor and manage your competitor data scraping tasks
            </p>
          </div>
          
          <div className="flex items-center gap-2">
            <Button 
              variant="outline" 
              onClick={loadTasks}
              disabled={refreshing}
              className="border-border"
            >
              {refreshing ? (
                <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
              ) : (
                <RefreshCw className="h-4 w-4 mr-2" />
              )}
              Refresh
            </Button>
            
            {tasks.length > 0 && (
              <Button 
                variant="outline" 
                onClick={clearAllTasks}
                className="border-border text-red-400 hover:text-red-300"
              >
                <Trash2 className="h-4 w-4 mr-2" />
                Clear All
              </Button>
            )}
          </div>
        </div>

        {/* Stats Cards */}
        <div className="grid gap-6 md:grid-cols-4">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-muted-foreground">Total Tasks</CardTitle>
              <BarChart3 className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{stats.total}</div>
              <p className="text-xs text-muted-foreground">All time</p>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-muted-foreground">Completed</CardTitle>
              <CheckCircle className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-green-400">{stats.completed}</div>
              <p className="text-xs text-muted-foreground">Successfully finished</p>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-muted-foreground">Running</CardTitle>
              <RefreshCw className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-photon-400">{stats.running}</div>
              <p className="text-xs text-muted-foreground">Currently active</p>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-muted-foreground">Failed</CardTitle>
              <XCircle className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-red-400">{stats.failed}</div>
              <p className="text-xs text-muted-foreground">Errors occurred</p>
            </CardContent>
          </Card>
        </div>

        {/* Error Display */}
        {error && (
          <Card className="bg-red-900/20 border-red-500">
            <CardContent className="p-6">
              <div className="flex items-center">
                <AlertCircle className="h-5 w-5 text-red-400 mr-2" />
                <span className="text-red-300">{error}</span>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Tasks Content */}
        <div className="space-y-6">
          {tasks.length === 0 ? (
            <Card className="p-12 text-center">
              <CardContent>
                <Activity className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                <h3 className="text-lg font-semibold mb-2">No Tasks Yet</h3>
                <p className="text-muted-foreground mb-4">
                  Start scraping competitor ads to see tasks here.
                </p>
                <Button 
                  onClick={() => window.location.href = '/competitors'}
                  className="bg-photon-500 text-photon-950 hover:bg-photon-400"
                >
                  <Target className="h-4 w-4 mr-2" />
                  Go to Competitors
                </Button>
              </CardContent>
            </Card>
          ) : (
            <div className="space-y-4">
              {tasks.map((task) => (
                <Card 
                  key={task.id} 
                  className="bg-card border-border hover:shadow-lg transition-all cursor-pointer"
                  onClick={() => openTaskDetails(task)}
                >
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <div className="flex items-center gap-2">
                          {getStatusIcon(task.status.state)}
                          <Badge className={getStatusColor(task.status.state)}>
                            {task.status.state}
                          </Badge>
                        </div>
                        <div>
                          <CardTitle className="text-lg">{task.competitor_name}</CardTitle>
                          <CardDescription>
                            Page ID: {task.competitor_page_id} â€¢ Task ID: {task.id}
                          </CardDescription>
                        </div>
                      </div>
                      
                      <div className="flex items-center gap-2">
                        <Button 
                          variant="outline" 
                          size="sm"
                          onClick={(e) => {
                            e.stopPropagation();
                            openTaskDetails(task);
                          }}
                          className="border-border bg-photon-500/10 text-photon-400 hover:bg-photon-500/20"
                        >
                          <Eye className="h-4 w-4 mr-2" />
                          View Details
                        </Button>
                        <Button 
                          variant="outline" 
                          size="sm"
                          onClick={(e) => {
                            e.stopPropagation();
                            clearTask(task.id);
                          }}
                          className="border-border text-red-400 hover:text-red-300"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                  </CardHeader>
                  
                  <CardContent>
                    <div className="space-y-4">
                      {/* Task Configuration */}
                      <div className="flex flex-wrap gap-4 text-sm text-muted-foreground">
                        <div className="flex items-center gap-1">
                          <Calendar className="h-3 w-3" />
                          Started: {formatDate(task.created_at)}
                        </div>
                        <div className="flex items-center gap-1">
                          <Target className="h-3 w-3" />
                          Countries: {task.config.countries.join(', ')}
                        </div>
                        <div className="flex items-center gap-1">
                          <Database className="h-3 w-3" />
                          Max Pages: {task.config.max_pages}
                        </div>
                        <div className="flex items-center gap-1">
                          <Clock className="h-3 w-3" />
                          Duration: {formatDuration(task.created_at, task.status.result?.completion_time)}
                        </div>
                      </div>
                      
                      {/* Quick Results Summary */}
                      {task.status.state === 'SUCCESS' && task.status.result && (
                        <div className="flex gap-4 text-sm">
                          <div className="flex items-center gap-1">
                            <Download className="h-3 w-3 text-green-400" />
                            <span className="text-green-400">{task.status.result.total_ads_scraped} ads</span>
                          </div>
                          <div className="flex items-center gap-1">
                            <TrendingUp className="h-3 w-3 text-yellow-400" />
                            <span className="text-yellow-400">{task.status.result.database_stats.updated} updated</span>
                          </div>
                          <div className="flex items-center gap-1">
                            <CheckCircle className="h-3 w-3 text-blue-400" />
                            <span className="text-blue-400">{task.status.result.database_stats.created} created</span>
                          </div>
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}
        </div>

        {/* Task Details Modal */}
        <Dialog open={showTaskDetails} onOpenChange={setShowTaskDetails}>
          <DialogContent className="sm:max-w-4xl max-h-[90vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle className="flex items-center gap-2">
                <FileText className="h-5 w-5 text-photon-400" />
                Task Details - {selectedTask?.competitor_name}
              </DialogTitle>
              <DialogDescription>
                Complete information and results for task {selectedTask?.id}
              </DialogDescription>
            </DialogHeader>
            
            {selectedTask && (
              <div className="space-y-6">
                <Tabs defaultValue="overview" className="w-full">
                  <TabsList className="grid w-full grid-cols-4">
                    <TabsTrigger value="overview">Overview</TabsTrigger>
                    <TabsTrigger value="configuration">Configuration</TabsTrigger>
                    <TabsTrigger value="results">Results</TabsTrigger>
                    <TabsTrigger value="raw">Raw Data</TabsTrigger>
                  </TabsList>
                  
                  <TabsContent value="overview" className="space-y-4">
                    <div className="grid grid-cols-2 gap-4">
                      <Card>
                        <CardHeader>
                          <CardTitle className="text-sm">Task Information</CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-2 text-sm">
                          <div className="flex justify-between">
                            <span className="text-muted-foreground">Task ID:</span>
                            <span className="font-mono text-xs">{selectedTask.id}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-muted-foreground">Status:</span>
                            <Badge className={getStatusColor(selectedTask.status.state)}>
                              {selectedTask.status.state}
                            </Badge>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-muted-foreground">Started:</span>
                            <span>{formatDate(selectedTask.created_at)}</span>
                          </div>
                          {selectedTask.status.result?.completion_time && (
                            <div className="flex justify-between">
                              <span className="text-muted-foreground">Completed:</span>
                              <span>{formatDate(selectedTask.status.result.completion_time)}</span>
                            </div>
                          )}
                          <div className="flex justify-between">
                            <span className="text-muted-foreground">Duration:</span>
                            <span>{formatDuration(selectedTask.created_at, selectedTask.status.result?.completion_time)}</span>
                          </div>
                        </CardContent>
                      </Card>
                      
                      <Card>
                        <CardHeader>
                          <CardTitle className="text-sm">Competitor Information</CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-2 text-sm">
                          <div className="flex justify-between">
                            <span className="text-muted-foreground">Name:</span>
                            <span className="font-medium">{selectedTask.competitor_name}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-muted-foreground">Page ID:</span>
                            <span className="font-mono text-xs">{selectedTask.competitor_page_id}</span>
                          </div>
                        </CardContent>
                      </Card>
                    </div>
                    
                    <div className="bg-iridium-900/50 rounded-lg p-4">
                      <h4 className="font-medium mb-2">Current Status</h4>
                      <p className="text-sm text-muted-foreground">{selectedTask.status.status}</p>
                    </div>
                  </TabsContent>
                  
                  <TabsContent value="configuration" className="space-y-4">
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center gap-2">
                          <Settings className="h-4 w-4" />
                          Scraping Configuration
                        </CardTitle>
                      </CardHeader>
                      <CardContent className="space-y-4">
                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <label className="text-sm font-medium text-muted-foreground">Target Countries</label>
                            <div className="mt-1 flex flex-wrap gap-1">
                              {selectedTask.config.countries.map((country) => (
                                <Badge key={country} variant="outline" className="text-xs">
                                  {country}
                                </Badge>
                              ))}
                            </div>
                          </div>
                          <div>
                            <label className="text-sm font-medium text-muted-foreground">Max Pages</label>
                            <p className="text-lg font-bold">{selectedTask.config.max_pages}</p>
                          </div>
                          <div>
                            <label className="text-sm font-medium text-muted-foreground">Delay Between Requests</label>
                            <p className="text-lg font-bold">{selectedTask.config.delay_between_requests}s</p>
                          </div>
                          <div>
                            <label className="text-sm font-medium text-muted-foreground">Estimated Ads</label>
                            <p className="text-lg font-bold">~{selectedTask.config.max_pages * 30}</p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </TabsContent>
                  
                  <TabsContent value="results" className="space-y-4">
                    {selectedTask.status.state === 'SUCCESS' && selectedTask.status.result ? (
                      <div className="space-y-4">
                        <Card className="bg-green-900/20 border-green-500/20">
                          <CardHeader>
                            <CardTitle className="flex items-center gap-2 text-green-400">
                              <CheckCircle className="h-5 w-5" />
                              Task Completed Successfully
                            </CardTitle>
                          </CardHeader>
                          <CardContent>
                            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                              <div className="text-center p-4 bg-green-500/10 rounded-lg">
                                <div className="text-2xl font-bold text-green-400">
                                  {selectedTask.status.result.total_ads_scraped}
                                </div>
                                <div className="text-sm text-muted-foreground">Total Ads Scraped</div>
                              </div>
                              <div className="text-center p-4 bg-blue-500/10 rounded-lg">
                                <div className="text-2xl font-bold text-blue-400">
                                  {selectedTask.status.result.database_stats.created}
                                </div>
                                <div className="text-sm text-muted-foreground">New Ads Created</div>
                              </div>
                              <div className="text-center p-4 bg-yellow-500/10 rounded-lg">
                                <div className="text-2xl font-bold text-yellow-400">
                                  {selectedTask.status.result.database_stats.updated}
                                </div>
                                <div className="text-sm text-muted-foreground">Ads Updated</div>
                              </div>
                              <div className="text-center p-4 bg-red-500/10 rounded-lg">
                                <div className="text-2xl font-bold text-red-400">
                                  {selectedTask.status.result.database_stats.errors}
                                </div>
                                <div className="text-sm text-muted-foreground">Errors</div>
                              </div>
                            </div>
                            
                            <div className="mt-6 grid grid-cols-2 gap-4 text-sm">
                              <div className="flex justify-between">
                                <span className="text-muted-foreground">Total Processed:</span>
                                <span className="font-bold">{selectedTask.status.result.database_stats.total_processed}</span>
                              </div>
                              <div className="flex justify-between">
                                <span className="text-muted-foreground">Competitors Updated:</span>
                                <span className="font-bold">{selectedTask.status.result.database_stats.competitors_updated}</span>
                              </div>
                              <div className="flex justify-between">
                                <span className="text-muted-foreground">Success Rate:</span>
                                <span className="font-bold text-green-400">
                                  {selectedTask.status.result.database_stats.total_processed > 0 
                                    ? Math.round(((selectedTask.status.result.database_stats.total_processed - selectedTask.status.result.database_stats.errors) / selectedTask.status.result.database_stats.total_processed) * 100)
                                    : 0}%
                                </span>
                              </div>
                              <div className="flex justify-between">
                                <span className="text-muted-foreground">Completion Time:</span>
                                <span className="font-bold">{formatDate(selectedTask.status.result.completion_time)}</span>
                              </div>
                            </div>
                          </CardContent>
                        </Card>
                      </div>
                    ) : selectedTask.status.state === 'FAILURE' ? (
                      <Card className="bg-red-900/20 border-red-500/20">
                        <CardHeader>
                          <CardTitle className="flex items-center gap-2 text-red-400">
                            <XCircle className="h-5 w-5" />
                            Task Failed
                          </CardTitle>
                        </CardHeader>
                        <CardContent>
                          <p className="text-red-300">{selectedTask.status.error || 'Unknown error occurred'}</p>
                        </CardContent>
                      </Card>
                    ) : (
                      <Card>
                        <CardContent className="p-6 text-center">
                          <div className="flex items-center justify-center gap-2 mb-2">
                            {getStatusIcon(selectedTask.status.state)}
                            <span className="text-muted-foreground">
                              Task is {selectedTask.status.state.toLowerCase()}
                            </span>
                          </div>
                          <p className="text-sm text-muted-foreground">{selectedTask.status.status}</p>
                        </CardContent>
                      </Card>
                    )}
                  </TabsContent>
                  
                  <TabsContent value="raw" className="space-y-4">
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center gap-2">
                          <Database className="h-4 w-4" />
                          Raw Task Data
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <pre className="bg-iridium-900 rounded-lg p-4 text-xs overflow-x-auto">
                          {JSON.stringify(selectedTask, null, 2)}
                        </pre>
                      </CardContent>
                    </Card>
                  </TabsContent>
                </Tabs>
              </div>
            )}
          </DialogContent>
        </Dialog>
      </div>
    </DashboardLayout>
  );
} 



================================================
File: src/components/dashboard/index.ts
================================================
export { DashboardSidebar } from "./sidebar";
export { DashboardLayout } from "./layout";
export { SidebarProvider, useSidebar } from "./sidebar-context"; 


================================================
File: src/components/dashboard/layout.tsx
================================================
"use client";

import Link from "next/link";
import { DashboardSidebar } from "./sidebar";
import { SidebarProvider, useSidebar } from "./sidebar-context";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Plus, Target, Users, BarChart3 } from "lucide-react";
import { useState } from "react";

interface DashboardLayoutProps {
  children: React.ReactNode;
}

function FloatingActionButton() {
  const [isOpen, setIsOpen] = useState(false);

  const quickActions = [
    {
      label: "Add Competitor",
      icon: Target,
      href: "/competitors",
      color: "bg-blue-500 hover:bg-blue-600",
    },
    {
      label: "View Ads",
      icon: BarChart3,
      href: "/ads",
      color: "bg-green-500 hover:bg-green-600",
    },
    {
      label: "Manage Competitors",
      icon: Users,
      href: "/competitors",
      color: "bg-purple-500 hover:bg-purple-600",
    },
  ];

  return (
    <div className="fixed bottom-6 right-6 z-50">
      {/* Action buttons */}
      <div className={cn(
        "flex flex-col gap-2 mb-4 transition-all duration-300",
        isOpen ? "opacity-100 translate-y-0" : "opacity-0 translate-y-4 pointer-events-none"
      )}>
        {quickActions.map((action, index) => (
          <Button
            key={action.label}
            size="sm"
            className={cn(
              "h-12 w-12 rounded-full shadow-lg transition-all duration-300 flex items-center justify-center text-white",
              action.color,
              "hover:scale-110"
            )}
            asChild
            style={{ 
              transitionDelay: isOpen ? `${index * 50}ms` : `${(quickActions.length - index - 1) * 50}ms`
            }}
          >
            <Link href={action.href} title={action.label}>
              <action.icon className="h-5 w-5" />
            </Link>
          </Button>
        ))}
      </div>

      {/* Main FAB */}
      <Button
        size="lg"
        className={cn(
          "h-14 w-14 rounded-full shadow-lg bg-gradient-to-r from-primary to-primary/80 hover:from-primary/90 hover:to-primary text-white transition-all duration-300",
          "hover:scale-110 active:scale-95",
          isOpen && "rotate-45"
        )}
        onClick={() => setIsOpen(!isOpen)}
      >
        <Plus className="h-6 w-6" />
      </Button>
    </div>
  );
}

function DashboardContent({ children }: { children: React.ReactNode }) {
  const { isCollapsed } = useSidebar();
  
  return (
    <div className="min-h-screen bg-background">
      <DashboardSidebar />
      
      {/* Main content */}
      <div className={cn(
        "transition-all duration-300",
        isCollapsed ? "lg:ml-20" : "lg:ml-72"
      )}>
        <main className="py-6 lg:py-8">
          <div className="px-4 sm:px-6 lg:px-8">
            {children}
          </div>
        </main>
      </div>

      {/* Floating Action Button */}
      <FloatingActionButton />
    </div>
  );
}

export function DashboardLayout({ children }: DashboardLayoutProps) {
  return (
    <SidebarProvider>
      <DashboardContent>{children}</DashboardContent>
    </SidebarProvider>
  );
} 


================================================
File: src/components/dashboard/sidebar-context.tsx
================================================
"use client";

import { createContext, useContext, useState, useEffect, ReactNode } from 'react';

interface SidebarContextType {
  isCollapsed: boolean;
  setIsCollapsed: (collapsed: boolean) => void;
  isMobileOpen: boolean;
  setIsMobileOpen: (open: boolean) => void;
}

const SidebarContext = createContext<SidebarContextType | undefined>(undefined);

export function SidebarProvider({ children }: { children: ReactNode }) {
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [isMobileOpen, setIsMobileOpen] = useState(false);

  // Handle responsive behavior
  useEffect(() => {
    const handleResize = () => {
      if (window.innerWidth < 1024) {
        setIsCollapsed(false); // Always expanded in mobile sheet
        setIsMobileOpen(false); // Close mobile menu on resize
      }
    };

    handleResize();
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  return (
    <SidebarContext.Provider
      value={{
        isCollapsed,
        setIsCollapsed,
        isMobileOpen,
        setIsMobileOpen,
      }}
    >
      {children}
    </SidebarContext.Provider>
  );
}

export function useSidebar() {
  const context = useContext(SidebarContext);
  if (context === undefined) {
    throw new Error('useSidebar must be used within a SidebarProvider');
  }
  return context;
} 


================================================
File: src/components/dashboard/sidebar.tsx
================================================
"use client";

import Link from "next/link";
import { usePathname } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from "@/components/ui/sheet";
import { cn } from "@/lib/utils";
import { useSidebar } from "./sidebar-context";
import { 
  BarChart3, 
  Home, 
  Target, 
  Users, 
  Settings, 
  TrendingUp,
  Menu,
  Zap,
  Search,
  Brain,
  X,
  ChevronLeft,
  ChevronRight,
  Activity
} from "lucide-react";

const navigation = [
  {
    name: "Dashboard",
    href: "/",
    icon: Home,
    current: true
  },
  {
    name: "Ad Intelligence",
    href: "/ads",
    icon: Brain,
    current: false
  },
  {
    name: "Analytics",
    href: "/analytics",
    icon: BarChart3,
    current: false
  },
  {
    name: "Competitors",
    href: "/competitors",
    icon: Target,
    current: false
  },
  {
    name: "Tasks",
    href: "/tasks",
    icon: Activity,
    current: false
  },
  {
    name: "Trends",
    href: "/trends",
    icon: TrendingUp,
    current: false
  },
  {
    name: "Search",
    href: "/search",
    icon: Search,
    current: false
  },
  {
    name: "Settings",
    href: "/settings",
    icon: Settings,
    current: false
  }
];

interface SidebarContentProps {
  isCollapsed?: boolean;
  onItemClick?: () => void;
}

function SidebarContent({ isCollapsed = false, onItemClick }: SidebarContentProps) {
  const pathname = usePathname();

  return (
    <div className="flex h-full flex-col">
      {/* Logo */}
      <div className={cn(
        "flex h-16 items-center border-b border-border transition-all duration-300",
        isCollapsed ? "px-4 justify-center" : "px-6"
      )}>
        <div className="flex items-center gap-2">
          <div className="flex h-8 w-8 items-center justify-center rounded-lg bg-gradient-to-br from-photon-400 to-photon-600 flex-shrink-0">
            <Zap className="h-5 w-5 text-white" />
          </div>
          {!isCollapsed && (
            <div className="transition-opacity duration-300">
              <h1 className="text-lg font-bold text-gradient-primary">AdMind</h1>
              <p className="text-xs text-muted-foreground">Intelligence Platform</p>
            </div>
          )}
        </div>
      </div>

      {/* Navigation */}
      <nav className={cn(
        "flex-1 space-y-1 py-6 transition-all duration-300",
        isCollapsed ? "px-2" : "px-4"
      )}>
        {navigation.map((item) => {
          const isActive = pathname === item.href;
          return (
            <Link
              key={item.name}
              href={item.href}
              onClick={onItemClick}
              prefetch={true}
              className={cn(
                "group flex items-center gap-3 rounded-lg text-sm font-medium transition-all hover:bg-accent/50 relative",
                isCollapsed ? "px-3 py-3 justify-center" : "px-3 py-2",
                isActive
                  ? "bg-primary/10 text-primary border border-primary/20"
                  : "text-muted-foreground hover:text-foreground"
              )}
              title={isCollapsed ? item.name : undefined}
            >
              <item.icon className={cn(
                "h-5 w-5 transition-colors flex-shrink-0",
                isActive ? "text-primary" : "text-muted-foreground group-hover:text-foreground"
              )} />
              {!isCollapsed && (
                <>
                  <span className="transition-opacity duration-300">{item.name}</span>
                  {isActive && (
                    <div className="ml-auto h-2 w-2 rounded-full bg-primary" />
                  )}
                </>
              )}
              {isCollapsed && isActive && (
                <div className="absolute right-1 h-2 w-2 rounded-full bg-primary" />
              )}
            </Link>
          );
        })}
      </nav>

      {/* User Section */}
      <div className={cn(
        "border-t border-border transition-all duration-300",
        isCollapsed ? "p-2" : "p-4"
      )}>
        <div className={cn(
          "flex items-center transition-all duration-300",
          isCollapsed ? "justify-center" : "gap-3"
        )}>
          <div className="h-8 w-8 rounded-full bg-gradient-to-br from-iridium-400 to-iridium-600 flex-shrink-0" />
          {!isCollapsed && (
            <div className="flex-1 transition-opacity duration-300">
              <p className="text-sm font-medium">John Doe</p>
              <p className="text-xs text-muted-foreground">Premium User</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export function DashboardSidebar() {
  const { isCollapsed, setIsCollapsed, isMobileOpen, setIsMobileOpen } = useSidebar();

  return (
    <>
      {/* Desktop Sidebar */}
      <div className={cn(
        "hidden lg:fixed lg:inset-y-0 lg:z-50 lg:flex lg:flex-col transition-all duration-300",
        isCollapsed ? "lg:w-20" : "lg:w-72"
      )}>
        <div className="flex grow flex-col gap-y-5 overflow-y-auto border-r border-border bg-card relative">
          <SidebarContent isCollapsed={isCollapsed} />
          
          {/* Collapse Toggle Button */}
          <Button
            variant="ghost"
            size="icon"
            className="absolute -right-3 top-6 h-6 w-6 rounded-full border border-border bg-background shadow-md hover:bg-accent z-10"
            onClick={() => setIsCollapsed(!isCollapsed)}
          >
            {isCollapsed ? (
              <ChevronRight className="h-4 w-4" />
            ) : (
              <ChevronLeft className="h-4 w-4" />
            )}
          </Button>
        </div>
      </div>

      {/* Mobile Header with Menu Button */}
      <div className="lg:hidden fixed top-0 left-0 right-0 z-50 flex h-16 items-center justify-between bg-card/95 backdrop-blur-sm border-b border-border px-4">
        <div className="flex items-center gap-2">
          <div className="flex h-8 w-8 items-center justify-center rounded-lg bg-gradient-to-br from-photon-400 to-photon-600">
            <Zap className="h-5 w-5 text-white" />
          </div>
          <div>
            <h1 className="text-lg font-bold text-gradient-primary">AdMind</h1>
          </div>
        </div>
        
        <Sheet open={isMobileOpen} onOpenChange={setIsMobileOpen}>
          <SheetTrigger asChild>
            <Button variant="ghost" size="icon">
              <Menu className="h-6 w-6" />
              <span className="sr-only">Open navigation menu</span>
            </Button>
          </SheetTrigger>
          <SheetContent side="left" className="w-72 p-0">
            <SheetHeader className="sr-only">
              <SheetTitle>Navigation Menu</SheetTitle>
            </SheetHeader>
            <SidebarContent onItemClick={() => setIsMobileOpen(false)} />
          </SheetContent>
        </Sheet>
      </div>

      {/* Mobile Spacer */}
      <div className="lg:hidden h-16" />
    </>
  );
} 


================================================
File: src/components/ui/avatar.tsx
================================================
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

function Avatar({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn(
        "relative flex size-8 shrink-0 overflow-hidden rounded-full",
        className
      )}
      {...props}
    />
  )
}

function AvatarImage({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props}
    />
  )
}

function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        "bg-muted flex size-full items-center justify-center rounded-full",
        className
      )}
      {...props}
    />
  )
}

export { Avatar, AvatarImage, AvatarFallback }



================================================
File: src/components/ui/badge.tsx
================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}

export { Badge, badgeVariants }



================================================
File: src/components/ui/button.tsx
================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }



================================================
File: src/components/ui/card.tsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}



================================================
File: src/components/ui/checkbox.tsx
================================================
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { CheckIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Checkbox({
  className,
  ...props
}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {
  return (
    <CheckboxPrimitive.Root
      data-slot="checkbox"
      className={cn(
        "peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <CheckboxPrimitive.Indicator
        data-slot="checkbox-indicator"
        className="flex items-center justify-center text-current transition-none"
      >
        <CheckIcon className="size-3.5" />
      </CheckboxPrimitive.Indicator>
    </CheckboxPrimitive.Root>
  )
}

export { Checkbox }



================================================
File: src/components/ui/datepicker.tsx
================================================
"use client"

import * as React from "react"
import { cn } from "@/lib/utils"
import { CalendarIcon } from "lucide-react"

export interface DatePickerProps
  extends React.InputHTMLAttributes<HTMLInputElement> {
  label?: string
}

const DatePicker = React.forwardRef<HTMLInputElement, DatePickerProps>(
  ({ className, label, ...props }, ref) => {
    return (
      <div className="relative">
        {label && (
          <label className="mb-1 block text-xs text-muted-foreground">
            {label}
          </label>
        )}
        <div className="relative">
          <input
            type="date"
            className={cn(
              "border-input bg-background ring-offset-background placeholder:text-muted-foreground focus-visible:ring-ring flex h-9 w-full rounded-md border px-3 py-2 text-sm file:border-0 file:bg-transparent file:text-sm file:font-medium focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
              "[&::-webkit-calendar-picker-indicator]:bg-transparent [&::-webkit-calendar-picker-indicator]:cursor-pointer",
              className
            )}
            ref={ref}
            {...props}
          />
          <CalendarIcon className="absolute right-3 top-2.5 h-4 w-4 text-muted-foreground pointer-events-none" />
        </div>
      </div>
    )
  }
)
DatePicker.displayName = "DatePicker"

export { DatePicker } 


================================================
File: src/components/ui/dialog.tsx
================================================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function DialogContent({
  className,
  children,
  showCloseButton = true,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content> & {
  showCloseButton?: boolean
}) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        {showCloseButton && (
          <DialogPrimitive.Close
            data-slot="dialog-close"
            className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4"
          >
            <XIcon />
            <span className="sr-only">Close</span>
          </DialogPrimitive.Close>
        )}
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}



================================================
File: src/components/ui/input.tsx
================================================
"use client"

import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "border-input bg-background ring-offset-background placeholder:text-muted-foreground focus-visible:ring-ring flex h-9 w-full rounded-md border px-3 py-2 text-sm file:border-0 file:bg-transparent file:text-sm file:font-medium focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input } 


================================================
File: src/components/ui/label.tsx
================================================
import * as React from "react"
import { cn } from "@/lib/utils"

const Label = React.forwardRef<
  HTMLLabelElement,
  React.LabelHTMLAttributes<HTMLLabelElement>
>(({ className, ...props }, ref) => (
  <label
    ref={ref}
    className={cn(
      "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
      className
    )}
    {...props}
  />
))
Label.displayName = "Label"

export { Label } 


================================================
File: src/components/ui/pagination.tsx
================================================
import { ChevronLeft, ChevronRight, MoreHorizontal, ChevronsLeft, ChevronsRight } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

interface PaginationProps {
  currentPage: number;
  totalPages: number;
  pageSize: number;
  totalItems: number;
  onPageChange: (page: number) => void;
  onPageSizeChange: (pageSize: number) => void;
  pageSizeOptions?: number[];
  disabled?: boolean;
}

export function Pagination({
  currentPage,
  totalPages,
  pageSize,
  totalItems,
  onPageChange,
  onPageSizeChange,
  pageSizeOptions = [12, 24, 48, 96],
  disabled = false
}: PaginationProps) {
  const startItem = (currentPage - 1) * pageSize + 1;
  const endItem = Math.min(currentPage * pageSize, totalItems);

  // Generate page numbers to display
  const getPageNumbers = () => {
    const pages: (number | string)[] = [];
    const maxVisiblePages = 7;
    
    if (totalPages <= maxVisiblePages) {
      // Show all pages if total pages is small
      for (let i = 1; i <= totalPages; i++) {
        pages.push(i);
      }
    } else {
      // Show first page
      pages.push(1);
      
      if (currentPage > 3) {
        pages.push('...');
      }
      
      // Show pages around current page
      const startPage = Math.max(2, currentPage - 1);
      const endPage = Math.min(totalPages - 1, currentPage + 1);
      
      for (let i = startPage; i <= endPage; i++) {
        pages.push(i);
      }
      
      if (currentPage < totalPages - 2) {
        pages.push('...');
      }
      
      // Show last page
      if (totalPages > 1) {
        pages.push(totalPages);
      }
    }
    
    return pages;
  };

  const handlePageChange = (page: number) => {
    if (page >= 1 && page <= totalPages && !disabled) {
      onPageChange(page);
    }
  };

  const handlePageSizeChange = (newPageSize: string) => {
    if (!disabled) {
      onPageSizeChange(parseInt(newPageSize));
    }
  };

  return (
    <div className="flex flex-col sm:flex-row items-center justify-between gap-4 py-4">
      {/* Items info */}
      <div className="flex items-center gap-4">
        <p className="text-sm text-muted-foreground">
          Showing {startItem} to {endItem} of {totalItems} items
        </p>
        
        {/* Page size selector */}
        <div className="flex items-center gap-2">
          <span className="text-sm text-muted-foreground">Show:</span>
          <Select 
            value={pageSize.toString()} 
            onValueChange={handlePageSizeChange}
            disabled={disabled}
          >
            <SelectTrigger className="w-16 h-8">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              {pageSizeOptions.map((size) => (
                <SelectItem key={size} value={size.toString()}>
                  {size}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      </div>

      {/* Pagination controls - only show if more than 1 page */}
      {totalPages > 1 && (
        <div className="flex items-center gap-1">
        {/* First page */}
        <Button
          variant="outline"
          size="sm"
          onClick={() => handlePageChange(1)}
          disabled={currentPage === 1 || disabled}
          className="h-8 w-8 p-0"
        >
          <ChevronsLeft className="h-4 w-4" />
        </Button>

        {/* Previous page */}
        <Button
          variant="outline"
          size="sm"
          onClick={() => handlePageChange(currentPage - 1)}
          disabled={currentPage === 1 || disabled}
          className="h-8 w-8 p-0"
        >
          <ChevronLeft className="h-4 w-4" />
        </Button>

        {/* Page numbers */}
        {getPageNumbers().map((page, index) => (
          <Button
            key={index}
            variant={page === currentPage ? "default" : "outline"}
            size="sm"
            onClick={() => typeof page === 'number' ? handlePageChange(page) : undefined}
            disabled={page === '...' || disabled}
            className={`h-8 w-8 p-0 ${
              page === currentPage 
                ? 'bg-photon-500 text-photon-950 hover:bg-photon-400' 
                : page === '...' 
                  ? 'pointer-events-none' 
                  : ''
            }`}
          >
            {page === '...' ? (
              <MoreHorizontal className="h-4 w-4" />
            ) : (
              page
            )}
          </Button>
        ))}

        {/* Next page */}
        <Button
          variant="outline"
          size="sm"
          onClick={() => handlePageChange(currentPage + 1)}
          disabled={currentPage === totalPages || disabled}
          className="h-8 w-8 p-0"
        >
          <ChevronRight className="h-4 w-4" />
        </Button>

        {/* Last page */}
        <Button
          variant="outline"
          size="sm"
          onClick={() => handlePageChange(totalPages)}
          disabled={currentPage === totalPages || disabled}
          className="h-8 w-8 p-0"
        >
          <ChevronsRight className="h-4 w-4" />
        </Button>
      </div>
      )}
    </div>
  );
} 


================================================
File: src/components/ui/popover.tsx
================================================
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

function Popover({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Root>) {
  return <PopoverPrimitive.Root data-slot="popover" {...props} />
}

function PopoverTrigger({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {
  return <PopoverPrimitive.Trigger data-slot="popover-trigger" {...props} />
}

function PopoverContent({
  className,
  align = "center",
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Content>) {
  return (
    <PopoverPrimitive.Portal>
      <PopoverPrimitive.Content
        data-slot="popover-content"
        align={align}
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden",
          className
        )}
        {...props}
      />
    </PopoverPrimitive.Portal>
  )
}

function PopoverAnchor({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {
  return <PopoverPrimitive.Anchor data-slot="popover-anchor" {...props} />
}

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }



================================================
File: src/components/ui/select.tsx
================================================
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: "sm" | "default"
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props}
    />
  )
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  )
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}



================================================
File: src/components/ui/separator.tsx
================================================
import * as React from "react"
import { cn } from "@/lib/utils"

export interface SeparatorProps {
  orientation?: "horizontal" | "vertical"
  className?: string
}

const Separator = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & SeparatorProps
>(({ className, orientation = "horizontal", ...props }, ref) => (
  <div
    ref={ref}
    role="separator"
    className={cn(
      "shrink-0 bg-border",
      orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
      className
    )}
    {...props}
  />
))
Separator.displayName = "Separator"

export { Separator } 


================================================
File: src/components/ui/sheet.tsx
================================================
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {
  return <SheetPrimitive.Root data-slot="sheet" {...props} />
}

function SheetTrigger({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {
  return <SheetPrimitive.Trigger data-slot="sheet-trigger" {...props} />
}

function SheetClose({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Close>) {
  return <SheetPrimitive.Close data-slot="sheet-close" {...props} />
}

function SheetPortal({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Portal>) {
  return <SheetPrimitive.Portal data-slot="sheet-portal" {...props} />
}

function SheetOverlay({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {
  return (
    <SheetPrimitive.Overlay
      data-slot="sheet-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function SheetContent({
  className,
  children,
  side = "right",
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Content> & {
  side?: "top" | "right" | "bottom" | "left"
}) {
  return (
    <SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content
        data-slot="sheet-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
          side === "right" &&
            "data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm",
          side === "left" &&
            "data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm",
          side === "top" &&
            "data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b",
          side === "bottom" &&
            "data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t",
          className
        )}
        {...props}
      >
        {children}
        <SheetPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none">
          <XIcon className="size-4" />
          <span className="sr-only">Close</span>
        </SheetPrimitive.Close>
      </SheetPrimitive.Content>
    </SheetPortal>
  )
}

function SheetHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-header"
      className={cn("flex flex-col gap-1.5 p-4", className)}
      {...props}
    />
  )
}

function SheetFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-footer"
      className={cn("mt-auto flex flex-col gap-2 p-4", className)}
      {...props}
    />
  )
}

function SheetTitle({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Title>) {
  return (
    <SheetPrimitive.Title
      data-slot="sheet-title"
      className={cn("text-foreground font-semibold", className)}
      {...props}
    />
  )
}

function SheetDescription({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Description>) {
  return (
    <SheetPrimitive.Description
      data-slot="sheet-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Sheet,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}



================================================
File: src/components/ui/slider.tsx
================================================
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

function Slider({
  className,
  defaultValue,
  value,
  min = 0,
  max = 100,
  ...props
}: React.ComponentProps<typeof SliderPrimitive.Root>) {
  const _values = React.useMemo(
    () =>
      Array.isArray(value)
        ? value
        : Array.isArray(defaultValue)
          ? defaultValue
          : [min, max],
    [value, defaultValue, min, max]
  )

  return (
    <SliderPrimitive.Root
      data-slot="slider"
      defaultValue={defaultValue}
      value={value}
      min={min}
      max={max}
      className={cn(
        "relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col",
        className
      )}
      {...props}
    >
      <SliderPrimitive.Track
        data-slot="slider-track"
        className={cn(
          "bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5"
        )}
      >
        <SliderPrimitive.Range
          data-slot="slider-range"
          className={cn(
            "bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full"
          )}
        />
      </SliderPrimitive.Track>
      {Array.from({ length: _values.length }, (_, index) => (
        <SliderPrimitive.Thumb
          data-slot="slider-thumb"
          key={index}
          className="border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50"
        />
      ))}
    </SliderPrimitive.Root>
  )
}

export { Slider }



================================================
File: src/components/ui/switch.tsx
================================================
import * as React from "react"
import { cn } from "@/lib/utils"

export interface SwitchProps {
  checked?: boolean
  onCheckedChange?: (checked: boolean) => void
  disabled?: boolean
  className?: string
  id?: string
}

const Switch = React.forwardRef<HTMLButtonElement, SwitchProps>(
  ({ className, checked = false, onCheckedChange, disabled = false, ...props }, ref) => {
    const handleToggle = () => {
      if (!disabled && onCheckedChange) {
        onCheckedChange(!checked)
      }
    }

    return (
      <button
        type="button"
        role="switch"
        aria-checked={checked}
        onClick={handleToggle}
        disabled={disabled}
        className={cn(
          "peer inline-flex h-[24px] w-[44px] shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50",
          checked ? "bg-primary" : "bg-input",
          className
        )}
        ref={ref}
        {...props}
      >
        <span
          className={cn(
            "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform",
            checked ? "translate-x-5" : "translate-x-0"
          )}
        />
      </button>
    )
  }
)
Switch.displayName = "Switch"

export { Switch } 


================================================
File: src/components/ui/tabs.tsx
================================================
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props}
    />
  )
}

function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]",
        className
      )}
      {...props}
    />
  )
}

function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props}
    />
  )
}

export { Tabs, TabsList, TabsTrigger, TabsContent }



================================================
File: src/components/ui/view-toggle.tsx
================================================
'use client';

import { LayoutGrid, List } from 'lucide-react';
import { Button } from '@/components/ui/button';

export interface ViewToggleProps {
  view: 'grid' | 'list';
  onViewChange: (view: 'grid' | 'list') => void;
  disabled?: boolean;
}

export function ViewToggle({ view, onViewChange, disabled = false }: ViewToggleProps) {
  return (
    <div className="flex items-center rounded-lg border p-1">
      <Button
        variant={view === 'grid' ? 'default' : 'ghost'}
        size="sm"
        onClick={() => onViewChange('grid')}
        disabled={disabled}
        className="px-3 py-1.5"
      >
        <LayoutGrid className="h-4 w-4" />
      </Button>
      <Button
        variant={view === 'list' ? 'default' : 'ghost'}
        size="sm"
        onClick={() => onViewChange('list')}
        disabled={disabled}
        className="px-3 py-1.5"
      >
        <List className="h-4 w-4" />
      </Button>
    </div>
  );
} 


================================================
File: src/features/dashboard/README.md
================================================
# Dashboard Components

## AdCard Component

The `AdCard` component is the primary component for displaying Facebook ad data with AI analysis results. It follows the Pylons.ai "Iridium & Photon" design system.

### Features

- **Real Backend Data**: Fetches actual ad data from the backend API
- **High-Score Glow**: Ads with overall_score > 8 get a photon-blue glow effect
- **Media Support**: Displays images and videos with proper fallbacks
- **Responsive Design**: Mobile-first responsive layout
- **Performance Badges**: Shows key metrics like score, impressions, spend, platform
- **Avatar System**: Facebook profile pictures with elegant fallbacks

### Usage

```tsx
import { AdCard } from '@/features/dashboard/components/AdCard';
import { AdWithAnalysis } from '@/types/ad';

// Your ad data from the API
const ad: AdWithAnalysis = {
  // ... ad data
};

function MyComponent() {
  return <AdCard ad={ad} />;
}
```

### Testing

Visit the test page at: `http://localhost:3000/test-adcard`

This page demonstrates:
- Real data fetching from the backend
- Loading states and error handling
- All component features including glow effects
- Responsive design across different screen sizes

### API Configuration

The component uses the API client from `@/lib/api`. Make sure your backend is running at `http://localhost:8000`.

You can configure the API URL by creating a `.env.local` file in the frontend root:

```bash
# frontend/.env.local
NEXT_PUBLIC_API_URL=http://localhost:8000
```

### Backend Setup

1. Start the backend server:
```bash
cd backend
python -m uvicorn app.main:app --reload
```

2. The API will be available at: `http://localhost:8000`

3. Check the API docs at: `http://localhost:8000/docs`

### Component Props

```typescript
interface AdCardProps {
  ad: AdWithAnalysis;
}

// AdWithAnalysis extends Ad and includes:
// - competitor: Competitor (required)
// - analysis: AdAnalysis (required)
```

### Design System

The component uses the Iridium & Photon color theme:
- **Primary**: Photon blue (`#00bcd4`) for high-performing elements
- **Secondary**: Iridium grays for content and structure
- **Typography**: Geist Mono for headers, clean sans-serif for content
- **Animations**: Subtle hover effects and glow animations

### File Structure

```
frontend/src/features/dashboard/
â”œâ”€â”€ components/
â”‚   â”œâ”€â”€ AdCard.tsx          # Main component
â”‚   â””â”€â”€ index.ts            # Export file
â”œâ”€â”€ README.md               # This file
```

### Related Files

- `/types/ad.ts` - TypeScript type definitions
- `/lib/api.ts` - API client and types
- `/lib/transformers.ts` - Data transformation utilities
- `/app/test-adcard/page.tsx` - Test page with real data 


================================================
File: src/features/dashboard/components/ActiveFilterBadges.tsx
================================================
'use client';

import React from 'react';
import { X } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { AdFilterParams } from '@/lib/api';
import { formatDate } from '@/lib/utils';

interface ActiveFilterBadgesProps {
  filters: AdFilterParams;
  onRemoveFilter: (key: keyof AdFilterParams) => void;
}

export function ActiveFilterBadges({ filters, onRemoveFilter }: ActiveFilterBadgesProps) {
  // These filters are always applied, so we don't show badges for them
  const defaultFilters = ['page', 'page_size', 'has_analysis', 'sort_by', 'sort_order'];
  
  const getFilterLabel = (key: string, value: any): string => {
    switch (key) {
      case 'media_type':
        return `Media: ${value}`;
      case 'is_active':
        return value ? 'Active Ads' : 'Inactive Ads';
      case 'min_overall_score':
        return `Min Score: ${value}`;
      case 'max_overall_score':
        return `Max Score: ${value}`;
      case 'min_hook_score':
        return `Min Hook: ${value}`;
      case 'max_hook_score':
        return `Max Hook: ${value}`;
      case 'date_from':
        return `From: ${formatDate(value)}`;
      case 'date_to':
        return `To: ${formatDate(value)}`;
      case 'competitor_id':
        return `Competitor ID: ${value}`;
      case 'competitor_name':
        return `Competitor: ${value}`;
      case 'search':
        return `Search: ${value}`;
      default:
        return `${key}: ${value}`;
    }
  };

  // Get active filters (exclude defaults and empty values)
  const activeFilters = Object.entries(filters).filter(([key, value]) => {
    return (
      !defaultFilters.includes(key) && 
      value !== undefined && 
      value !== null && 
      value !== ''
    );
  });

  if (activeFilters.length === 0) {
    return null;
  }

  return (
    <div className="flex flex-wrap gap-2 mb-4">
      {activeFilters.map(([key, value]) => (
        <Badge 
          key={key}
          variant="secondary"
          className="px-3 py-1 gap-1 text-xs bg-photon-900/50 border border-photon-700/30 text-photon-300 hover:bg-photon-800/50"
        >
          {getFilterLabel(key, value)}
          <button 
            onClick={() => onRemoveFilter(key as keyof AdFilterParams)}
            className="ml-1 hover:text-photon-100 rounded-full"
          >
            <X className="h-3 w-3" />
            <span className="sr-only">Remove {key} filter</span>
          </button>
        </Badge>
      ))}
    </div>
  );
}

export default ActiveFilterBadges; 


================================================
File: src/features/dashboard/components/AdCard.tsx
================================================
'use client';
import React, { useRef } from 'react';
import { AdWithAnalysis } from '@/types/ad';
import { Card, CardContent, CardFooter, CardHeader } from '@/components/ui/card';
import { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar';
import { Badge } from '@/components/ui/badge';
import { cn } from '@/lib/utils';
import { Play, Image, Star, TrendingUp, Eye, DollarSign, Globe2, Loader2, ChevronLeft, ChevronRight, FileText, Calendar, Info, Clock, ChevronDown, Layers } from 'lucide-react';
import { useRouter } from 'next/navigation';
import { useState } from 'react';
import { differenceInDays, format, parseISO } from 'date-fns';

interface AdCardProps {
  ad: AdWithAnalysis;
  isSelected?: boolean;
  isDeleting?: boolean;
  onSelectionChange?: (adId: number, selected: boolean) => void;
  showSelection?: boolean;
  hideSetBadge?: boolean; // Add this prop to hide the "Set of X" badge when viewing variants
}

// Helper function to get main ad content for display
const getMainAdContent = (ad: AdWithAnalysis): string => {
  // Use the main body text, title, or caption from the individual fields
  return ad.main_body_text || ad.main_title || ad.main_caption || ad.ad_copy || 'No content available';
};

const formatAdDuration = (startDateStr?: string, endDateStr?: string, isActive?: boolean): { formattedDate: string | null, duration: number | null, isActive: boolean } => {
  if (!startDateStr) return { formattedDate: null, duration: null, isActive: false };
  try {
    const startDate = parseISO(startDateStr);
    const endDate = endDateStr ? parseISO(endDateStr) : new Date();
    if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) return { formattedDate: null, duration: null, isActive: false };
    
    let duration = differenceInDays(endDate, startDate);
    duration = Math.max(duration, 1);

    const formattedStartDate = format(startDate, 'MMM d, yyyy');
    const formattedEndDate = endDateStr ? format(parseISO(endDateStr), 'MMM d, yyyy') : 'Present';

    if (isActive) {
      return { 
        formattedDate: `Since ${formattedStartDate}`, 
        duration, 
        isActive: true 
      };
    }

    return { 
      formattedDate: `${formattedStartDate} - ${formattedEndDate}`, 
      duration, 
      isActive: false 
    };
  } catch (error) {
    console.error("Error formatting ad duration:", error);
    return { formattedDate: null, duration: null, isActive: false };
  }
};

export function AdCard({ 
  ad, 
  isSelected = false, 
  isDeleting = false, 
  onSelectionChange, 
  showSelection = false,
  hideSetBadge = false
}: AdCardProps) {
  const router = useRouter();
  const [currentCardIndex, setCurrentCardIndex] = useState(0);
  const [showFullContent, setShowFullContent] = useState(false);
  const hasHighScore = ad.analysis?.overall_score && ad.analysis.overall_score > 8;
  
  const hasMultipleCreatives = ad.creatives && ad.creatives.length > 1;
  const currentCreative = ad.creatives?.[currentCardIndex];
  
  const videoRef = useRef<HTMLVideoElement | null>(null);
  const [isVideoPlaying, setIsVideoPlaying] = useState(false);
  
  // Get the primary media URL from the current creative, with fallbacks
  const getPrimaryMedia = () => {
    if (currentCreative?.media && currentCreative.media.length > 0) {
      const video = currentCreative.media.find(m => m.type === 'Video');
      if (video) return { url: video.url, isVideo: true };
      
      const image = currentCreative.media.find(m => m.type === 'Image');
      if (image) return { url: image.url, isVideo: false };
    }
    // Fallback for older data structures or single-media ads
    const videoUrl = ad.main_video_urls?.[0] || (ad.media_type === 'video' ? ad.media_url : null);
    if (videoUrl) return { url: videoUrl, isVideo: true };

    const imageUrl = ad.main_image_urls?.[0] || (ad.media_type === 'image' ? ad.media_url : null);
    if (imageUrl) return { url: imageUrl, isVideo: false };

    return { url: ad.media_url, isVideo: ad.media_type === 'video' };
  };

  const { url: primaryMediaUrl, isVideo } = getPrimaryMedia();
  
  // Get main content for display
  const displayContent = getMainAdContent(ad);
  
  // Format score for display
  const scoreText = ad.analysis?.overall_score 
    ? `${ad.analysis.overall_score.toFixed(1)}`
    : 'N/A';
  
  // Get impressions text
  const impressionsText = ad.impressions_text || 'Unknown';
  
  // Get CTA text - prioritize current creative, then meta
  const ctaText = currentCreative?.cta?.text || ad.meta?.cta_type || ad.cta_text || '';

  const countries = ad.targeting?.locations?.map(l => l.name) || [];
  const hasLeadForm = ad.lead_form?.questions && Object.keys(ad.lead_form.questions).length > 0;
  // Determine active status more reliably
  const isActive = ad.is_active !== undefined ? ad.is_active
    : (ad.meta?.is_active !== undefined ? ad.meta.is_active
      : !ad.end_date || new Date(ad.end_date) >= new Date());

  const adDuration = formatAdDuration(ad.start_date, ad.end_date, isActive);

  // Duration badge logic
  const durationDays = adDuration.duration;
  const durationBadgeClass = durationDays !== null ? (
    durationDays >= 60
      ? "bg-green-500/90 text-white"
      : durationDays >= 30
      ? "bg-yellow-400/90 text-black"
      : "bg-red-500/90 text-white"
  ) : "bg-gray-500/90 text-white";

  const handleCardClick = (e: React.MouseEvent) => {
    // Don't navigate if clicking on checkbox or carousel controls
    if (showSelection && (e.target as HTMLElement).closest('.checkbox-container')) {
      return;
    }
    if ((e.target as HTMLElement).closest('.carousel-control')) {
      return;
    }
    
    // If this is part of an ad set with variants, go to the ad set detail page
    if (ad.variant_count && ad.variant_count > 1 && ad.ad_set_id) {
      router.push(`/ad-sets/${ad.ad_set_id}`);
    } else {
      // Otherwise go to the individual ad detail page
      router.push(`/ads/${ad.id}`);
    }
  };

  const handleSelectionChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    e.stopPropagation();
    if (ad.id) {
      onSelectionChange?.(ad.id, e.target.checked);
    }
  };

  const handleSeeMoreClick = (e: React.MouseEvent) => {
    e.stopPropagation();
    setShowFullContent(!showFullContent);
  };

  return (
    <div className="group relative cursor-pointer" onClick={handleCardClick}>
      <Card className={cn(
        "h-full flex flex-col relative overflow-hidden transition-all duration-300 p-0",
        "hover:translate-y-[-2px] hover:bg-card/80 backdrop-blur-sm",
        "border-border/50 hover:border-border",
        hasHighScore && "border-photon-500/30 bg-gradient-to-br from-card via-card to-photon-950/10",
        isSelected && "border-photon-500/50 bg-photon-500/5",
        isDeleting && "opacity-50 scale-95 pointer-events-none",
        // Add visual distinction for ad sets
        ad.variant_count && ad.variant_count > 1 ? "border-l-4 border-l-photon-500" : ""
      )}>
        {/* High Score Indicator */}
        {hasHighScore && (
          <div className="absolute top-0 left-0 right-0 h-[2px] bg-gradient-to-r from-photon-400 via-photon-500 to-photon-600" />
        )}
        
        {/* Selection Checkbox */}
        {showSelection && (
          <div className="absolute top-0.5 right-0.5 z-10 checkbox-container">
            <input
              type="checkbox"
              checked={isSelected}
              onChange={handleSelectionChange}
              className="w-4 h-4 rounded border-border/60 bg-background/80 text-photon-500 focus:ring-photon-500/50 focus:ring-2 focus:ring-offset-0"
            />
          </div>
        )}
        
        {/* Ad Set Variants Badge */}
        {ad.variant_count && ad.variant_count > 1 && !hideSetBadge && (
          <Badge className="absolute top-2 left-2 z-10 bg-photon-500 text-white flex items-center gap-1">
            <Layers className="h-3 w-3" />
            Set of {ad.variant_count}
          </Badge>
        )}
        
        {/* Standalone Ad Indicator */}
        {(!ad.variant_count || ad.variant_count <= 1) && !hideSetBadge && (
          <div className="absolute top-2 left-2 z-10 px-2 py-1 rounded-md bg-background/70 backdrop-blur-sm text-xs flex items-center gap-1 shadow-sm">
            <FileText className="h-3 w-3 text-muted-foreground" />
            <span className="text-muted-foreground font-medium">Single Ad</span>
          </div>
        )}
        
        {/* Deletion Overlay */}
        {isDeleting && (
          <div className="absolute inset-0 bg-black/50 flex items-center justify-center z-20 rounded-lg">
            <div className="bg-red-500/20 border border-red-500/30 rounded-lg px-3 py-2">
              <span className="text-red-400 text-sm font-medium">Deleting...</span>
            </div>
          </div>
        )}
        
        {/* Media Section - Now at the top of the card for more prominence */}
        {primaryMediaUrl && (
          <div className="relative aspect-[9/16] w-full overflow-hidden rounded-t-lg">
            {/* Gradient overlay at bottom for readability */}
            <div className="absolute inset-x-0 bottom-0 h-16 bg-gradient-to-t from-black/70 to-transparent pointer-events-none" />
            
            {/* Score Badge Overlay */}
            {ad.analysis?.overall_score !== undefined && (
              <div
                className={cn(
                  "absolute top-2 right-2 z-20 px-2 py-0.5 rounded-md text-xs font-bold shadow-md backdrop-blur-sm",
                  ad.analysis.overall_score >= 8
                    ? "bg-green-500/90 text-white"
                    : ad.analysis.overall_score >= 6
                    ? "bg-yellow-400/90 text-black"
                    : "bg-red-500/90 text-white"
                )}
                title={`Overall Score: ${ad.analysis.overall_score.toFixed(1)}`}
              >
                {ad.analysis.overall_score.toFixed(1)}
              </div>
            )}

            {/* Media Type, Status & Duration Badges */}
            <div className="absolute top-3 left-3 z-20 flex gap-1">
              {ad.media_type && (
                <div className="px-1.5 py-0.5 rounded-md bg-white/90 text-black text-[10px] font-semibold uppercase tracking-wide shadow-sm">
                  {ad.media_type}
                </div>
              )}
              {/* Status Badge */}
              <div className={cn(
                "px-1.5 py-0.5 rounded-md text-[10px] font-semibold uppercase tracking-wide shadow-sm",
                isActive 
                  ? "bg-green-500/90 text-white" 
                  : "bg-gray-500/90 text-white"
              )}
              title={isActive ? "Ad is currently active" : "Ad has ended"}>
                {isActive ? "ACTIVE" : "ENDED"}
              </div>
              {durationDays !== null && (
                <div className={`px-1.5 py-0.5 rounded-md text-[10px] font-semibold tracking-wide shadow-sm ${durationBadgeClass}`}
                     title={`${durationDays} days running`}>
                  {durationDays}d
                </div>
              )}
            </div>
            
            {isVideo ? (
              <div className="relative h-full w-full">
                <video 
                  src={primaryMediaUrl}
                  className="absolute inset-0 h-full w-full object-cover"
                  preload="metadata"
                  playsInline
                  controls
                  ref={videoRef}
                  onPlay={() => setIsVideoPlaying(true)}
                  onPause={() => setIsVideoPlaying(false)}
                  onEnded={() => setIsVideoPlaying(false)}
                />
                <div className={cn(
                  "absolute inset-0 flex items-center justify-center pointer-events-none transition-opacity duration-200",
                  isVideoPlaying ? "opacity-0" : "opacity-100"
                )}
                >
                  <button
                    type="button"
                    className="bg-white/90 rounded-full p-3 shadow-lg pointer-events-auto"
                    onClick={(e) => {
                      e.stopPropagation();
                      if (!videoRef.current) return;
                      videoRef.current.play();
                      setIsVideoPlaying(true);
                    }}
                  >
                    <Play className="h-5 w-5 text-black fill-black" />
                  </button>
                </div>
              </div>
            ) : (
              <img 
                src={primaryMediaUrl} 
                alt={ad.main_title || ad.page_name || 'Ad'}
                className="absolute inset-0 h-full w-full object-cover transition-transform duration-300 group-hover:scale-[1.02]"
                loading="lazy"
              />
            )}
            
            {/* Carousel indicators directly overlaid on media */}
            {hasMultipleCreatives && (
              <div className="absolute bottom-5 left-0 right-0 flex justify-center gap-1 z-20">
                {ad.creatives.map((_, index) => (
                  <button
                    key={index}
                    onClick={(e) => {
                      e.stopPropagation();
                      setCurrentCardIndex(index);
                    }}
                    className={cn(
                      "h-2 w-2 rounded-full transition-all duration-200",
                      currentCardIndex === index ? "bg-white scale-110" : "bg-white/50 hover:bg-white/80"
                    )}
                  />
                ))}
              </div>
            )}
            
            {/* Carousel navigation */}
            {hasMultipleCreatives && (
              <>
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    setCurrentCardIndex(prev => prev > 0 ? prev - 1 : (ad.creatives?.length || 1) - 1);
                  }}
                  className="absolute left-3 top-1/2 -translate-y-1/2 p-2 bg-black/40 hover:bg-black/60 rounded-full carousel-control z-20 backdrop-blur-md"
                >
                  <ChevronLeft className="h-4 w-4 text-white" />
                </button>
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    setCurrentCardIndex(prev => prev < ((ad.creatives?.length || 1) - 1) ? prev + 1 : 0);
                  }}
                  className="absolute right-3 top-1/2 -translate-y-1/2 p-2 bg-black/40 hover:bg-black/60 rounded-full carousel-control z-20 backdrop-blur-md"
                >
                  <ChevronRight className="h-4 w-4 text-white" />
                </button>
              </>
            )}
          </div>
        )}
        
        <CardHeader className="pb-2 relative pt-3">
          <div className="flex items-start space-x-3">
            <Avatar className="size-10 ring-2 ring-border/20 group-hover:ring-photon-500/30 transition-all duration-300">
              <AvatarImage 
                src={ad.page_profile_picture_url || ad.competitor?.page_id 
                  ? `https://graph.facebook.com/${ad.competitor.page_id}/picture?width=44&height=44`
                  : undefined
                }
                alt={ad.competitor?.name || ad.page_name || 'Competitor'}
                className="object-cover"
              />
              <AvatarFallback className="bg-gradient-to-br from-photon-900 to-photon-800 text-photon-200 font-mono text-sm font-semibold">
                {(ad.competitor?.name || ad.page_name || 'AD').substring(0, 2).toUpperCase()}
              </AvatarFallback>
            </Avatar>
            
            <div className="flex-1 min-w-0">
              <div className="flex items-center gap-2 mb-1">
                <h4 className="font-mono font-semibold text-sm text-foreground truncate">
                  {ad.competitor?.name || ad.page_name || 'Unknown Competitor'}
                </h4>
                {hasHighScore && (
                  <Star className="h-3.5 w-3.5 text-photon-400 fill-photon-400" />
                )}
              </div>
              
              {/* Improved Ad Duration Display */}
              {adDuration.formattedDate && (
                <div className="flex items-center justify-between text-xs">
                  <div className="flex items-center gap-1 text-muted-foreground">
                    <Calendar className="h-3 w-3" />
                    <span>{adDuration.formattedDate}</span>
                  </div>
                  
                  {adDuration.duration && (
                    <div className={cn(
                      "flex items-center gap-1 font-medium",
                      adDuration.isActive ? "text-photon-400" : "text-muted-foreground"
                    )}>
                      <Clock className="h-3 w-3" />
                      <span>{adDuration.duration} {adDuration.duration === 1 ? 'day' : 'days'}</span>
                    </div>
                  )}
                </div>
              )}
            </div>
            
            {/* Score Badge */}
            <div className={cn(
              "flex flex-col items-end text-right",
              hasHighScore ? "text-photon-300" : "text-muted-foreground"
            )}>
              <div className="flex items-center gap-1">
                <TrendingUp className="h-3 w-3" />
                <span className="text-xs font-mono font-semibold">{scoreText}</span>
              </div>
              <span className="text-[10px] text-muted-foreground">Score</span>
            </div>
          </div>
        </CardHeader>
        
        <CardContent className="flex-1 px-4 py-2">
          {/* Content Section with See More functionality */}
          <div className="space-y-2">
            <h5 className="font-medium text-sm text-foreground line-clamp-1 leading-relaxed">
              {ad.main_title || ad.page_name || 'Ad'}
            </h5>
            
            {displayContent && (
              <div>
                <p className={cn(
                  "text-xs text-muted-foreground leading-relaxed overflow-hidden",
                  showFullContent ? "" : "line-clamp-2"
                )}>
                  {displayContent}
                </p>
                
                {displayContent.length > 120 && (
                  <button 
                    onClick={handleSeeMoreClick}
                    className="text-xs text-photon-400 hover:text-photon-300 mt-1 flex items-center gap-1 carousel-control"
                  >
                    {showFullContent ? 'See less' : 'See more'}
                    <ChevronDown className={cn(
                      "h-3 w-3 transition-transform",
                      showFullContent ? "rotate-180" : ""
                    )} />
                  </button>
                )}
              </div>
            )}
            
            {/* CTA if present */}
            {ctaText && (
              <div className="mt-2">
                <div className="inline-flex items-center gap-1 px-2 py-1 rounded-md bg-photon-500/10 border border-photon-500/20">
                  <span className="text-xs text-photon-400 font-medium">
                    {ctaText}
                  </span>
                </div>
              </div>
            )}
          </div>
        </CardContent>
        
        <CardFooter className="pt-2 pb-3 px-4 text-xs text-muted-foreground">
          <div className="flex-1 flex items-center justify-between">
            <div className="flex items-center gap-3">
              {ad.spend && (
                <div title="Spend" className="flex items-center gap-1.5">
                  <DollarSign className="h-3.5 w-3.5" />
                  <span className="font-mono text-xs">{ad.spend}</span>
                </div>
              )}
            </div>
            
            {countries.length > 0 && (
              <div className="flex items-center gap-1 truncate" title={countries.join(', ')}>
                <Globe2 className="h-3.5 w-3.5" />
                <span className="font-mono text-xs truncate">
                  {countries.length > 1 ? `${countries[0]} +${countries.length - 1}` : countries[0]}
                </span>
              </div>
            )}
          </div>
        </CardFooter>
      </Card>
    </div>
  );
}

export default AdCard; 


================================================
File: src/features/dashboard/components/AdFilters.tsx
================================================
'use client';

import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { DatePicker } from '@/components/ui/datepicker';
import { 
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectTrigger,
  SelectValue
} from '@/components/ui/select';
import { Slider } from '@/components/ui/slider';
import { 
  Filter, 
  X, 
  Check,
  RefreshCw,
  ChevronDown,
  ChevronUp,
  CalendarRange,
  Target,
  Star,
  Activity
} from 'lucide-react';
import { AdFilterParams, getCompetitors, type Competitor } from '@/lib/api';

// Simple global store for competitors
class CompetitorsStore {
  private static instance: CompetitorsStore;
  private competitors: Competitor[] = [];
  private loading = false;
  private loaded = false;

  static getInstance(): CompetitorsStore {
    if (!CompetitorsStore.instance) {
      CompetitorsStore.instance = new CompetitorsStore();
    }
    return CompetitorsStore.instance;
  }

  async getCompetitors(): Promise<Competitor[]> {
    if (this.loaded) {
      return this.competitors;
    }

    if (this.loading) {
      // Wait for current loading to complete
      while (this.loading) {
        await new Promise(resolve => setTimeout(resolve, 100));
      }
      return this.competitors;
    }

    this.loading = true;
    try {
      console.log('Fetching competitors...');
      const response = await getCompetitors({ page: 1, page_size: 100 });
      console.log('Competitors response:', response);
      this.competitors = response.data; // Extract data from paginated response
      this.loaded = true;
      console.log('Loaded competitors:', this.competitors.length, this.competitors);
    } catch (e) {
      console.error('Failed to load competitors', e);
      this.competitors = []; // Reset on error
    } finally {
      this.loading = false;
    }
    
    return this.competitors;
  }

  refresh() {
    this.loaded = false;
    this.competitors = [];
  }
}

interface AdFiltersProps {
  onApplyFilters: (filters: AdFilterParams) => void;
  onResetFilters: () => void;
  disabled?: boolean;
  inline?: boolean;
  currentFilters?: AdFilterParams; // Add current filters prop
}

export function AdFilters({ 
  onApplyFilters, 
  onResetFilters, 
  disabled = false, 
  inline = false,
  currentFilters = {} 
}: AdFiltersProps) {
  const [open, setOpen] = useState(inline);
  const [showAdvanced, setShowAdvanced] = useState(false);
  
  // Initialize filters from current filters
  const [filters, setFilters] = useState<AdFilterParams>(currentFilters);
  
  // Score ranges - initialize from current filters
  const [overallScoreRange, setOverallScoreRange] = useState<number[]>([
    currentFilters.min_overall_score || 0,
    currentFilters.max_overall_score || 10
  ]);
  const [hookScoreRange, setHookScoreRange] = useState<number[]>([
    currentFilters.min_hook_score || 0,
    currentFilters.max_hook_score || 10
  ]);
  const [durationRange, setDurationRange] = useState<number[]>([
    currentFilters.min_duration_days || 1,
    currentFilters.max_duration_days || 365
  ]);

  // Competitors
  const [competitors, setCompetitors] = useState<Competitor[]>([]);
  const [loadingCompetitors, setLoadingCompetitors] = useState(false);

  // Update internal state when currentFilters prop changes
  useEffect(() => {
    setFilters(currentFilters);
    setOverallScoreRange([
      currentFilters.min_overall_score || 0,
      currentFilters.max_overall_score || 10
    ]);
    setHookScoreRange([
      currentFilters.min_hook_score || 0,
      currentFilters.max_hook_score || 10
    ]);
    setDurationRange([
      currentFilters.min_duration_days || 1,
      currentFilters.max_duration_days || 365
    ]);
  }, [currentFilters]);

  useEffect(() => {
    // Load competitors from global store
    (async () => {
      setLoadingCompetitors(true);
      try {
        const competitorsStore = CompetitorsStore.getInstance();
        const data = await competitorsStore.getCompetitors();
        console.log('Setting competitors in component:', data);
        setCompetitors(data);
      } catch (e) {
        console.error('Failed to load competitors in component', e);
        // Set empty array as fallback
        setCompetitors([]);
      } finally {
        setLoadingCompetitors(false);
      }
    })();
  }, []);

  // Handle form submission
  const handleApplyFilters = () => {
    const appliedFilters: AdFilterParams = {
      ...filters,
      min_overall_score: overallScoreRange[0] !== 0 ? overallScoreRange[0] : undefined,
      max_overall_score: overallScoreRange[1] !== 10 ? overallScoreRange[1] : undefined,
      min_hook_score: hookScoreRange[0] !== 0 ? hookScoreRange[0] : undefined,
      max_hook_score: hookScoreRange[1] !== 10 ? hookScoreRange[1] : undefined,
      // Send duration filters if user has moved away from the full range [1, 365]
      min_duration_days: durationRange[0] !== 1 || durationRange[1] !== 365 ? durationRange[0] : undefined,
      max_duration_days: durationRange[0] !== 1 || durationRange[1] !== 365 ? durationRange[1] : undefined
    };
    
    onApplyFilters(appliedFilters);
    setOpen(false);
  };

  const handleReset = () => {
    setFilters({});
    setOverallScoreRange([0, 10]);
    setHookScoreRange([0, 10]);
    setDurationRange([1, 365]);
    onResetFilters();
    setOpen(false);
  };

  if (inline) {
  return (
      <div className="bg-gradient-to-r from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800 rounded-xl border border-slate-200 dark:border-slate-700 p-6 space-y-6">
        {/* Row 1: Main Filters */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-8 gap-4">
          {/* Competitor */}
          <div className="space-y-2 min-w-0 xl:col-span-2">
            <label className="text-xs font-medium text-slate-600 dark:text-slate-400 flex items-center gap-1">
              <Target className="h-3 w-3" />
              <span className="truncate">Competitor</span>
            </label>
            <Select 
              value={filters.competitor_id ? String(filters.competitor_id) : 'all'} 
              onValueChange={(v) => setFilters(p => ({ ...p, competitor_id: v === 'all' ? undefined : Number(v) }))}
              disabled={loadingCompetitors}
            >
              <SelectTrigger className="h-9 text-sm bg-white dark:bg-slate-800 border-slate-300 dark:border-slate-600 min-w-0">
                <SelectValue placeholder={loadingCompetitors ? "Loading..." : "All"} />
              </SelectTrigger>
              <SelectContent className="max-h-60 overflow-y-auto">
                <SelectItem value="all">All Competitors</SelectItem>
                {competitors.length > 0 ? competitors.map(c => (
                  <SelectItem key={c.id} value={String(c.id)} title={c.name}>
                    <span className="truncate block max-w-[250px]">{c.name}</span>
                  </SelectItem>
                )) : (
                  <SelectItem value="no-data" disabled>
                    {loadingCompetitors ? 'Loading...' : 'No competitors found'}
                  </SelectItem>
                )}
              </SelectContent>
            </Select>
          </div>

          {/* Media Type */}
          <div className="space-y-2 min-w-0">
            <label className="text-xs font-medium text-slate-600 dark:text-slate-400">Media Type</label>
            <Select 
              value={filters.media_type || 'all'} 
              onValueChange={(v) => setFilters(p => ({ ...p, media_type: v === 'all' ? undefined : v }))}
            >
              <SelectTrigger className="h-9 text-sm bg-white dark:bg-slate-800 border-slate-300 dark:border-slate-600 min-w-0">
                <SelectValue placeholder="All" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All</SelectItem>
                <SelectItem value="image">Image</SelectItem>
                <SelectItem value="video">Video</SelectItem>
                <SelectItem value="carousel">Carousel</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* Status */}
          <div className="space-y-2 min-w-0">
            <label className="text-xs font-medium text-slate-600 dark:text-slate-400 flex items-center gap-1">
              <Activity className="h-3 w-3" />
              Status
            </label>
            <Select 
              value={filters.is_active !== undefined ? String(filters.is_active) : 'all'} 
              onValueChange={(v) => setFilters(p => ({ ...p, is_active: v === 'all' ? undefined : v === 'true' }))}
            >
              <SelectTrigger className="h-9 text-sm bg-white dark:bg-slate-800 border-slate-300 dark:border-slate-600 min-w-0">
                <SelectValue placeholder="All" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All</SelectItem>
                <SelectItem value="true">Active</SelectItem>
                <SelectItem value="false">Ended</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* Overall Score Range */}
          <div className="space-y-2 min-w-0">
            <label className="text-xs font-medium text-slate-600 dark:text-slate-400 flex items-center gap-1">
              <Star className="h-3 w-3" />
              <span className="truncate">Overall Score</span>
            </label>
            <div className="px-3 py-2 bg-white dark:bg-slate-800 border border-slate-300 dark:border-slate-600 rounded-md">
              <Slider 
                value={overallScoreRange} 
                min={0} 
                max={10} 
                step={0.5}
                onValueChange={setOverallScoreRange}
                className="w-full"
              />
              <div className="flex justify-between text-[10px] text-slate-500 mt-1">
                <span>{overallScoreRange[0]}</span>
                <span>{overallScoreRange[1]}</span>
              </div>
            </div>
          </div>

          {/* Hook Score Range */}
          <div className="space-y-2 min-w-0">
            <label className="text-xs font-medium text-slate-600 dark:text-slate-400">Hook Score</label>
            <div className="px-3 py-2 bg-white dark:bg-slate-800 border border-slate-300 dark:border-slate-600 rounded-md">
              <Slider 
                value={hookScoreRange} 
                min={0} 
                max={10} 
                step={0.5}
                onValueChange={setHookScoreRange}
                className="w-full"
              />
              <div className="flex justify-between text-[10px] text-slate-500 mt-1">
                <span>{hookScoreRange[0]}</span>
                <span>{hookScoreRange[1]}</span>
              </div>
            </div>
          </div>

          {/* Duration Range */}
          <div className="space-y-2 min-w-0">
            <label className="text-xs font-medium text-slate-600 dark:text-slate-400">Duration (Days)</label>
            <div className="px-3 py-2 bg-white dark:bg-slate-800 border border-slate-300 dark:border-slate-600 rounded-md">
              <Slider 
                value={durationRange} 
                min={1} 
                max={365} 
                step={1}
                onValueChange={setDurationRange}
                className="w-full"
              />
              <div className="flex justify-between text-[10px] text-slate-500 mt-1">
                <span>{durationRange[0]}d</span>
                <span>{durationRange[1]}d</span>
              </div>
            </div>
          </div>

          {/* Actions */}
          <div className="space-y-2 min-w-0">
            <label className="text-xs font-medium text-slate-600 dark:text-slate-400">Actions</label>
            <div className="flex gap-2">
              <Button 
                variant="outline" 
                size="sm" 
                onClick={handleReset}
                className="h-9 px-3 text-sm border-slate-300 dark:border-slate-600"
              >
                <X className="h-3 w-3" />
              </Button>
              <Button 
                onClick={handleApplyFilters}
                size="sm"
                className="h-9 px-4 text-sm bg-blue-600 hover:bg-blue-700 text-white"
              >
                <Check className="h-3 w-3 mr-1" />
                Apply
              </Button>
            </div>
          </div>
        </div>

        {/* Row 2: Advanced Filters (Collapsible) */}
        <div className="border-t border-slate-200 dark:border-slate-700 pt-4">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setShowAdvanced(!showAdvanced)}
            className="h-8 px-3 text-sm text-slate-600 dark:text-slate-400 hover:text-slate-800 dark:hover:text-slate-200"
          >
            {showAdvanced ? <ChevronUp className="h-3 w-3 mr-1" /> : <ChevronDown className="h-3 w-3 mr-1" />}
            {showAdvanced ? 'Hide' : 'Show'} Advanced Filters
          </Button>
          
          {showAdvanced && (
            <div className="mt-4 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
              {/* Date Range */}
              <div className="space-y-2 min-w-0">
                <label className="text-xs font-medium text-slate-600 dark:text-slate-400 flex items-center gap-1">
                  <CalendarRange className="h-3 w-3" />
                  <span className="truncate">Date From</span>
                </label>
                <DatePicker
                  value={filters.date_from || ''}
                  onChange={(e) => setFilters(p => ({ ...p, date_from: e.target.value }))}
                  className="h-9 text-sm bg-white dark:bg-slate-800 border-slate-300 dark:border-slate-600 min-w-0 w-full"
                />
              </div>
              
              <div className="space-y-2 min-w-0">
                <label className="text-xs font-medium text-slate-600 dark:text-slate-400">Date To</label>
                <DatePicker
                  value={filters.date_to || ''}
                  onChange={(e) => setFilters(p => ({ ...p, date_to: e.target.value }))}
                  className="h-9 text-sm bg-white dark:bg-slate-800 border-slate-300 dark:border-slate-600 min-w-0 w-full"
                />
              </div>

              {/* Sort By */}
              <div className="space-y-2 min-w-0">
                <label className="text-xs font-medium text-slate-600 dark:text-slate-400">Sort By</label>
                <Select 
                  value={filters.sort_by || 'created_at'} 
                  onValueChange={(value) => setFilters(prev => ({ ...prev, sort_by: value }))}
                >
                  <SelectTrigger className="h-9 text-sm bg-white dark:bg-slate-800 border-slate-300 dark:border-slate-600 min-w-0">
                    <SelectValue placeholder="Created At" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="created_at">Created At</SelectItem>
                    <SelectItem value="date_found">Date Found</SelectItem>
                    <SelectItem value="duration_days">Duration (Days)</SelectItem>
                    <SelectItem value="overall_score">Overall Score</SelectItem>
                    <SelectItem value="hook_score">Hook Score</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* Sort Order */}
              <div className="space-y-2 min-w-0">
                <label className="text-xs font-medium text-slate-600 dark:text-slate-400">Order</label>
                <Select 
                  value={filters.sort_order || 'desc'} 
                  onValueChange={(value: 'asc' | 'desc') => setFilters(prev => ({ ...prev, sort_order: value }))}
                >
                  <SelectTrigger className="h-9 text-sm bg-white dark:bg-slate-800 border-slate-300 dark:border-slate-600 min-w-0">
                    <SelectValue placeholder="Desc" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="desc">Descending</SelectItem>
                    <SelectItem value="asc">Ascending</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          )}
        </div>
      </div>
    );
  }

  return (
    <div>
      <Button variant="outline" disabled={disabled} onClick={() => setOpen(!open)}>
          <Filter className="mr-2 h-4 w-4" />
        {open ? 'Hide Filters' : 'Show Filters'}
        </Button>

      {open && (
        <div className="mt-4 rounded-lg border border-border bg-card p-4 max-h-[80vh] overflow-y-auto w-full sm:w-96 space-y-6">
          <div className="pb-2 border-b mb-2">
            <h3 className="font-mono text-photon-300 text-lg">Ad Filters</h3>
            <p className="text-sm text-muted-foreground">Filter ads based on performance, content, and metadata</p>
          </div>

          {/* Legacy form content for non-inline mode */}
          <div className="space-y-6">
            {/* Competitor Dropdown */}
          <div className="space-y-2">
              <label className="text-sm font-medium text-foreground">Competitor</label>
              <Select
                value={filters.competitor_id ? String(filters.competitor_id) : 'all'}
                onValueChange={(value) => {
                  setFilters(prev => ({ ...prev, competitor_id: value === 'all' ? undefined : Number(value) }))
                }}
                disabled={loadingCompetitors}
              >
                <SelectTrigger className="w-full">
                  <SelectValue placeholder={loadingCompetitors ? "Loading competitors..." : "All Competitors"} />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Competitors</SelectItem>
                  {competitors.length > 0 ? competitors.map(c => (
                    <SelectItem key={c.id} value={String(c.id)}>{c.name}</SelectItem>
                  )) : (
                    <SelectItem value="no-data" disabled>
                      {loadingCompetitors ? 'Loading...' : 'No competitors found'}
                    </SelectItem>
                  )}
                </SelectContent>
              </Select>
          </div>

          {/* Media Type */}
          <div className="space-y-2">
            <label className="text-sm font-medium text-foreground">Media Type</label>
            <Select 
              value={filters.media_type || 'all'} 
              onValueChange={(value) => setFilters(prev => ({ 
                ...prev, 
                media_type: value === 'all' ? undefined : value 
              }))}>
              <SelectTrigger className="w-full">
                <SelectValue placeholder="All Media Types" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Media Types</SelectItem>
                <SelectItem value="image">Image</SelectItem>
                <SelectItem value="video">Video</SelectItem>
                <SelectItem value="carousel">Carousel</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* Active Status */}
          <div className="space-y-2">
            <label className="text-sm font-medium text-foreground">Status</label>
            <Select 
              value={filters.is_active !== undefined ? String(filters.is_active) : 'all'}
              onValueChange={(value) => {
                const isActive = value === 'all' ? undefined : value === 'true';
                setFilters(prev => ({ ...prev, is_active: isActive }));
              }}>
              <SelectTrigger className="w-full">
                <SelectValue placeholder="All Ads" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Ads</SelectItem>
                <SelectItem value="true">Active Ads</SelectItem>
                <SelectItem value="false">Ended Ads</SelectItem>
              </SelectContent>
            </Select>
          </div>
          
            {/* Score sliders */}
          <div className="space-y-4">
            <label className="text-sm font-medium text-foreground">Overall Score Range</label>
            <Slider 
              value={overallScoreRange} 
              min={0} 
              max={10} 
              step={0.5}
              onValueChange={setOverallScoreRange}
              className="pb-6 mb-2"
            />
            <div className="flex justify-between text-xs text-muted-foreground">
              <span>{overallScoreRange[0].toFixed(1)}</span>
              <span>{overallScoreRange[1].toFixed(1)}</span>
            </div>
          </div>
          <div className="space-y-4">
            <label className="text-sm font-medium text-foreground">Hook Score Range</label>
            <Slider 
              value={hookScoreRange} 
              min={0} 
              max={10} 
              step={0.5}
              onValueChange={setHookScoreRange}
              className="pb-6 mb-2" 
            />
            <div className="flex justify-between text-xs text-muted-foreground">
              <span>{hookScoreRange[0].toFixed(1)}</span>
              <span>{hookScoreRange[1].toFixed(1)}</span>
            </div>
          </div>

          {/* Date Range */}
          <div className="space-y-4">
            <label className="text-sm font-medium text-foreground flex items-center gap-1">
              <CalendarRange className="h-4 w-4 text-muted-foreground" />
              Date Range
            </label>
            <div className="grid grid-cols-2 gap-2">
              <DatePicker
                label="From"
                value={filters.date_from || ''}
                onChange={(e) => setFilters(prev => ({ ...prev, date_from: e.target.value }))}
              />
              <DatePicker
                label="To"
                value={filters.date_to || ''}
                onChange={(e) => setFilters(prev => ({ ...prev, date_to: e.target.value }))}
              />
            </div>
          </div>

          {/* Sort Options */}
          <div className="space-y-2">
            <label className="text-sm font-medium text-foreground">Sort By</label>
            <div className="grid grid-cols-2 gap-2">
              <Select 
                value={filters.sort_by || 'created_at'} 
                onValueChange={(value) => setFilters(prev => ({ ...prev, sort_by: value }))}>
                <SelectTrigger>
                  <SelectValue placeholder="Created At" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="created_at">Created At</SelectItem>
                  <SelectItem value="date_found">Date Found</SelectItem>
                  <SelectItem value="duration_days">Duration (Days)</SelectItem>
                  <SelectItem value="overall_score">Overall Score</SelectItem>
                  <SelectItem value="hook_score">Hook Score</SelectItem>
                </SelectContent>
              </Select>
              <Select 
                value={filters.sort_order || 'desc'} 
                onValueChange={(value: 'asc' | 'desc') => setFilters(prev => ({ ...prev, sort_order: value }))}>
                <SelectTrigger>
                  <SelectValue placeholder="Descending" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="desc">Descending</SelectItem>
                  <SelectItem value="asc">Ascending</SelectItem>
                </SelectContent>
              </Select>
          </div>
        </div>

            {/* Apply/Reset */}
            <div className="flex-col sm:flex-row gap-2 flex">
          <Button 
            variant="outline"
            onClick={handleReset}
            className="w-full sm:w-auto"
          >
            <X className="mr-2 h-4 w-4" />
            Reset
          </Button>
          <Button 
            onClick={handleApplyFilters}
            className="w-full sm:w-auto bg-photon-500 hover:bg-photon-600 text-black"
          >
            <Check className="mr-2 h-4 w-4" />
            Apply Filters
          </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default AdFilters; 


================================================
File: src/features/dashboard/components/AdList.tsx
================================================
'use client';

import { AdWithAnalysis } from '@/types/ad';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Checkbox } from '@/components/ui/checkbox';
import { Button } from '@/components/ui/button';
import { 
  Play, 
  Image as ImageIcon, 
  Calendar, 
  Target, 
  TrendingUp, 
  ExternalLink,
  Eye,
  EyeOff
} from 'lucide-react';
import { useRouter } from 'next/navigation';

export interface AdListProps {
  ads: AdWithAnalysis[];
  selectedAds: Set<number>;
  onSelectionChange: (adId: number, selected: boolean) => void;
  onSelectAll?: (selected: boolean) => void;
  showSelection?: boolean;
}

export function AdList({ 
  ads, 
  selectedAds, 
  onSelectionChange, 
  onSelectAll,
  showSelection = true 
}: AdListProps) {
  const router = useRouter();

  const handleAdClick = (adId: number) => {
    router.push(`/ads/${adId}`);
  };

  const formatScore = (score?: number) => {
    if (score === undefined) return 'N/A';
    return score.toFixed(1);
  };

  const getScoreColor = (score?: number) => {
    if (score === undefined) return 'text-gray-400';
    if (score >= 8) return 'text-green-400';
    if (score >= 6) return 'text-yellow-400';
    return 'text-red-400';
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffTime = now.getTime() - date.getTime();
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
    
    if (diffDays === 0) return 'Today';
    if (diffDays === 1) return 'Yesterday';
    if (diffDays < 7) return `${diffDays} days ago`;
    if (diffDays < 30) return `${Math.floor(diffDays / 7)} weeks ago`;
    if (diffDays < 365) return `${Math.floor(diffDays / 30)} months ago`;
    return `${Math.floor(diffDays / 365)} years ago`;
  };

  const allSelected = ads.length > 0 && ads.every(ad => ad.id !== undefined && selectedAds.has(ad.id));
  const someSelected = ads.some(ad => ad.id !== undefined && selectedAds.has(ad.id));

  return (
    <div className="space-y-4">
      {/* Header with bulk select */}
      {showSelection && onSelectAll && (
        <Card className="border-dashed">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-2">
                <Checkbox
                  checked={allSelected}
                  onCheckedChange={(checked) => onSelectAll(checked === true)}
                />
                <span className="text-sm font-medium">
                  {selectedAds.size > 0 ? `${selectedAds.size} selected` : 'Select all'}
                </span>
              </div>
              <div className="text-sm text-muted-foreground">
                {ads.length} ads total
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Ad List */}
      <div className="space-y-2">
        {ads.map((ad) => (
          <Card 
            key={ad.id} 
            className="hover:shadow-md transition-shadow cursor-pointer"
            onClick={() => ad.id && handleAdClick(ad.id)}
          >
            <CardContent className="p-4">
              <div className="flex items-center space-x-4">
                {/* Selection Checkbox */}
                {showSelection && ad.id !== undefined && (
                  <div onClick={(e) => e.stopPropagation()}>
                    <Checkbox
                      checked={selectedAds.has(ad.id)}
                      onCheckedChange={(checked) => onSelectionChange(ad.id!, checked === true)}
                    />
                  </div>
                )}

                {/* Media Preview */}
                <div className="flex-shrink-0 w-16 h-16 rounded-lg bg-iridium-800 flex items-center justify-center overflow-hidden">
                  {(() => {
                    const firstCreative = ad.creatives?.[0];
                    const firstMedia = firstCreative?.media?.[0];
                    const mediaType = firstMedia?.type || ad.media_type;
                    const mediaUrl = firstMedia?.url || ad.media_url;

                    if (mediaType === 'video') {
                      return mediaUrl ? (
                        <div className="relative w-full h-full">
                          <video className="w-full h-full object-cover" preload="metadata" muted>
                            <source src={mediaUrl} type="video/mp4" />
                          </video>
                          <div className="absolute inset-0 flex items-center justify-center">
                            <Play className="h-6 w-6 text-white/80" />
                          </div>
                        </div>
                      ) : (
                        <Play className="h-6 w-6 text-iridium-400" />
                      );
                    }
                    
                    return mediaUrl ? (
                      <img src={mediaUrl} alt="Ad preview" className="w-full h-full object-cover" />
                    ) : (
                      <ImageIcon className="h-6 w-6 text-iridium-400" />
                    );
                  })()}
                </div>

                {/* Competitor Info */}
                <div className="flex-shrink-0 flex items-center space-x-2">
                                   <Avatar className="h-8 w-8">
                   <AvatarImage 
                     src={ad.competitor?.page_id 
                       ? `https://graph.facebook.com/${ad.competitor.page_id}/picture?width=32&height=32`
                       : undefined
                     }
                   />
                   <AvatarFallback>
                     {ad.competitor?.name.charAt(0).toUpperCase()}
                   </AvatarFallback>
                 </Avatar>
                  <div>
                    <div className="font-medium text-sm">{ad.competitor?.name}</div>
                    <div className="text-xs text-muted-foreground">{ad.page_name}</div>
                  </div>
                </div>

                {/* Ad Content */}
                <div className="flex-1 min-w-0">
                  <div className="flex items-start justify-between">
                    <div className="flex-1 min-w-0 pr-4">
                      <h3 className="font-medium text-sm truncate">
                        {ad.main_title || ad.ad_copy || 'Untitled Ad'}
                      </h3>
                      <p className="text-xs text-muted-foreground mt-1 line-clamp-2">
                        {ad.main_body_text || ad.main_caption || 'No description available'}
                      </p>
                    </div>
                  </div>
                </div>

                {/* Metadata */}
                <div className="flex-shrink-0 flex items-center space-x-4 text-xs text-muted-foreground">
                  {/* Countries */}
                  {ad.targeting?.locations && ad.targeting.locations.length > 0 && (
                    <div className="flex items-center space-x-1">
                      <Target className="h-3 w-3" />
                      <div className="flex space-x-1">
                        {ad.targeting.locations.slice(0, 2).map((location) => (
                          <Badge key={location.name} variant="outline" className="text-xs">
                            {location.name}
                          </Badge>
                        ))}
                        {ad.targeting.locations.length > 2 && (
                          <Badge variant="outline" className="text-xs">
                            +{ad.targeting.locations.length - 2}
                          </Badge>
                        )}
                      </div>
                    </div>
                  )}

                  {/* Date */}
                  {ad.date_found && (
                    <div className="flex items-center space-x-1">
                      <Calendar className="h-3 w-3" />
                      <span>{formatDate(ad.date_found)}</span>
                    </div>
                  )}

                  {/* AI Score */}
                  {ad.analysis?.overall_score && (
                    <div className="flex items-center space-x-1">
                      <TrendingUp className="h-3 w-3" />
                      <span className={getScoreColor(ad.analysis.overall_score)}>
                        {formatScore(ad.analysis.overall_score)}
                      </span>
                    </div>
                  )}

                  {/* Active Status */}
                  <div className="flex items-center space-x-1">
                    {(ad.meta?.is_active ?? ad.is_active) ? (
                      <Eye className="h-3 w-3 text-green-400" />
                    ) : (
                      <EyeOff className="h-3 w-3 text-gray-400" />
                    )}
                    <span className={(ad.meta?.is_active ?? ad.is_active) ? 'text-green-400' : 'text-gray-400'}>
                      {(ad.meta?.is_active ?? ad.is_active) ? 'Active' : 'Inactive'}
                    </span>
                  </div>
                </div>

                {/* Actions */}
                <div className="flex-shrink-0" onClick={(e) => e.stopPropagation()}>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => ad.id && handleAdClick(ad.id)}
                    className="h-8 w-8 p-0"
                  >
                    <ExternalLink className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
} 


================================================
File: src/features/dashboard/components/AdSearch.tsx
================================================
'use client';

import React, { useState, useRef } from 'react';
import { Search, X } from 'lucide-react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { cn } from '@/lib/utils';

interface AdSearchProps {
  onSearch: (query: string) => void;
  disabled?: boolean;
}

export function AdSearch({ onSearch, disabled = false }: AdSearchProps) {
  const [expanded, setExpanded] = useState(false);
  const [query, setQuery] = useState('');
  const inputRef = useRef<HTMLInputElement>(null);
  
  const handleExpand = () => {
    setExpanded(true);
    setTimeout(() => {
      inputRef.current?.focus();
    }, 100);
  };
  
  const handleCollapse = () => {
    setExpanded(false);
    setQuery('');
  };
  
  const handleSearch = () => {
    if (query.trim()) {
      onSearch(query);
    }
  };
  
  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      handleSearch();
    } else if (e.key === 'Escape') {
      handleCollapse();
    }
  };

  return (
    <div className="relative flex items-center">
      {expanded ? (
        <div className={cn(
          "flex items-center gap-1 bg-background border border-border rounded-md overflow-hidden transition-all duration-200",
          expanded ? "w-72 opacity-100" : "w-0 opacity-0"
        )}>
          <Input
            ref={inputRef}
            type="text"
            placeholder="Search by title, text, or competitor..."
            value={query}
            onChange={(e) => setQuery(e.target.value)}
            onKeyDown={handleKeyDown}
            className="border-0 focus-visible:ring-0 bg-transparent"
            disabled={disabled}
          />
          <Button 
            variant="ghost" 
            size="icon" 
            className="h-8 w-8 p-0 hover:bg-transparent" 
            onClick={handleCollapse}
            disabled={disabled}
          >
            <X className="h-4 w-4" />
            <span className="sr-only">Close</span>
          </Button>
          <Button 
            variant="ghost" 
            size="icon" 
            className="h-8 w-8 p-0 mr-1 text-photon-400 hover:text-photon-300" 
            onClick={handleSearch}
            disabled={disabled}
          >
            <Search className="h-4 w-4" />
            <span className="sr-only">Search</span>
          </Button>
        </div>
      ) : (
        <Button variant="outline" onClick={handleExpand} disabled={disabled}>
          <Search className="mr-2 h-4 w-4" />
          Search
        </Button>
      )}
    </div>
  );
}

export default AdSearch; 


================================================
File: src/features/dashboard/components/BulkActionToolbar.tsx
================================================
'use client';

import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Trash2, X } from 'lucide-react';
import { useState } from 'react';

export interface BulkActionToolbarProps {
  selectedCount: number;
  onDelete: () => void;
  onClear: () => void;
  isDeleting?: boolean;
  disabled?: boolean;
}

export function BulkActionToolbar({ 
  selectedCount, 
  onDelete, 
  onClear, 
  isDeleting = false,
  disabled = false
}: BulkActionToolbarProps) {
  if (selectedCount === 0) return null;

  return (
    <Card className="border-dashed border-orange-500/50 bg-orange-500/10">
      <CardContent className="p-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <Badge variant="secondary" className="bg-orange-500/20 text-orange-300">
              {selectedCount} selected
            </Badge>
            <span className="text-sm text-muted-foreground">
              {selectedCount === 1 ? '1 ad selected' : `${selectedCount} ads selected`}
            </span>
          </div>
          
          <div className="flex items-center space-x-2">
            <Button
              variant="destructive"
              size="sm"
              onClick={onDelete}
              disabled={isDeleting || disabled}
              className="bg-red-600 hover:bg-red-700"
            >
              <Trash2 className="h-4 w-4 mr-2" />
              {isDeleting ? 'Deleting...' : 'Delete Selected'}
            </Button>
            
            <Button
              variant="outline"
              size="sm"
              onClick={onClear}
              disabled={isDeleting || disabled}
            >
              <X className="h-4 w-4 mr-2" />
              Clear Selection
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
} 


================================================
File: src/features/dashboard/components/index.ts
================================================
export { AdCard } from './AdCard';
export { default as AdCardDefault } from './AdCard';
export { AdList } from './AdList';
export { BulkActionToolbar } from './BulkActionToolbar'; 


================================================
File: src/lib/api.ts
================================================
// API Configuration
const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';
const API_PREFIX = '/api/v1';

// API Response Types (matching backend DTOs)
export interface ApiCompetitor {
  id: number;
  name: string;
  page_id: string;
  is_active: boolean;
}

export interface ApiAdAnalysis {
  id: number;
  summary?: string;
  hook_score?: number;
  overall_score?: number;
  confidence_score?: number;
  target_audience?: string;
  content_themes?: string[];
  analysis_version?: string;
  created_at: string;
  updated_at: string;
}

export interface ApiCreativeMedia {
  type: string;
  video_sd?: string;
  video_hd?: string;
  video_preview?: string;
  image_original?: string;
  image_resized?: string;
}

export interface ApiCreativeCta {
  text?: string;
  type?: string;
}

export interface ApiCreativeLink {
  url?: string;
  caption?: string;
}

export interface ApiCreative {
  id: string;
  title?: string;
  body?: string;
  caption?: string;
  link_url?: string;
  link_description?: string;
  media?: {
    url: string;
    type: string;
  }[];
}

export interface ApiLocation {
  name: string;
  num_obfuscated: number;
  type: string;
  excluded: boolean;
  gender?: string;
  reach_breakdown?: any; // More specific if needed
  total_reach?: number;
}

export interface ApiAgeRange {
  min: number;
  max: number;
}

export interface ApiGenderAgeBreakdown {
  age_range: string;
  male?: number;
  female?: number;
  unknown?: number;
}

export interface ApiCountryReachBreakdown {
  country: string;
  age_gender_breakdowns: ApiGenderAgeBreakdown[];
}

export interface ApiAdMeta {
  is_active: boolean;
  cta_type?: string;
  display_format?: string;
  start_date?: string;
  end_date?: string;
}

export interface ApiAdTargeting {
  locations?: ApiLocation[];
  age_range?: ApiAgeRange;
  gender?: string;
  reach_breakdown?: ApiCountryReachBreakdown[];
  total_reach?: number;
}

export interface ApiLeadForm {
  questions?: Record<string, any>;
  standalone_fields?: string[];
}

export interface ApiAd {
  id: number;
  ad_archive_id: string;
  competitor: ApiCompetitor;
  ad_copy?: string;
  main_title?: string;
  main_body_text?: string;
  main_caption?: string;
  media_type?: string;
  media_url?: string;
  main_image_urls?: string[];
  main_video_urls?: string[];
  page_name?: string;
  page_id?: string;
  page_profile_picture_url?: string;
  publisher_platform?: string[];
  targeted_countries?: string[];
  impressions_text?: string;
  spend?: string;
  cta_text?: string;
  cta_type?: string;
  date_found: string;
  start_date?: string;
  end_date?: string;
  is_active?: boolean;
  duration_days?: number;
  created_at: string;
  updated_at: string;
  analysis?: ApiAdAnalysis;
  
  // New fields based on AdCreate model
  meta?: ApiAdMeta;
  targeting?: ApiAdTargeting;
  lead_form?: ApiLeadForm;
  creatives?: ApiCreative[];
  
  // New fields for Ad Sets
  ad_set_id?: number;
  variant_count?: number;
}

export interface PaginationMetadata {
  page: number;
  page_size: number;
  total_items: number;
  total_pages: number;
  has_next: boolean;
  has_previous: boolean;
}

export interface PaginatedAdsResponse {
  data: ApiAd[];
  pagination: PaginationMetadata;
}

export interface AdFilterParams {
  page?: number;
  page_size?: number;
  competitor_id?: number;
  competitor_name?: string;
  media_type?: string;
  has_analysis?: boolean;
  min_hook_score?: number;
  max_hook_score?: number;
  min_overall_score?: number;
  max_overall_score?: number;
  min_duration_days?: number;
  max_duration_days?: number;
  date_from?: string;
  date_to?: string;
  is_active?: boolean;
  search?: string;
  sort_by?: string;
  sort_order?: 'asc' | 'desc';
}

// API Error handling
export class ApiError extends Error {
  constructor(public status: number, message: string, public data?: any) {
    super(message);
    this.name = 'ApiError';
  }
}

// API Client
class ApiClient {
  private baseURL: string;

  constructor() {
    this.baseURL = API_BASE_URL + API_PREFIX;
  }

  private async request<T>(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<T> {
    const url = `${this.baseURL}${endpoint}`;
    
    const config: RequestInit = {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
      ...options,
    };

    try {
      const response = await fetch(url, config);
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new ApiError(
          response.status,
          errorData.detail || `HTTP ${response.status}: ${response.statusText}`,
          errorData
        );
      }

      return await response.json();
    } catch (error) {
      if (error instanceof ApiError) {
        throw error;
      }
      
      // Handle network errors
      throw new ApiError(
        0,
        `Network error: ${error instanceof Error ? error.message : 'Unknown error'}`,
        error
      );
    }
  }

  // Ads API methods
  async getAds(filters?: AdFilterParams): Promise<PaginatedAdsResponse> {
    const params = new URLSearchParams();
    
    if (filters) {
      Object.entries(filters).forEach(([key, value]) => {
        if (value !== undefined && value !== null) {
          params.append(key, value.toString());
        }
      });
    }

    const query = params.toString() ? `?${params.toString()}` : '';
    return this.request<PaginatedAdsResponse>(`/ads${query}`);
  }
  
  async getAdsInSet(adSetId: number, page: number = 1, pageSize: number = 20): Promise<PaginatedAdsResponse> {
    const params = new URLSearchParams();
    params.append('page', page.toString());
    params.append('page_size', pageSize.toString());
    
    const query = params.toString() ? `?${params.toString()}` : '';
    return this.request<PaginatedAdsResponse>(`/ad-sets/${adSetId}${query}`);
  }

  async getAdById(id: number): Promise<ApiAd> {
    return this.request<ApiAd>(`/ads/${id}`);
  }

  async getTopPerformingAds(limit: number = 10): Promise<ApiAd[]> {
    const params = new URLSearchParams({ limit: limit.toString() });
    return this.request<ApiAd[]>(`/ads/top-performing?${params.toString()}`);
  }

  async searchAds(query: string, limit: number = 50): Promise<ApiAd[]> {
    const params = new URLSearchParams({ q: query, limit: limit.toString() });
    return this.request<ApiAd[]>(`/ads/search?${params.toString()}`);
  }

  async getCompetitorAds(competitorId: number, limit: number = 50): Promise<ApiAd[]> {
    const params = new URLSearchParams({ limit: limit.toString() });
    return this.request<ApiAd[]>(`/ads/competitor/${competitorId}?${params.toString()}`);
  }

  async deleteAd(id: number): Promise<{ message: string }> {
    return this.request<{ message: string }>(`/ads/${id}`, {
      method: 'DELETE',
    });
  }

  async bulkDeleteAds(ids: number[]): Promise<{ message: string; deleted_count: number; requested_count: number }> {
    return this.request<{ message: string; deleted_count: number; requested_count: number }>(
      `/ads/bulk`,
      {
        method: 'DELETE',
        body: JSON.stringify({ ad_ids: ids }),
      }
    );
  }

  async deleteAllAds(): Promise<{ message: string; count: number }> {
    return this.request<{ message: string; count: number }>(
      `/ads/all`,
      {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          confirmation: true
        })
      }
    );
  }

  async getCompetitors(skip: number = 0, limit: number = 100, isActive?: boolean): Promise<ApiCompetitor[]> {
    const params = new URLSearchParams({
      skip: skip.toString(),
      limit: limit.toString(),
    });
    
    if (isActive !== undefined) {
      params.append('is_active', isActive.toString());
    }

    return this.request<ApiCompetitor[]>(`/competitors?${params.toString()}`);
  }

  async getCompetitor(id: number): Promise<ApiCompetitor> {
    return this.request<ApiCompetitor>(`/competitors/${id}`);
  }
}

// Create and export API client instance
export const apiClient = new ApiClient();

// Ads API wrapper for backwards compatibility
export const adsApi = {
  getAds: (filters?: AdFilterParams) => apiClient.getAds(filters),
  getAdById: (id: number) => apiClient.getAdById(id),
  deleteAd: (id: number) => apiClient.deleteAd(id),
  bulkDeleteAds: (ids: number[]) => apiClient.bulkDeleteAds(ids),
  deleteAllAds: () => apiClient.deleteAllAds(),
  getTopPerformingAds: (limit?: number) => apiClient.getTopPerformingAds(limit),
  searchAds: (query: string, limit?: number) => apiClient.searchAds(query, limit),
  getCompetitorAds: (competitorId: number, limit?: number) => apiClient.getCompetitorAds(competitorId, limit),
  getCompetitors: (skip?: number, limit?: number, isActive?: boolean) => apiClient.getCompetitors(skip, limit, isActive),
  getCompetitor: (id: number) => apiClient.getCompetitor(id),
  getAdsInSet: (adSetId: number, page?: number, pageSize?: number) => apiClient.getAdsInSet(adSetId, page, pageSize),
};

export default apiClient;

// ========================================
// Competitor API Functions
// ========================================

export interface Competitor {
  id: number;
  name: string;
  page_id: string;
  is_active: boolean;
  ads_count: number;
  created_at: string;
  updated_at: string;
}

export interface CompetitorDetail extends Competitor {
  active_ads_count: number;
  analyzed_ads_count: number;
}

export interface CompetitorCreate {
  name: string;
  page_id: string;
  is_active?: boolean;
}

export interface CompetitorUpdate {
  name?: string;
  page_id?: string;
  is_active?: boolean;
}

export interface PaginatedCompetitors {
  data: Competitor[];
  total: number;
  page: number;
  page_size: number;
  total_pages: number;
  has_next: boolean;
  has_previous: boolean;
}

export interface CompetitorStats {
  total_competitors: number;
  active_competitors: number;
  inactive_competitors: number;
  competitors_with_ads: number;
  total_ads_across_competitors: number;
  avg_ads_per_competitor: number;
}

export interface CompetitorScrapeRequest {
  countries?: string[];
  max_pages?: number;
  delay_between_requests?: number;
  active_status?: 'active' | 'inactive' | 'all';
  date_from?: string; // YYYY-MM-DD
  date_to?: string;   // YYYY-MM-DD
}

export interface TaskResponse {
  task_id: string;
  status: string;
  message: string;
}

// Get paginated competitors
export async function getCompetitors(params: {
  page?: number;
  page_size?: number;
  is_active?: boolean;
  search?: string;
  sort_by?: string;
  sort_order?: string;
}): Promise<PaginatedCompetitors> {
  const query = new URLSearchParams();
  
  if (params.page) query.append('page', params.page.toString());
  if (params.page_size) query.append('page_size', params.page_size.toString());
  if (params.is_active !== undefined) query.append('is_active', params.is_active.toString());
  if (params.search) query.append('search', params.search);
  if (params.sort_by) query.append('sort_by', params.sort_by);
  if (params.sort_order) query.append('sort_order', params.sort_order);

  const response = await fetch(`${API_BASE_URL}${API_PREFIX}/competitors?${query.toString()}`, {
    headers: {
      'Content-Type': 'application/json',
    },
  });

  if (!response.ok) {
    throw new Error(`Failed to fetch competitors: ${response.statusText}`);
  }

  return response.json();
}

// Get competitor by ID
export async function getCompetitor(competitorId: number): Promise<CompetitorDetail> {
  const response = await fetch(`${API_BASE_URL}${API_PREFIX}/competitors/${competitorId}`, {
    headers: {
      'Content-Type': 'application/json',
    },
  });

  if (!response.ok) {
    throw new Error(`Failed to fetch competitor: ${response.statusText}`);
  }

  return response.json();
}

// Create new competitor
export async function createCompetitor(competitorData: CompetitorCreate): Promise<Competitor> {
  const response = await fetch(`${API_BASE_URL}${API_PREFIX}/competitors`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(competitorData),
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.detail || `Failed to create competitor: ${response.statusText}`);
  }

  return response.json();
}

// Update competitor
export async function updateCompetitor(competitorId: number, competitorData: CompetitorUpdate): Promise<CompetitorDetail> {
  const response = await fetch(`${API_BASE_URL}${API_PREFIX}/competitors/${competitorId}`, {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(competitorData),
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.detail || `Failed to update competitor: ${response.statusText}`);
  }

  return response.json();
}

// Delete competitor
export async function deleteCompetitor(competitorId: number): Promise<{ message: string; soft_delete: boolean }> {
  const response = await fetch(`${API_BASE_URL}${API_PREFIX}/competitors/${competitorId}`, {
    method: 'DELETE',
    headers: {
      'Content-Type': 'application/json',
    },
  });

  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(errorData.detail || 'Failed to delete competitor');
  }
  return response.json();
}

export async function bulkDeleteCompetitors(competitorIds: number[]): Promise<{ message: string; soft_deleted_count: number; hard_deleted_count: number; not_found_count: number; }> {
  const response = await fetch(`${API_BASE_URL}${API_PREFIX}/competitors/`, {
    method: 'DELETE',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ competitor_ids: competitorIds }),
  });
  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(errorData.detail || 'Failed to bulk delete competitors');
  }
  return response.json();
}

// Get competitor statistics
export async function getCompetitorStats(): Promise<CompetitorStats> {
  const response = await fetch(`${API_BASE_URL}${API_PREFIX}/competitors/stats/overview`, {
    headers: {
      'Content-Type': 'application/json',
    },
  });

  if (!response.ok) {
    throw new Error(`Failed to fetch competitor stats: ${response.statusText}`);
  }

  return response.json();
}

// Search competitors
export async function searchCompetitors(query: string, limit: number = 50): Promise<Competitor[]> {
  const searchParams = new URLSearchParams();
  searchParams.append('q', query);
  searchParams.append('limit', limit.toString());

  const response = await fetch(`${API_BASE_URL}${API_PREFIX}/competitors/search/query?${searchParams.toString()}`, {
    headers: {
      'Content-Type': 'application/json',
    },
  });

  if (!response.ok) {
    throw new Error(`Failed to search competitors: ${response.statusText}`);
  }

  return response.json();
}

// Scrape competitor ads
export async function scrapeCompetitorAds(competitorId: number, scrapeRequest: CompetitorScrapeRequest): Promise<TaskResponse> {
  const response = await fetch(`${API_BASE_URL}${API_PREFIX}/competitors/${competitorId}/scrape`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(scrapeRequest),
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.detail || `Failed to start scraping: ${response.statusText}`);
  }

  return response.json();
}

// Get scraping task status
export async function getScrapingStatus(taskId: string): Promise<any> {
  const response = await fetch(`${API_BASE_URL}${API_PREFIX}/competitors/scrape/status/${taskId}`, {
    headers: {
      'Content-Type': 'application/json',
    },
  });

  if (!response.ok) {
    throw new Error(`Failed to fetch scraping status: ${response.statusText}`);
  }

  return response.json();
}

// Get competitor ads
export async function getCompetitorAds(competitorId: number, params: {
  page?: number;
  page_size?: number;
  is_active?: boolean;
  has_analysis?: boolean;
}) {
  const query = new URLSearchParams();
  
  if (params.page) query.append('page', params.page.toString());
  if (params.page_size) query.append('page_size', params.page_size.toString());
  if (params.is_active !== undefined) query.append('is_active', params.is_active.toString());
  if (params.has_analysis !== undefined) query.append('has_analysis', params.has_analysis.toString());

  const response = await fetch(`${API_BASE_URL}${API_PREFIX}/competitors/${competitorId}/ads?${query.toString()}`, {
    headers: {
      'Content-Type': 'application/json',
    },
  });

  if (!response.ok) {
    throw new Error(`Failed to fetch competitor ads: ${response.statusText}`);
  }

  return response.json();
} 


================================================
File: src/lib/transformers.ts
================================================
import { ApiAd, ApiCompetitor, ApiAdAnalysis } from './api';
import { AdWithAnalysis, Ad, Competitor, AdAnalysis } from '@/types/ad';

/**
 * Transform API competitor data to component format
 */
export function transformCompetitor(apiCompetitor: ApiCompetitor): Competitor {
  return {
    id: apiCompetitor.id,
    name: apiCompetitor.name,
    page_id: apiCompetitor.page_id,
    is_active: apiCompetitor.is_active,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
  };
}

/**
 * Transform API ad analysis data to component format
 */
export function transformAdAnalysis(apiAnalysis: ApiAdAnalysis): AdAnalysis {
  return {
    id: apiAnalysis.id,
    ad_id: 0, // Will be set by the caller
    summary: apiAnalysis.summary,
    hook_score: apiAnalysis.hook_score,
    overall_score: apiAnalysis.overall_score,
    ai_prompts: undefined,
    raw_ai_response: undefined,
    target_audience: apiAnalysis.target_audience,
    ad_format_analysis: undefined,
    competitor_insights: undefined,
    content_themes: apiAnalysis.content_themes,
    performance_predictions: undefined,
    analysis_version: apiAnalysis.analysis_version,
    confidence_score: apiAnalysis.confidence_score,
    created_at: apiAnalysis.created_at,
    updated_at: apiAnalysis.updated_at,
  };
}

/**
 * Transform API ad data to component format
 */
export function transformAd(apiAd: ApiAd): Ad {
  return {
    id: apiAd.id,
    ad_archive_id: apiAd.ad_archive_id,
    ad_copy: apiAd.ad_copy,
    media_type: apiAd.media_type,
    media_url: apiAd.media_url,
    date_found: apiAd.date_found,
    
    // Basic Facebook ad fields
    page_name: apiAd.page_name,
    publisher_platform: apiAd.publisher_platform,
    impressions_text: apiAd.impressions_text,
    cta_text: apiAd.cta_text,
    
    // Extended Facebook ad fields
    page_id: apiAd.page_id,
    start_date: apiAd.start_date,
    end_date: apiAd.end_date,
    spend: apiAd.spend,
    page_profile_picture_url: apiAd.page_profile_picture_url,
    
    // Main ad content
    main_title: apiAd.main_title,
    main_body_text: apiAd.main_body_text,
    main_caption: apiAd.main_caption,
    
    // Media URLs
    main_image_urls: apiAd.main_image_urls,
    main_video_urls: apiAd.main_video_urls,
    
    // Relationships
    competitor_id: apiAd.competitor?.id,
    competitor: transformCompetitor(apiAd.competitor),
    analysis: apiAd.analysis ? transformAdAnalysis(apiAd.analysis) : undefined,

    // New fields from the backend are now directly mapped
    meta: apiAd.meta || {},
    targeting: apiAd.targeting || { locations: [], age_range: { min: 0, max: 0 } },
    lead_form: apiAd.lead_form || { questions: {}, standalone_fields: [] },
    creatives: apiAd.creatives || [],
    
    // Ad Set fields
    ad_set_id: apiAd.ad_set_id,
    variant_count: apiAd.variant_count,
  };
}

/**
 * Transform API ad data to AdWithAnalysis format (required by AdCard)
 */
export function transformAdWithAnalysis(apiAd: ApiAd): AdWithAnalysis {
  const ad = transformAd(apiAd);
  
  // For AdWithAnalysis, we need to ensure competitor and analysis are present
  const competitor = transformCompetitor(apiAd.competitor);
  const analysis = apiAd.analysis 
    ? transformAdAnalysis(apiAd.analysis)
    : {
        id: 0,
        ad_id: apiAd.id,
        summary: undefined,
        hook_score: undefined,
        overall_score: undefined,
        ai_prompts: undefined,
        raw_ai_response: undefined,
        target_audience: undefined,
        ad_format_analysis: undefined,
        competitor_insights: undefined,
        content_themes: undefined,
        performance_predictions: undefined,
        analysis_version: undefined,
        confidence_score: undefined,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      };

  return {
    ...ad,
    competitor,
    analysis,
  };
}

/**
 * Transform array of API ads to AdWithAnalysis format
 */
export function transformAdsWithAnalysis(apiAds: ApiAd[]): AdWithAnalysis[] {
  return apiAds.map(transformAdWithAnalysis);
} 


================================================
File: src/lib/utils.ts
================================================
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"
import { differenceInDays, format, parseISO } from 'date-fns';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export function formatAdDuration(startDateStr?: string, endDateStr?: string, isActive?: boolean): { formattedDate: string | null, duration: number | null, isActive: boolean } {
  if (!startDateStr) return { formattedDate: null, duration: null, isActive: false };

  try {
    const startDate = parseISO(startDateStr);
    const endDate = endDateStr ? parseISO(endDateStr) : new Date();
    
    // Ensure dates are valid
    if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
      return { formattedDate: null, duration: null, isActive: false };
    }
    
    let duration = differenceInDays(endDate, startDate);
    // The difference might be 0 for a single day, so we ensure it's at least 1 day.
    duration = Math.max(duration, 1); 

    const formattedStartDate = format(startDate, 'MMM d, yyyy');
    const formattedEndDate = endDateStr ? format(parseISO(endDateStr), 'MMM d, yyyy') : 'Present';

    if (isActive) {
      return {
        formattedDate: `Since ${formattedStartDate}`,
        duration,
        isActive: true
      };
    }

    return {
      formattedDate: `${formattedStartDate} - ${formattedEndDate}`,
      duration,
      isActive: false
    };

  } catch (error) {
    console.error("Error formatting ad duration:", error);
    return { formattedDate: null, duration: null, isActive: false };
  }
}

/**
 * Format a date string to a more readable format
 * @param dateString Date string in ISO format
 * @returns Formatted date string (e.g., "Jan 15, 2023")
 */
export function formatDate(dateString: string): string {
  if (!dateString) return '';
  
  try {
    const date = new Date(dateString);
    return new Intl.DateTimeFormat('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric',
    }).format(date);
  } catch (error) {
    console.error('Error formatting date:', error);
    return dateString;
  }
}



================================================
File: src/types/ad.ts
================================================
export interface Competitor {
  id: number;
  name: string;
  page_id: string;
  is_active: boolean;
  created_at: string;
  updated_at: string;
}

export interface AdAnalysis {
  id: number;
  ad_id: number;
  summary?: string;
  hook_score?: number;
  overall_score?: number;
  ai_prompts?: any;
  raw_ai_response?: any;
  target_audience?: string;
  ad_format_analysis?: any;
  competitor_insights?: any;
  content_themes?: any;
  performance_predictions?: any;
  analysis_version?: string;
  confidence_score?: number;
  created_at: string;
  updated_at: string;
}

export interface Ad {
  id?: number;
  ad_archive_id: string;
  ad_copy?: string;
  
  // Meta information
  meta: AdMeta;
  
  // Targeting information
  targeting: AdTargeting;
  
  // Lead form information
  lead_form: LeadForm;
  
  // Creatives (ads content)
  creatives: Creative[];
  
  // Additional information (not directly from Facebook API)
  date_found?: string;
  competitor_id?: number;
  competitor_name?: string;
  
  // Basic Facebook ad fields
  page_name?: string;
  publisher_platform?: string[];
  impressions_text?: string;
  end_date?: string;
  cta_text?: string;
  cta_type?: string;
  
  // Extended Facebook ad fields
  page_id?: string;
  is_active?: boolean;
  start_date?: string;
  currency?: string;
  spend?: string;
  impressions_index?: number;
  display_format?: string;
  page_like_count?: number;
  page_categories?: any[];
  page_profile_uri?: string;
  page_profile_picture_url?: string;
  targeted_countries?: any[];
  contains_sensitive_content?: boolean;
  contains_digital_created_media?: boolean;
  
  // Main ad content
  main_title?: string;
  main_body_text?: string;
  main_caption?: string;
  main_link_url?: string;
  main_link_description?: string;
  
  // Media URLs
  media_type?: string;
  media_url?: string;
  main_image_urls?: string[];
  main_video_urls?: string[];
  
  // Extra content
  extra_texts?: string[];
  extra_links?: string[];
  
  raw_data?: any;
  
  // Relationships
  competitor?: Competitor;
  analysis?: AdAnalysis;
  
  // New fields for Ad Sets
  ad_set_id?: number;
  variant_count?: number;
}

export interface AdWithAnalysis extends Ad {
  competitor: Competitor;
  analysis: AdAnalysis;
}

// Campaign type structure
export type Campaign = {
  campaign_id: string;
  platforms: string[];
  ads: Ad[];
};

// Advertiser (competitor) information
export type AdvertiserInfo = {
  page_id: string;
  page_name: string;
  page_url?: string;
  page_likes?: number;
  page_profile_picture?: string;
};

// Complete response format
export type AdsResponse = {
  advertiser_info: AdvertiserInfo;
  campaigns: Campaign[];
};

// Supporting types
export type Location = {
  name: string;
  num_obfuscated: number;
  type: string;
  excluded: boolean;
};

export type AgeRange = {
  min: number;
  max: number;
};

export type GenderAgeBreakdown = {
  age_range: string;
  male?: number;
  female?: number;
  unknown?: number;
};

export type CountryReachBreakdown = {
  country: string;
  age_gender_breakdowns: GenderAgeBreakdown[];
};

// Creative media (e.g., image, video)
export interface CreativeMedia {
  url: string;
  type: string;
}

// Creative (individual ad content)
export type Creative = {
  id: string;
  title?: string;
  body?: string;
  caption?: string;
  link_url?: string;
  link_description?: string;
  media?: CreativeMedia[];
  cta?: {
    text?: string;
    type?: string;
  };
};

// Supporting types for Meta, Targeting, and LeadForm
export interface AdMeta {
  is_active?: boolean;
  cta_type?: string;
  display_format?: string;
  start_date?: string;
  end_date?: string;
}

export interface AdTargeting {
  locations?: Location[];
  age_range?: AgeRange;
  gender?: string;
  reach_breakdown?: any; // Can be more specific if needed
  total_reach?: number;
}

export interface LeadForm {
  questions?: Record<string, any>;
  standalone_fields?: string[];
}

// Filter types for UI
export type AdFilterParams = {
  campaignId?: string;
  isActive?: boolean;
  hasLeadForm?: boolean;
  platform?: string;
  mediaType?: string;
  startDate?: string;
  endDate?: string;
  query?: string;
  page?: number;
  limit?: number;
};

// Pagination response
export type PaginatedAdsResponse = {
  items: Ad[];
  total: number;
  page: number;
  limit: number;
  totalPages: number;
};

// Ad stats type
export type AdStats = {
  total_ads: number;
  active_ads: number;
  with_lead_form: number;
  platforms: Record<string, number>;
  media_types: Record<string, number>;
}; 


================================================
File: src/types/declarations.d.ts
================================================
declare module 'next/navigation';
declare module 'lucide-react';
declare module 'date-fns'; 

